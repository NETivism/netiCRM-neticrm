<?php

use Drupal\Core\StringTranslation\TranslatableMarkup;

/**
 * Customize function to translate civivicrm string
 *
 * @param string $string
 * @param array $args
 * @param string|null $langcode
 * 
 * @return string
 */
function civicrm_alter_translation($string, $args = array(), $langcode = NULL) {
  civicrm_initialize();
  global $tsLocale;

  if (!is_string($string)) {
    return;
  }
  // don't do anything when system lang
  if ($tsLocale == CRM_Core_Config::SYSTEM_LANG) {
    return $string;
  }

  $untranslate = $string;
  $languageCode = \Drupal::languageManager()->getCurrentLanguage()->getId();
  
  if ($languageCode != 'en') {
    $options = [
      'langcode' => $languageCode,
      'context' => 'civicrm alter translation',
    ];
    $string = new TranslatableMarkup($string, $args, $options);
    $string = (string) $string;
  }

  // fallback to use CRM translation
  if($string === $untranslate){
    $i18n = CRM_Core_I18n::singleton();
    return $i18n->crm_translate($string, $args);
  }
  elseif (empty($args)) {
    return $string;
  }
  else {
    // Transform arguments before inserting them.
    foreach($args as $k => $v){
      $alter_args["%".$k] = $v;
    }
    $new = strtr($string, $alter_args);
    return $new;
  }
}