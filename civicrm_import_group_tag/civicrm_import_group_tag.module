<?php

/**
 * Implementation of hook_menu().
 */

function civicrm_import_group_tag_menu(){
  return array(
    'admin/settings/civicrm_import_group_tag' => array(
      'title'            => 'Import Group and Tag into CiviCRM',
      'access arguments' => array('import contacts'),
      'page callback'    => 'drupal_get_form',
      'page arguments'    => array('civicrm_import_group_tag_settings'),
    )
  );
}

function civicrm_import_group_tag_settings(){
  $form['#attributes'] = array('enctype' => "multipart/form-data");
  //'upload' will be used in file_check_upload()
  $form['option'] = array(
    '#type' => 'radios',
    '#required' => true,
    '#title' => t('Primary ID'),
    '#options' => array('contact_id' => t('Contact ID'), 'external_identifier' => t('External ID')),
  );
  $form['type'] = array(
    '#type' => 'radios',
    '#required' => true,
    '#title' => t('Type'),
    '#options' => array('tag' => t('Tag'), 'group' => t('Group')),
  );
  /*
  $form['quick'] = array(
    '#type' => 'checkbox',
    '#title' => t('Quicker method'),
    '#description' => t("Quicker but may have problem. Use for large number of group and contact import."),
  );
  */
  $form['multi_separator'] = array(
    '#type' => 'textfield',
    '#title' => t('Multiple tag / group separator'),
    '#default_value' => '|',
    '#description' => t('You can fill in multiple value separator when import multiple tags/group in on cell. Empty means disable thie feature. It will import any cell as one tag/group.'),
  );
  $form['upload'] = array(
    '#type' => 'file',
    '#title' => t("Import file"),
    '#description' => t('Upload your csv file here, current only support id / tag or id / group, 2 column table.'),
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Import'),
  );
  return $form;
}

/*
function civicrm_import_group_tag_settings_validate($form, &$form_state){
}
*/

function civicrm_import_group_tag_settings_submit($form, &$form_state){
  civicrm_initialize(TRUE);
  require_once("api/v2/Contact.php");
  require_once("api/v2/Group.php");
  require_once("api/v2/Tag.php");
  require_once("api/v2/GroupContact.php");
  require_once("api/v2/EntityTag.php");

  set_time_limit(6000);

  $separator = $form_state['values']['multi_separator'];
  $quick = $form_state['values']['quick'];
  $type = $form_state['values']['type'];

  if($file = file_save_upload('upload')) {
    $fd = fopen($file->filepath, "rb");
    if (!$fd) {
      return FALSE;
    }
    else{
      if($quick){
        if($form_state['values']['option'] != 'contact_id'){
          // load external identifiers
          $dao = CRM_Core_DAO::executeQuery("SELECT id, {$form_state['values']['option']} FROM civicrm_contact");
          while($dao->fetch()){
            $contacts[$dao->{$form_state['values']['option']}] = $dao->id;
          }
        }
        $groups = array();
        $groups_map = array();
      }

      while (($data = fgetcsv($fd, 0, ",")) !== FALSE) {
        if($data[0]){
          if($separator){
            $import = explode($separator, $data[1]);
            foreach($import as $k=>$v){
              if(!$v) unset($import[$k]);
              else $import[$k] = trim($v);
            }
          }
          else{
            $import = array(trim($data[1]));
          }

          if(!empty($import)){
            if($quick && $type == 'group'){
              $contact_id = $form_state['values']['option'] == 'contact_id' ?  $data[0] : $contacts[$data[0]];

              // batch in array then process.
              foreach($import as $group_name){
                if($groups_map[$group_name]){
                  $group_id = $groups_map[$group_name];
                }
                else{
                  // get or add new group
                  $params = array('title'=>$group_name);
                  $result = civicrm_group_get($params);

                  // get id
                  if(civicrm_error($result)){
                    $params = array('title' => $group_name,'is_active' => 1 );
                    $res = civicrm_group_add($params);
                    if(civicrm_error($res)){
                      drupal_set_message($res['error_message'], 'error');
                      continue;
                    }
                    else{
                      $group_id = $res['result']; 
                    }
                  }
                  else{
                    $group_id = key($result);
                  }
                  $groups_map[$group_name] = $group_id;
                }
                $groups[$group_id][$contact_id] = $contact_id;
              }
            }
            else{
              // one by one
              civicrm_import_group_tag($data[0], $import, $form_state['values']['type'], $form_state['values']['option']);
            }
          }
        }
        $row++;
      }
      foreach($groups as $gid => $c){
        CRM_Contact_BAO_GroupContact::addContactsToGroup($c, $gid, 'API');
      }
    }
  }
  return ;
}
// this will place civicrm api function.
function civicrm_import_group_tag($id, $import, $type, $main_id = 'contact_id'){
  static $exists;

  // find out contact_id
  if($main_id == 'contact_id'){
    $params = array('contact_id' => $id);
  }
  else{
    $params = array($main_id => $id);
  }
  $retrieved = &civicrm_contact_get( $params );

  if(civicrm_error($retrieved) || empty($retrieved)){
    drupal_set_message("Can't not find contact id: $id", 'error');
    $id = NULL;
    return;
  }
  else{
    $id = key($retrieved);
  }
  
  foreach($import as $text){
    if(!$exists[$text]){
      // add tag or group base on $type
      $res = array();
      if($type == 'group'){
        // dedupe
        $params = array('title'=>$text);
        $result = civicrm_group_get($params);
        if(civicrm_error($result)){
          drupal_set_message('Add new group '. $text);
          $params = array('title' => $text, 'is_active' => 1 );
          $res = civicrm_group_add($params);
          if(civicrm_error($res)){
            drupal_set_message($res['error_message'], 'error');
            continue;
          }
          else{
            $exists[$text] = $res['result']; 
          
          }
        }
        else{
          $exists[$text] = key($result);
        }
      }
      else{
        $params = array('name' => $text);
        $result =& civicrm_tag_get($params);
        if ( civicrm_error ( $result )) {
          $params = array('name' => $text, 'is_active' => 1,'domain_id' => 1);
          $res = civicrm_tag_create($params);
          if(civicrm_error($res)){
            drupal_set_message($res['error_message'], 'error');
            continue;
          }
          else{
            $exists[$text] = $res['tag_id'];
          }
        }
        else{
          $exists[$text] = $result['id'];
        }
      }
    }

    // now import contact / tag relationship
    $params_sub = array('contact_id' => $id);
    if ($type == 'group') {
      $params_sub['group_id'] = $exists[$text];
      civicrm_group_contact_add($params_sub);
    }
    else {
      $params_sub['tag_id'] = $exists[$text];
      civicrm_entity_tag_add($params_sub);
    }
  }
}

