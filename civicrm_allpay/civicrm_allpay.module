<?php
/**
 * Implementation of hook_init()
 */
function civicrm_allpay_init(){
  if(strstr($_GET['q'], 'allpay')){
    $GLOBALS['conf']['cache'] = FALSE;
  }
}

/**
 * Implementation of hook_menu()
 */
function civicrm_allpay_menu(){
  return array(
    'allpay/ipn/%' => array(
      'access callback' => true,
      'page callback' => 'civicrm_allpay_ipn',
      'page arguments' => array(2),
      'type' => MENU_CALLBACK,
      'weight' => 0,
      'file' => 'civicrm_allpay.ipn.inc',
    ),
    'allpay/popup/%' => array(
      'access callback' => true,
      'page callback' => 'civicrm_allpay_popup',
      'page arguments' => array(2),
      'type' => MENU_CALLBACK,
      'weight' => 0,
    ),
    'allpay/record/%' => array(
      'access callback' => true,
      'page callback' => 'civicrm_allpay_record',
      'page arguments' => array(2),
      'type' => MENU_CALLBACK,
      'weight' => 0,
    ),
  );
}

/**
 * hook_civicrm_pageRun
 *
 * Inject information for billing info
 */
function civicrm_allpay_civicrm_pageRun(&$page){
/* later
  if($_GET['q'] == 'civicrm/contact/view/contribution'){
    if($page->_permission && $page->_action == 4 && !empty($page->_id)){
      $result = db_query("SELECT * FROM {civicrm_contribution_allpay} WHERE cid = %d", $page->_id);
      $r = db_fetch_object($result);
      if(!empty($r)){
        // normal info
        // payment submit date
        if(!empty($r->data)){
          $data = unserialize($r->data);
        }
        $rows = array();
        $link_attr = array('absolute' => TRUE, 'attributes' => array('target' => '_blank'));
        if(!empty($r->vaccno)){
          // ATM vacc
          $rows[] = array(t('Billing'), l(t('URL'), _civicrm_allpay_popupurl('vacc', $page->_id), $link_attr));
        }
        elseif(!empty($r->tsr)){
          // printing
          if(!empty($data['mer_id'])){
            $mer_id = $data['mer_id'];
          }
          else{
            $mer_id = db_result(db_query("SELECT signature FROM {civicrm_payment_processor} WHERE is_test = 0 AND payment_processor_type = ALLPAY"));
          }
          $rows[] = array(t('Billing'), l(t('URL'), _civicrm_allpay_barcode($mer_id, $r->tsr), $link_attr));
        }
        elseif(!empty($r->card4no)){
          // creadit card
          $rows[] = array(t('Card number'), $r->card4no);
          $rows[] = array(t('Response_msg'), $r->response_msg);
        }
        $common_date = array(
          'created' => t('Created Date'),
          'expire_datetime' => t('Expire On'),
          'paid_date' => t('Paid Date'),
          'proc_datetime' => t('Process date'),
        );
        foreach($common_date as $k => $t){
          if(!empty($r->{$k})){
            $rows[] = array($t, format_date($r->{$k}, 'custom', 'Y-m-d H:i'));
          } 
          else{
            $rows[] = array($t, 'n/a');
          }
        }

        $info = theme('table', NULL, $rows, array('class'=>'crm-info-panel'));
        $template = $page->getTemplate();
        $template->assign('payment_processor_billinginfo', $info);
      }
    }
  }
*/
}

/**
 * Implementation of hook_civicrm_buildForm()
 */
function civicrm_allpay_civicrm_buildForm($form_name, &$form){
  switch($form_name){
    case 'CRM_Contribute_Form_Contribution_Main':
    case 'CRM_Event_Form_Registration_Register':
      $session = CRM_Core_Session::singleton();
      $submitted = $session->get('submitted');
      $session->set('submitted', FALSE);
      if($submitted){
        if($_SESSION['allpay']['instrument'] == 'Credit'){
          drupal_set_message(t("This message indicate your last payment may not success because you didn't submit credit card information. If you are sure you have completed the transaction, please contact us. Otherwise, you can retry again."), 'error');
        }
        else{
          drupal_set_message(t("You just submit a payment. You may want to check your email to follow payment instruction, or try submit this form again."), 'error');
        }
      }
      if($_GET['id']){
        $parsed = parse_url($_SERVER['REQUEST_URI']);
        $_SESSION['allpay'] = array(
          'path' => $_GET['q'],
          'query' => $parsed['query'],
        );
      }
      break;
    case 'CRM_Contribute_Form_Contribution_ThankYou':
    case 'CRM_Event_Form_Registration_ThankYou':
      unset($_SESSION['allpay']);
      break;
    case 'CRM_Contribute_Form_ContributionPage_Amount':
      break;
  }
}

function civicrm_allpay_error(){
  $msg = $_SESSION['allpay']['error'];
  if(!count($msg)){
    drupal_access_denied();
  }
  $output .= '<div class="allpay-error">';
  $output .= '<div class="allpay-error-first">'.array_shift($msg).'</div>';
  foreach($msg as $m){
    $items[] = $m;
  }
  $output .= theme('item_list', $items);
  $output .= '</div>';
  return $output;
}

/**
 * Implementation of hook_cron()
 */
function civicrm_allpay_cron(){
  // every morning, we check allpay payment result
  $last = variable_get('civicrm_allpay_recur_sync', 0);
  $now = time();
  if($now - $last > 86400 && date('G') > '6' && date('G') < '8'){
    civicrm_allpay_recur_sync();
    variable_set('civicrm_allpay_recur_sync', $now);
  }
}

function _civicrm_allpay_instrument($type = 'normal'){
  $i = array(
    'Credit Card' => array('label' => '信用卡', 'desc' => '', 'code' => 'Credit'),
    'ATM' => array('label' => 'ATM 轉帳', 'desc' => '', 'code' => 'ATM'),
    'Web ATM' => array('label' => 'Web ATM', 'desc' => '', 'code' => 'WebATM'),
    'Convenient Store' => array('label' => '超商條碼繳費', 'desc'=>'', 'code' => 'BARCODE'),
    'Convenient Store (Code)' => array('label'=>'超商代碼','desc' => '', 'code' => 'CVS'),
    'Alipay' => array('label'=> '支付寶', 'desc' => '', 'code' => 'Alipay'),
    // 'Tenpay' => array('label'=> '財付通', 'desc' => '', 'code' => 'Tenpay'),
  );
  if($type == 'form_name'){
    foreach($i as $name => $data){
      $form_name = preg_replace('/[^0-9a-z]+/i', '_', strtolower($name));
      $instrument[$form_name] = $data;
    }
    return $instrument;
  }
  elseif($type == 'code'){
    foreach($i as $name =>  $data){
      $instrument[$name] = $data['code'];
    }
    return $instrument;
  }
  else{
    return $i;
  }
}

/**
 * Help function for generate post string
 */
function _civicrm_allpay_vars2str($post){
  $array = array();
  foreach($post as $name => $value){
    if($value){
      $array[] = $name."=".urlencode($value);
    }
  }
  return implode('&', $array);
}


/**
 * Help funtion for printing payment info
 */
function _civicrm_allpay_payment_info($cid, $instrument){
  civicrm_initialize();
  $allpay = db_fetch_object(db_query("SELECT * FROM {civicrm_contribution_allpay} WHERE cid = %d", $cid));
  $amount = CRM_Core_DAO::singleValueQuery("SELECT total_amount FROM civicrm_contribution WHERE id = {$cid}");
  $data = array();
  switch($instrument){
    case 'cvs':
    case 'ibon':
      $data[] = array('付款代碼', $allpay->payno);
      $data[] = array('付款金額', $amount);
      $data[] = array('付款期限', format_date($allpay->expire_datetime, 'short'));
      break;
    case 'vacc':
      $data[] = array('轉帳銀行代碼', '玉山銀行 ('.$allpay->bankcode.')');
      $data[] = array('轉帳銀行帳號', $allpay->vaccno);
      $data[] = array('付款金額', $amount);
      $data[] = array('付款期限', format_date($allpay->expire_datetime, 'custom', 'Y/m/d'));
      break;
  }
  return $data;
}

function civicrm_allpay_popup($instrument){
  $cid = $_GET['cid'];
  if(!$cid){
    drupal_goto();
  }
  else{
    $allpay = db_fetch_object(db_query("SELECT * FROM {civicrm_contribution_allpay} WHERE cid = %d", $cid));
    civicrm_initialize();
    $params = array( 1 => array( $cid, 'Integer' ) );
    $amount = CRM_Core_DAO::singleValueQuery("SELECT total_amount FROM civicrm_contribution WHERE id = %1", $params);
    $output = '
<style>
  #content { text-align: center;}
  #content table {text-align: left; width: 300px; margin: 0 auto;}
  #sidebar {display:none;}
  #navigation, #branding, #admin-menu { display: none !important; }
</style>
    ';
    if($allpay){
      $rows = _civicrm_allpay_payment_info($cid, $instrument);
      $output .= '<h3>付款資訊</h3>';
      $output .= theme('table', NULL, $rows, array('align' => 'center', 'width' =>' 300', 'id' => 'payment-info'));
      $output .= '<div class="function">';
      $output .= '<input type="button" onclick="print();" value="列印">';
      $output .= '</div>';
    }
    else{
      $output = 'database not found error';
    }
  }
  return $output;
}

function _civicrm_allpay_popupurl($instrument_code, $cid){
  return url('allpay/popup/'.$instrument_code, array('absolute' => TRUE, 'query' => 'cid='.$cid));
}
function _civicrm_allpay_barcode($mer, $tsr){
  return 'https://ecbank.com.tw/order/barcode_print.php?mer_id='.$mer.'&tsr='.$tsr;
}

function civicrm_allpay_record($cid, $data = null){
  if(is_numeric($cid)){
    if(empty($data) && !empty($_POST)){
      if(arg(1) == 'record'){
        $data['#info'] = $_POST;
      }
      else{
        $data = $_POST;
      }
    }
    if(!empty($data['MerchantID']) || !empty($data['info']['MerchantID'])){
      $result = db_result(db_query("SELECT data FROM {civicrm_contribution_allpay} WHERE cid = %d", $cid));
      $exists = json_decode($result, TRUE);
      if(is_array($exists)){
        $data = array_merge($exists, $data);
      }
      $record = array(
        'cid' => $cid,
        'data' => json_encode($data),
      );
      // update
      if(db_result(db_query("SELECT cid FROM {civicrm_contribution_allpay} WHERE cid = %d", $cid))){
        drupal_write_record('civicrm_contribution_allpay', $record, 'cid');
      }
      else{
        drupal_write_record('civicrm_contribution_allpay', $record);
      }
    }
  }
}

function civicrm_allpay_recur_sync(){
  civicrm_initialize();
  module_load_include("inc", 'civicrm_allpay', 'civicrm_allpay.ipn');
  $query = "SELECT r.* FROM civicrm_contribution_recur r WHERE r.contribution_status_id = 1 AND r.end_date IS NULL AND r.frequency_unit = 'month' ORDER BY r.id DESC";
  $result = CRM_Core_DAO::executeQuery($query);
  while($result->fetch()){
    // check if yesterday is next day of expect recurring
    if(date('d', strtotime($result->start_date) + 86400) === date('d')){
      civicrm_allpay_recur_check($result->id);
    }
  }
}

function civicrm_allpay_recur_check($rid){
  civicrm_initialize();
  $now = time();
  $query = "SELECT c.id as cid, c.contact_id, c.is_test, c.trxn_id, c.payment_processor_id as pid, c.contribution_status_id, r.id as rid FROM civicrm_contribution_recur r INNER JOIN civicrm_contribution c ON r.id = c.contribution_recur_id WHERE r.id = %1 ORDER BY c.id ASC";
  $result = CRM_Core_DAO::executeQuery($query, array(1 => array($rid, 'Integer')));

  // fetch first contribution
  $result->fetch();
  if(!empty($result->N)){
    $first_contrib_id = $result->cid;
    $is_test = $result->is_test;
    $payment_processor = CRM_Core_BAO_PaymentProcessor::getPayment($result->pid, $is_test ? 'test' : 'live');
    if($payment_processor['payment_processor_type'] != 'ALLPAY'){
      return;
    }

    if(!empty($payment_processor['url_recur']) && !empty($payment_processor['user_name'])){
      $processor = array(
        'password' => $payment_processor['password'],
        'signature' => $payment_processor['signature'],
      );
      $post_data = array(
        'MerchantID' => $payment_processor['user_name'],
        'MerchantTradeNo' => $result->trxn_id,
        'TimeStamp' => $now,
      );
      _civicrm_allpay_checkmacvalue($post_data, $processor);
      $order = _civicrm_allpay_postdata($payment_processor['url_recur'], $post_data);
      if(!empty($order) && $order->MerchantTradeNo == $result->trxn_id && count($order->ExecLog > 1)){
        $orders = array();
        foreach($order->ExecLog as $o){
          // skip first recorded contribution
          if($order->gwsr == $o->gwsr){
            continue;
          }
          $trxn_id = _civicrm_allpay_recur_trxn($order->MerchantTradeNo, $o->gwsr);
          $orders[$trxn_id] = $o;
        }
        // remove exists records
        while($result->fetch()){
          unset($orders[$result->trxn_id]);
        }
        // real record to add
        if(!empty($orders)){
          foreach($orders as $o){
            $get = $post = $ids = array();
            $ids = CRM_Contribute_BAO_Contribution::buildIds($first_contrib_id);
            $query = CRM_Contribute_BAO_Contribution::makeNotifyUrl($ids, NULL, $return_query = TRUE);
            parse_str($query, $get);
            $get['is_recur'] = 1;
            $post = array(
              'MerchantID' => $order->MerchantID,
              'MerchantTradeNo' => $order->MerchantTradeNo,
              'RtnCode' => $order->RtnCode,
              'RtnMsg' => '',
              'PeriodType' => $order->PeriodType,
              'Frequency' => $order->Frequency,
              'ExecTimes' => $order->ExecTimes,
              'Amount' => $o->amount,
              'Gwsr' => $o->gwsr,
              'ProcessDate' => $o->process_date,
              'AuthCode' => $o->auth_code,
              'FirstAuthAmount' => $o->PeriodAmount,
              'TotalSuccessTimes' => $order->TotalSuccessTimes,
              //'SimulatePaid' => $order->SimulatePaid,
            );

            // manually trigger ipn
            civicrm_allpay_ipn('Credit', $post, $get);
          }
        }
      }
    }
  }
}

function _civicrm_allpay_checkmacvalue(&$args, $payment_processor){
  // remove empty arg
  if(is_array($args)){
    foreach($args as $k => $v){
      if((empty($v) && $v != '0') || $k == 'CheckMacValue'){
        unset($args[$k]);
      }
    }
  }
  elseif(is_string($args)){
    $tmp = explode('&', $args);
    $args = array();
    foreach($tmp as $v){
      list($key, $value) = explode('=', $v);
      $args[$key] = $value;
    }
  }
  ksort($args);
  $a = array(
    'HashKey='.$payment_processor['password'],
  );
  foreach($args as $k => $v){
    $a[] = $k.'='.$v;
  }
  $a[] = 'HashIV='.$payment_processor['signature'];
  $keystr = implode('&', $a);
  $keystr = urlencode($keystr);
  $keystr = strtolower($keystr);

  $checkmacvalue = md5($keystr);
  $args['CheckMacValue'] = $checkmacvalue;
  return $checkmacvalue;
}

function _civicrm_allpay_recur_trxn($parent, $gwsr){
  if(empty($gwsr)){
    return $parent;
  }
  else{
    return $parent . '-' . $gwsr;
  }
}

function _civicrm_allpay_postdata($url, $post_data){
  $ch = curl_init($url);
  curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 1);
  curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
  curl_setopt($ch, CURLOPT_POST, 1);
  $field_string = http_build_query($post_data, '', '&');
  curl_setopt($ch, CURLOPT_POSTFIELDS, $field_string);
  curl_setopt($ch, CURLOPT_HEADER, 0);  // DO NOT RETURN HTTP HEADERS
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);  // RETURN THE CONTENTS OF THE CALL
  $receive = curl_exec($ch);
  if(curl_errno($ch)){
    watchdog('civicrm_allpay', 'Fetch recuring error: curl_errno: '.curl_errno($ch).' / '. curl_error($ch));
  }
  curl_close($ch);
  return !empty($receive) ? json_decode($receive) : FALSE;
}

function _civicrm_allpay_cancel_recuring_message(){
  $js = '歐付寶無法取消定期定額捐款<script>$(".ui-dialog-buttonset button").hide();</script>';
  return $js;
}
