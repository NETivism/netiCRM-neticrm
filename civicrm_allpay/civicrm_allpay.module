<?php
/**
 * Implementation of hook_init()
 */
function civicrm_allpay_init(){
  if(strstr($_GET['q'], 'allpay')){
    $GLOBALS['conf']['cache'] = FALSE;
  }
}

/**
 * Implementation of hook_menu()
 */
function civicrm_allpay_menu(){
  return array(
    'allpay/ipn/%' => array(
      'access callback' => true,
      'page callback' => 'civicrm_allpay_ipn',
      'page arguments' => array(2),
      'type' => MENU_CALLBACK,
      'weight' => 0,
      'file' => 'civicrm_allpay.ipn.inc',
    ),
    'allpay/record/%' => array(
      'access callback' => true,
      'page callback' => 'civicrm_allpay_record',
      'page arguments' => array(2),
      'type' => MENU_CALLBACK,
      'weight' => 0,
    ),
  );
}

/**
 * Implementation of hook_civicrm_buildForm()
 */
function civicrm_allpay_civicrm_buildForm($form_name, &$form){
  switch($form_name){
    case 'CRM_Admin_Form_PaymentProcessor':
      $is_allpay = FALSE;
      if(strstr($_GET['pp'], 'ALLPAY')){
        $is_allpay = TRUE;
      }
      elseif(!empty($form->_ppType) && strstr($form->_ppType, 'ALLPAY')){
        $is_allpay = TRUE;
      }
      if($is_allpay){
        drupal_set_message("本網站的 IP 為「".gethostbyname($_SERVER['SERVER_NAME']).'」。<br />請登入綠界後台，廠商後台 > 系統開發管理 > 系統介接設定 > 允許的 IP中，填入本站IP。');
      }
      break;
    case 'CRM_Contribute_Form_Contribution_Main':
    case 'CRM_Event_Form_Registration_Register':
      $session = CRM_Core_Session::singleton();
      $submitted = $session->get('submitted');
      $session->set('submitted', FALSE);
      if($submitted){
        if($_SESSION['allpay']['instrument'] == 'Credit'){
          drupal_set_message(t("This message indicate your last payment may not success because you didn't submit credit card information. If you are sure you have completed the transaction, please contact us. Otherwise, you can retry again."), 'error');
        }
        else{
          drupal_set_message(t("You just submit a payment. You may want to check your email to follow payment instruction, or try submit this form again."), 'error');
        }
      }
      if(isset($_GET['id']) && $_GET['id']!== NULL){
        $parsed = parse_url($_SERVER['REQUEST_URI']);
        $_SESSION['allpay'] = array(
          'path' => $_GET['q'],
          'query' => $parsed['query'],
        );
      }
      break;
    case 'CRM_Contribute_Form_Contribution_ThankYou':
    case 'CRM_Event_Form_Registration_ThankYou':
      if(!preg_match("/ALLPAY/",$form->_paymentProcessor['payment_processor_type'])){
        return;
      }
      $status = $msg = NULL;
      $params = array();
      // Credit card have result immediately
      if(isset($form->_submitValues) && !empty($form->_submitValues['MerchantTradeNo'])){
        $params['trxn_id'] = $form->_submitValues['MerchantTradeNo'];
        if(!empty($form->_submitValues['RtnCode'])){
          if($form->_submitValues['RtnCode'] == 1){ // success
            // check contribution if have same result
            $contrib_params = array('trxn_id' => $params['trxn_id']);
            $contrib_values = $contrib_ids = array();
            CRM_Contribute_BAO_Contribution::getValues($contrib_params, $contrib_values, $contrib_ids);
            if(!empty($contrib_values['id']) && $contrib_values['contribution_status_id'] != 1 && strstr($form->_submitValues['PaymentType'], 'Credit')){
              // trigger ipn success
              module_load_include('inc', 'civicrm_allpay', 'civicrm_allpay.ipn');
              $ids = CRM_Contribute_BAO_Contribution::buildIds($contrib_values['id']);
              $query = CRM_Contribute_BAO_Contribution::makeNotifyUrl($ids, NULL, $return_query = TRUE);
              parse_str($query, $get);
              $post = $_POST;
              $result = civicrm_allpay_ipn('Credit', $post, $get, FALSE);
              if(strstr($result, 'OK')){
                $status = 1;
              }
              else{
                $status = 2;
              }
            }
            else{
              $status = 1;
            }
          }
          else {
            $msg = _civicrm_allpay_error_msg($form->_submitValues['RtnCode']);
            $status = 4;
          }
        }
        CRM_Contribute_BAO_Contribution_Utils::paymentResultType($form, $params, $status, $msg);
      }
      // non-direct payment
      else {
        $saved_params = $form->controller->get('params');
        if(!empty($saved_params['trxn_id'])){
          $params['trxn_id'] = $saved_params['trxn_id'];

          // build notify billing info
          module_load_include("inc", 'civicrm_allpay', 'civicrm_allpay.notify');
          $info = civicrm_allpay_notify_bytrxn($params['trxn_id']);
          if($form_name == 'CRM_Event_Form_Registration_ThankYou'){
            $civicrm_instrument_id = $saved_params[0]['civicrm_instrument_id'];
          }else{
            $civicrm_instrument_id = $saved_params['civicrm_instrument_id'];
          }
          $display = civicrm_allpay_notify_display($info, $civicrm_instrument_id);
          $form->assign('payment_instrument', $display); 

          // add result type
          CRM_Contribute_BAO_Contribution_Utils::paymentResultType($form, $params, $status, $msg);
        }
      }
      unset($_SESSION['allpay']);
      break;
  }
}

/**
 * Implementation of hook_civicrm_validate()
 */
function civicrm_allpay_civicrm_validate($form_name, &$form){
  $errors = array();
  if($form_name == 'CRM_Contribute_Form_Contribution_Main'){
    if(!empty($form['payment_processor'])){
      $params = array(
        1 => array($form['payment_processor'], 'Integer'),
      );
      $processor_type = CRM_Core_DAO::singleValueQuery("SELECT payment_processor_type FROM civicrm_payment_processor WHERE id = %1", $params);
      if($processor_type == 'ALLPAY'){
        if(!empty($form['installments']) && $form['installments'] > 99){
          $errors['installments'] = t('Installments of recurring must lower than 99.');
        }
        if(!empty($form['installments']) && $form['installments'] > 9 && !empty($form['frequency_unit']) && $form['frequency_unit'] == 'year'){
          $errors['installments'] = t('The years of recurring installments must lower than 9.');
        } 
      }
      /* Already done by CRM_Contribute_Form_Contribution_Main
      if($processor_type == 'ALLPAYX' && !empty($form['is_recur'])){
        // don't allow recurring on non-credit card method
        $session = CRM_Core_Session::singleton();
        $errors['is_recur'] = ts('You cannot set up a recurring contribution if you are not paying online by credit card.');
      }
      */
    }
  }
  return empty( $errors ) ? true : $errors;
}

/**
 * Implementation of hook_civicrm_prepareInvoice()
 */
function civicrm_allpay_civicrm_prepareInvoice($contribution_id, &$tplParams){
  $sql = "SELECT pp.payment_processor_type FROM civicrm_contribution c
    INNER JOIN civicrm_payment_processor pp ON c.payment_processor_id = pp.id
    WHERE c.id = $contribution_id";
  $payment_process_type = CRM_Core_DAO::singleValueQuery($sql);
  if(preg_match('/ALLPAY/', $payment_process_type)){
    module_load_include("inc", 'civicrm_allpay', 'civicrm_allpay.notify');
    $tplParams = civicrm_allpay_notify_generate($contribution_id, FALSE);
  }
}

function civicrm_allpay_error(){
  $msg = $_SESSION['allpay']['error'];
  if(!count($msg)){
    drupal_access_denied();
  }
  $output .= '<div class="allpay-error">';
  $output .= '<div class="allpay-error-first">'.array_shift($msg).'</div>';
  foreach($msg as $m){
    $items[] = $m;
  }
  $output .= theme('item_list', $items);
  $output .= '</div>';
  return $output;
}

/**
 * Implementation of hook_cron()
 */
function civicrm_allpay_cron(){
  // every morning, we check allpay payment result
  $last = variable_get('civicrm_allpay_recur_sync', 0);
  $now = time();
  if($now - $last > 60000 && date('G') > '6' && date('G') < '12'){
    civicrm_allpay_recur_sync();
    variable_set('civicrm_allpay_recur_sync', $now);
  }
  /* // TODO: confirm allpay has no problem at this
  $last_fee_sync = variable_get('civicrm_allpay_fee_sync', 0);
  if($now - $last > 60000 && date('G') > '3' && date('G') < '9'){
    civicrm_allpay_fee_sync();
    variable_set('civicrm_allpay_fee_sync', $now);
  }
  */
}

function _civicrm_allpay_instrument($type = 'normal'){
  $i = array(
    'Credit Card' => array('label' => '信用卡', 'desc' => '', 'code' => 'Credit'),
    'ATM' => array('label' => 'ATM 轉帳', 'desc' => '', 'code' => 'ATM'),
    'Web ATM' => array('label' => 'Web ATM', 'desc' => '', 'code' => 'WebATM'),
    'Convenient Store' => array('label' => '超商條碼繳費', 'desc'=>'', 'code' => 'BARCODE'),
    'Convenient Store (Code)' => array('label'=>'超商代碼','desc' => '', 'code' => 'CVS'),
    'Alipay' => array('label'=> '支付寶', 'desc' => '', 'code' => 'Alipay'),
    // 'Tenpay' => array('label'=> '財付通', 'desc' => '', 'code' => 'Tenpay'),
  );
  if($type == 'form_name'){
    foreach($i as $name => $data){
      $form_name = preg_replace('/[^0-9a-z]+/i', '_', strtolower($name));
      $instrument[$form_name] = $data;
    }
    return $instrument;
  }
  elseif($type == 'code'){
    foreach($i as $name =>  $data){
      $instrument[$name] = $data['code'];
    }
    return $instrument;
  }
  else{
    return $i;
  }
}

/**
 * Help function for generate post string
 */
function _civicrm_allpay_vars2str($post){
  $array = array();
  foreach($post as $name => $value){
    if($value){
      $array[] = $name."=".urlencode($value);
    }
  }
  return implode('&', $array);
}

function civicrm_allpay_record($cid, $data = null){
  if(is_numeric($cid)){
    $billing_notify = FALSE;
    if(empty($data) && !empty($_POST)){
      if(arg(1) == 'record'){
        $billing_notify = TRUE;
        $data['#info'] = $_POST;
      }
      else{
        $data = $_POST;
      }
    }
    if(!empty($data['MerchantID']) || !empty($data['#info']['MerchantID'])){
      $result = db_result(db_query("SELECT data FROM {civicrm_contribution_allpay} WHERE cid = %d", $cid));
      $exists = json_decode($result, TRUE);
      if(is_array($exists)){
        $data = array_merge($exists, $data);
      }
      $record = array(
        'cid' => $cid,
        'data' => json_encode($data),
      );
      // update
      if(db_result(db_query("SELECT cid FROM {civicrm_contribution_allpay} WHERE cid = %d", $cid))){
        drupal_write_record('civicrm_contribution_allpay', $record, 'cid');
      }
      else{
        drupal_write_record('civicrm_contribution_allpay', $record);
      }
      if($billing_notify){
        module_load_include("inc", 'civicrm_allpay', 'civicrm_allpay.notify');
        civicrm_allpay_notify_generate($cid, TRUE); // send mail

        // return allpay successful received notify
        echo "1|OK";
      }

      // Set expire time
      if(!empty($data['#info']['ExpireDate'])){
        $expire_date = $data['#info']['ExpireDate'];
      }
      if(!empty($data['ExpireDate'])){
        $expire_date = $data['ExpireDate'];
      }
      if(!empty($expire_date)){
        $sql = "UPDATE civicrm_contribution SET expire_date = %1 WHERE id = %2";
        $params = array(
          1 => array( $expire_date, 'String'),
          2 => array( $cid, 'Integer'),
        );
        CRM_Core_DAO::executeQuery($sql, $params);
      }
    }
  }
}

function civicrm_allpay_recur_sync($days = array()){
  civicrm_initialize();
  module_load_include("inc", 'civicrm_allpay', 'civicrm_allpay.ipn');
  if(empty($days)){
    $days = array(
      date('j'),
      date('j', strtotime('-1 day')),
    );
    if(date('n') == '2'){
      if(date('j') == '28'){
        $days[] = '29';
        $days[] = '30';
        $days[] = '31';
      }
      elseif(date('j') == '29'){
        $days[] = '30';
        $days[] = '31';
      }
    }
    elseif(date('j') == '30'){
      $days[] = '31';
    }
    elseif(date('j') == '1' && !array_search('31', $days)){
      $days[] = '31';
    }
  }

  $query = "SELECT (SELECT count(c.id) FROM civicrm_contribution c WHERE c.contribution_recur_id = r.id AND c.receive_date >= %2 AND c.receive_date <= %3 ) AS contribution_count, r.* FROM civicrm_contribution_recur r
  WHERE r.contribution_status_id = 5 AND r.frequency_unit = 'month' AND DAY(r.start_date) = %1
  ORDER BY r.create_date ASC";
  foreach($days as $d){
    watchdog('civicrm_allpay', 'Start to sync recurring for day '.$d);
    $query_params = array(
      1 => array($d, 'String'),
      2 => array(date('Y-m-').sprintf('%02s', $d).' 00:00:00', 'String'),
      3 => array(date('Y-m-').sprintf('%02s', $d).' 23:59:59', 'String'),
    );
    $result = CRM_Core_DAO::executeQuery($query, $query_params);
    while($result->fetch()){
      if(empty($result->contribution_count)){
        // check if is next day of expect recurring
        civicrm_allpay_recur_check($result->id);
        usleep(300000); // sleep 0.3 second
      }
    }
    $result->free();
    $result = NULL;
  }
}

function civicrm_allpay_recur_check($rid, $order = NULL){
  civicrm_initialize();
  $now = time();
  $query = "SELECT c.id as cid, c.contact_id, c.is_test, c.trxn_id, c.payment_processor_id as pid, c.contribution_status_id, r.id as rid, r.contribution_status_id as recurring_status FROM civicrm_contribution_recur r INNER JOIN civicrm_contribution c ON r.id = c.contribution_recur_id WHERE r.id = %1 ORDER BY c.id ASC";
  $result = CRM_Core_DAO::executeQuery($query, array(1 => array($rid, 'Integer')));

  // fetch first contribution
  $result->fetch();
  if(!empty($result->N)){
    $first_contrib_id = $result->cid;
    $is_test = $result->is_test;
    $payment_processor = CRM_Core_BAO_PaymentProcessor::getPayment($result->pid, $is_test ? 'test' : 'live');
    if($payment_processor['payment_processor_type'] != 'ALLPAY'){
      return;
    }

    if(!empty($payment_processor['url_recur']) && !empty($payment_processor['user_name'])){
      $processor = array(
        'password' => $payment_processor['password'],
        'signature' => $payment_processor['signature'],
      );
      $post_data = array(
        'MerchantID' => $payment_processor['user_name'],
        'MerchantTradeNo' => $result->trxn_id,
        'TimeStamp' => $now,
      );
      _civicrm_allpay_checkmacvalue($post_data, $processor);
      if(empty($order)){
        $order = _civicrm_allpay_postdata($payment_processor['url_recur'], $post_data);
      }
      if(!empty($order) && $order->MerchantTradeNo == $result->trxn_id && count($order->ExecLog > 1)){
        // update recur status
        $recur = $order->ExecStatus;
        if(isset($order->ExecStatus)){
          $update_status = NULL;
          $recur_param = $null = array();
          if($order->ExecStatus == 0 && $result->recurring_status != 3){
            // cancelled
            $update_status = 3;
            $recur_param = array(
              'id' => $rid,
              'modified_date' => date('YmdHis'),
              'cancel_date' => date('YmdHis'),
              'contribution_status_id' => 3, // cancelled
            );
            CRM_Contribute_BAO_ContributionRecur::add($recur_param, $null);
          }
          elseif($order->ExecStatus == 2 && $result->recurring_status != 1){
            // completed
            $recur_param = array(
              'id' => $rid,
              'modified_date' => date('YmdHis'),
              'end_date' => date('YmdHis'),
              'contribution_status_id' => 1, // completed
            );
            CRM_Contribute_BAO_ContributionRecur::add($recur_param, $null);
          }
          elseif($order->ExecStatus == 1){
            // current running, should be 5, do nothing
          }
        }

        $orders = array();
        foreach($order->ExecLog as $o){
          // skip first recorded contribution
          if($order->gwsr == $o->gwsr){
            continue;
          }
          $noid = _civicrm_allpay_noid_hash($o);
          if (!empty($noid)) {
            if($o->RtnCode == 1 && empty($o->gwsr)){
              continue; // skip, not normal
            }
            $trxn_id = _civicrm_allpay_recur_trxn($order->MerchantTradeNo, $noid);
            $orders[$trxn_id] = $o;
          }
        }
        // remove exists records
        while($result->fetch()){
          unset($orders[$result->trxn_id]);
        }
        // real record to add
        if(!empty($orders)){
          foreach($orders as $trxn_id => $o){
            $get = $post = $ids = array();
            list($main_trxn, $noid) = explode('-', $trxn_id);
            $ids = CRM_Contribute_BAO_Contribution::buildIds($first_contrib_id);
            $query = CRM_Contribute_BAO_Contribution::makeNotifyUrl($ids, NULL, $return_query = TRUE);
            parse_str($query, $get);
            $get['is_recur'] = 1;
            $post = array(
              'MerchantID' => $order->MerchantID,
              'MerchantTradeNo' => $order->MerchantTradeNo,
              'RtnCode' => $o->RtnCode,
              'RtnMsg' => !empty($o->RtnMsg) ? t($o->RtnMsg) : _civicrm_allpay_error_msg($o->RtnCode),
              'PeriodType' => $order->PeriodType,
              'Frequency' => $order->Frequency,
              'ExecTimes' => $order->ExecTimes,
              'Amount' => !empty($o->amount) ? $o->amount : $order->amount,
              'Gwsr' => $noid,
              'ProcessDate' => $o->process_date,
              'AuthCode' => !empty($o->auth_code) ? $o->auth_code : '',
              'FirstAuthAmount' => $order->PeriodAmount,
              'TotalSuccessTimes' => $order->TotalSuccessTimes,
              //'SimulatePaid' => $order->SimulatePaid,
            );

            // manually trigger ipn
            civicrm_allpay_ipn('Credit', $post, $get, FALSE);
          }
        }
      }
    }
  }
}

function civicrm_allpay_fee_sync(){
  civicrm_initialize();
  $limit = 100;
  $check_start_date = date('Y-m-d', strtotime('-60 days'));
  $check_end_date = date('Y-m-d', strtotime('-8 days'));
  $query = "SELECT id, created_date, receive_date, total_amount, fee_amount, net_amount, trxn_id, payment_processor_id as pid FROM civicrm_contribution WHERE is_test = 0 AND receive_date > %1 AND receive_date < %2 AND contribution_status_id = 1 AND payment_processor_id IS NOT NULL AND (fee_amount IS NULL OR fee_amount = 0) ORDER BY receive_date DESC LIMIT 0, $limit";
  $result = CRM_Core_DAO::executeQuery($query, array(
    1 => array($check_start_date, 'String'),
    2 => array($check_end_date, 'String'),
  ));

  while($result->fetch()){
    if(!isset($payment_processors[$result->pid])){
      $payment_processors[$result->pid] = CRM_Core_BAO_PaymentProcessor::getPayment($result->pid, 'live');
    }
    $payment_processor = $payment_processors[$result->pid];
    if($payment_processor['payment_processor_type'] != 'ALLPAY'){
      continue;
    }
    else{
      if(!empty($payment_processor['url_recur']) && !empty($payment_processor['user_name'])){
        $net_amount = $fee_amount = NULL;
        $processor = array(
          'password' => $payment_processor['password'],
          'signature' => $payment_processor['signature'],
        );
        $post_data = array(
          'MerchantID' => $payment_processor['user_name'],
          'MerchantTradeNo' => $result->trxn_id,
          'TimeStamp' => time(),
        );
        _civicrm_allpay_checkmacvalue($post_data, $processor);
        $response = _civicrm_allpay_postdata($payment_processor['url_api'], $post_data, FALSE);
        if(!empty($response) && $response->MerchantTradeNo == $result->trxn_id && !empty($response->HandlingCharge)){
          $fee_amount = (float)$response->HandlingCharge;
          $net_amount = $result->total_amount - $fee_amount;
          CRM_Core_DAO::executeQuery("UPDATE civicrm_contribution SET fee_amount = %1, net_amount = %2 WHERE id = %3", array(
            1 => array($fee_amount, 'Float'),
            2 => array($net_amount, 'Float'),
            3 => array($result->id, 'Integer'),
          ));
        }
        usleep(200000); // sleep 0.2 second
      }
    }
  }
}

function _civicrm_allpay_checkmacvalue(&$args, $payment_processor){
  // remove empty arg
  if(is_array($args)){
    foreach($args as $k => $v){
      if($k == 'CheckMacValue'){
        unset($args[$k]);
      }
    }
  }
  elseif(is_string($args)){
    $tmp = explode('&', $args);
    $args = array();
    foreach($tmp as $v){
      list($key, $value) = explode('=', $v);
      $args[$key] = $value;
    }
  }
  uksort($args, 'strnatcasecmp');
  $a = array(
    'HashKey='.$payment_processor['password'],
  );
  foreach($args as $k => $v){
    $a[] = $k.'='.$v;
  }
  $a[] = 'HashIV='.$payment_processor['signature'];
  $keystr = implode('&', $a);
  $keystr = urlencode($keystr);
  $keystr = strtolower($keystr);

  $special_char_allpay = array(
    '%2d' => '-',
    '%5f' => '_',
    '%2e' => '.',
    '%21' => '!',
    '%2a' => '*',
    '%28' => '(',
    '%29' => ')',
    '%20' => '+',
  );
  $keystr = str_replace(array_keys($special_char_allpay), $special_char_allpay, $keystr);

  $checkmacvalue = md5($keystr);
  $args['CheckMacValue'] = $checkmacvalue;
  return $checkmacvalue;
}

function _civicrm_allpay_trxn_id($is_test, $id){
  if($is_test){
    $id = 'test' . substr(str_replace(array('.','-'), '', $_SERVER['HTTP_HOST']), 0, 3) . $id. 'T'. mt_rand(100, 999);
  }
  return $id;
}
function _civicrm_allpay_recur_trxn($parent, $gwsr){
  if(empty($gwsr)){
    return $parent;
  }
  else{
    return $parent . '-' . $gwsr;
  }
}

function _civicrm_allpay_postdata($url, $post_data, $json = TRUE){
  $ch = curl_init($url);
  curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 1);
  curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
  curl_setopt($ch, CURLOPT_POST, 1);
  $field_string = http_build_query($post_data, '', '&');
  curl_setopt($ch, CURLOPT_POSTFIELDS, $field_string);
  curl_setopt($ch, CURLOPT_HEADER, 0);  // DO NOT RETURN HTTP HEADERS
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);  // RETURN THE CONTENTS OF THE CALL
  $receive = curl_exec($ch);
  if(curl_errno($ch)){
    watchdog('civicrm_allpay', 'Fetch recuring error: curl_errno: '.curl_errno($ch).' / '. curl_error($ch), 'error');
  }
  else{
    watchdog('civicrm_allpay', 'Request:'.$url."?".$field_string);

    if (strlen($receive) > 1000) {
      $logs = str_split($receive, 1000);
      foreach($logs as $l) {
        watchdog('civicrm_allpay', $l);
      }
    }
    else {
      watchdog('civicrm_allpay', $receive);
    }
  }
  curl_close($ch);
  if(!empty($receive)){
    if($json){
      return json_decode($receive);
    }
    else{
      $return = array();
      parse_str($receive, $return);
      return $return;
    }
  }
  else{
    return FALSE;
  }
}

function _civicrm_allpay_cancel_recuring_message(){
  $js = '<p>因綠界並未提供取消定期定額的介接，<br/>因此無法從 CRM 後台取消。<br/>請到<a target="_blank" href="https://vendor.ecpay.com.tw/">綠界的後台</a>進行取消之操作，確認取消後，系統會於下次該捐款的扣款日時，自動同步綠界上的定期定額訂單狀態，這段時間的資料以綠界後台的狀態為主</p><p style="font-size:0.5em;">更詳細的內容請參考我們的<a target="_blank" href="https://neticrm.tw/resources/2497">手冊說明</a>。</p><script>cj(".ui-dialog-buttonset button").hide();</script>';
  return $js;
}


function _civicrm_allpay_error_msg($code){
  $code = (string) $code;
  // success
  if($code == '1' || $code == '2'){
    return;
  }

  // error
  $msg = array(
    '10100001' => 'IP Access Denied.',
    '10100050' => 'Parameter Error.',
    '10100054' => 'Trading Number Repeated.',
    '10100055' => 'Create Trade Fail.',
    '10100058' => 'Pay Fail.',
    '10100059' => 'Trading Number cannot Be Found.',
    '10200001' => 'Can not use trade service.',
    '10200002' => 'Trade has been updated before.',
    '10200003' => 'Trade Status Error.',
    '10200005' => 'Price Format Error.',
    '10200007' => 'ItemURL Format Error.',
    '10200047' => 'Cant not find the trade data.',
    '10200050' => 'AllPayTradeID Error.',
    '10200051' => 'MerchantID Error.',
    '10200052' => 'MerchantTradeNo Error.',
    '10200073' => 'CheckMacValue Error',
    '10200124' => 'TopUpUsedESUN Trade Error',
    'uncertain' => 'Please login your payment processor system to check problem.',
    '0' => 'Please login your payment processor system to check problem.',
  );
  if(!empty($msg[$code])){
    return t($msg[$code]);
  }
  else{
    return t('Error when processing your payment.');
  }
}

function _civicrm_allpay_noid_hash($o){
  // check database for this
  $lookup = array(
    1 => array('%ProcessDate":"'.str_replace('/', '\\\\\\\\', $o->process_date).'"%', 'String'),
  );
  $cid = CRM_Core_DAO::singleValueQuery("SELECT cid FROM civicrm_contribution_allpay WHERE data LIKE %1", $lookup);
  if ($cid) {
    $trxn_id = CRM_Core_DAO::singleValueQuery("SELECT trxn_id FROM civicrm_contribution WHERE id = %1", array(1 => array($cid, 'Integer')));
    list($main_trxn, $noid) = explode('-', $trxn_id);
    if ($noid) {
      return $noid;
    }
    else {
      return;
    }
  }
  elseif (!empty($o->process_date)) {
    if (!empty($o->gwsr)) {
      return $o->gwsr;
    }
    else {
      return substr(md5(implode('', (array)$o)), 0, 8);
    }
  }
}
