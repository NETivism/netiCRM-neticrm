<?php
/**
 * Implementation of hook_init()
 */
function civicrm_allpay_init(){
  if(strstr($_GET['q'], 'allpay')){
    $GLOBALS['conf']['cache'] = FALSE;
  }
}

/**
 * Implementation of hook_menu()
 */
function civicrm_allpay_menu(){
  return array(
    'allpay/ipn/%' => array(
      'access callback' => true,
      'page callback' => 'civicrm_allpay_ipn',
      'page arguments' => array(2),
      'type' => MENU_CALLBACK,
      'weight' => 0,
      'file' => 'civicrm_allpay.ipn.inc',
    ),
    'allpay/popup/%' => array(
      'access callback' => true,
      'page callback' => 'civicrm_allpay_popup',
      'page arguments' => array(2),
      'type' => MENU_CALLBACK,
      'weight' => 0,
    ),
    'allpay/record/%' => array(
      'access callback' => true,
      'page callback' => 'civicrm_allpay_record',
      'page arguments' => array(2),
      'type' => MENU_CALLBACK,
      'weight' => 0,
    ),
  );
}

/**
 * Implementation of hook_civicrm_buildForm()
 */
function civicrm_allpay_civicrm_buildForm($form_name, &$form){
  switch($form_name){
    case 'CRM_Admin_Form_PaymentProcessor':
      $is_allpay = FALSE;
      if(strstr($_GET['pp'], 'ALLPAY')){
        $is_allpay = TRUE;
      }
      elseif(!empty($form->_ppType) && strstr($form->_ppType, 'ALLPAY')){
        $is_allpay = TRUE;
      }
      if($is_allpay){
        drupal_set_message("本網站的 IP 為「".gethostbyname($_SERVER['SERVER_NAME']).'」。<br />請登入歐付寶後台，廠商後台 > 系統開發管理 > 系統介接設定 > 允許的 IP中，填入本站IP。');
      }
      break;
    case 'CRM_Contribute_Form_Contribution_Main':
    case 'CRM_Event_Form_Registration_Register':
      $session = CRM_Core_Session::singleton();
      $submitted = $session->get('submitted');
      $session->set('submitted', FALSE);
      if($submitted){
        if($_SESSION['allpay']['instrument'] == 'Credit'){
          drupal_set_message(t("This message indicate your last payment may not success because you didn't submit credit card information. If you are sure you have completed the transaction, please contact us. Otherwise, you can retry again."), 'error');
        }
        else{
          drupal_set_message(t("You just submit a payment. You may want to check your email to follow payment instruction, or try submit this form again."), 'error');
        }
      }
      if(isset($_GET['id']) && $_GET['id']!== NULL){
        $parsed = parse_url($_SERVER['REQUEST_URI']);
        $_SESSION['allpay'] = array(
          'path' => $_GET['q'],
          'query' => $parsed['query'],
        );
      }
      break;
    case 'CRM_Contribute_Form_Contribution_ThankYou':
    case 'CRM_Event_Form_Registration_ThankYou':
      $status = $msg = NULL;
      $params = array();
      // Credit card have result immediately
      if(isset($form->_submitValues) && !empty($form->_submitValues['MerchantTradeNo'])){
        $params['trxn_id'] = $form->_submitValues['MerchantTradeNo'];
        if(!empty($form->_submitValues['RtnCode'])){
          if($form->_submitValues['RtnCode'] == 1){ // success
            // check contribution if have same result
            $contrib_params = array('trxn_id' => $params['trxn_id']);
            $contrib_values = $contrib_ids = array();
            CRM_Contribute_BAO_Contribution::getValues($contrib_params, $contrib_values, $contrib_ids);
            if(!empty($contrib_values['id']) && $contrib_values['contribution_status_id'] != 1 && strstr($form->_submitValues['PaymentType'], 'Credit')){
              // trigger ipn success
              module_load_include('inc', 'civicrm_allpay', 'civicrm_allpay.ipn');
              $ids = CRM_Contribute_BAO_Contribution::buildIds($contrib_values['id']);
              $query = CRM_Contribute_BAO_Contribution::makeNotifyUrl($ids, NULL, $return_query = TRUE);
              parse_str($query, $get);
              $post = $_POST;
              $result = civicrm_allpay_ipn('Credit', $post, $get, FALSE);
              if(strstr($result, 'OK')){
                $status = 1;
              }
              else{
                $status = 2;
              }
            }
            else{
              $status = 1;
            }
          }
          else {
            $msg = _civicrm_allpay_error_msg($form->_submitValues['RtnCode']);
            $status = 4;
          }
        }
        CRM_Contribute_BAO_Contribution_Utils::paymentResultType($form, $params, $status, $msg);
      }
      // non-direct payment
      else {
        $saved_params = $form->controller->get('params');
        if(!empty($saved_params['trxn_id'])){
          $params['trxn_id'] = $saved_params['trxn_id'];
          CRM_Contribute_BAO_Contribution_Utils::paymentResultType($form, $params, $status, $msg);
        }
      }
      unset($_SESSION['allpay']);
      break;
    case 'CRM_Contribute_Form_ContributionPage_Amount':
      $query = CRM_Core_DAO::executeQuery("SELECT id FROM civicrm_payment_processor WHERE payment_processor_type = 'ALLPAY'");
      $processor = array();
      while($query->fetch()){
        $processor[$query->id] = $query->id;
      }
      $str = '\['.implode('\]|\[', $processor).'\]';
      $js = '
    $(document).ready(function(){
      var show_hide_interval = function(show){
        if(show){
          $("#is_recur_interval").parents("tr:first").show();
        }
        else{
          $("#is_recur_interval").parents("tr:first").hide();
        }
      }
      $("tr.crm-contribution-contributionpage-amount-form-block-payment_processor input:checkbox").each(function(){
        if($(this).attr("name").match(/'.$str.'/) && $(this).attr("checked")){
          show_hide_interval(0);
        }
      });
      $("tr.crm-contribution-contributionpage-amount-form-block-payment_processor input:checkbox").click(function(){
        if($(this).attr("name").match(/'.$str.'/) && $(this).attr("checked")){
          show_hide_interval(0);
        }
        else
        if($(this).attr("name").match(/'.$str.'/) && !$(this).attr("checked")){
          show_hide_interval(1);
        }
      });
      $("#is_recur").click(function(){
        if($(this).val()){
          $("#is_recur_interval").attr( "checked", false );
        }
      });
    });  
    ';
      drupal_add_js($js, array('type' => 'inline', 'scope' => 'footer'));
      break;
  }
}

/**
 * Implementation of hook_civicrm_validate()
 */
function civicrm_allpay_civicrm_validate($form_name, &$form){
  $errors = array();
  if($form_name == 'CRM_Contribute_Form_Contribution_Main'){
    if(!empty($form['payment_processor'])){
      $params = array(
        1 => array($form['payment_processor'], 'Integer'),
      );
      $processor_type = CRM_Core_DAO::singleValueQuery("SELECT payment_processor_type FROM civicrm_payment_processor WHERE id = %1", $params);
      if($processor_type == 'ALLPAY'){
        if(!empty($form['installments']) && $form['installments'] > 99){
          $errors['installments'] = t('Installments of recurring must lower than 99.');
        } 
      }
      /* Already done by CRM_Contribute_Form_Contribution_Main
      if($processor_type == 'ALLPAYX' && !empty($form['is_recur'])){
        // don't allow recurring on non-credit card method
        $session = CRM_Core_Session::singleton();
        $errors['is_recur'] = ts('You cannot set up a recurring contribution if you are not paying online by credit card.');
      }
      */
    }
  }
  return empty( $errors ) ? true : $errors;
}

function civicrm_allpay_error(){
  $msg = $_SESSION['allpay']['error'];
  if(!count($msg)){
    drupal_access_denied();
  }
  $output .= '<div class="allpay-error">';
  $output .= '<div class="allpay-error-first">'.array_shift($msg).'</div>';
  foreach($msg as $m){
    $items[] = $m;
  }
  $output .= theme('item_list', array('items' => $items));
  $output .= '</div>';
  return $output;
}

/**
 * Implementation of hook_cron()
 */
function civicrm_allpay_cron(){
  // every morning, we check allpay payment result
  $last = variable_get('civicrm_allpay_recur_sync', 0);
  $now = time();
  if($now - $last > 86400 && date('G') > '6' && date('G') < '8'){
    civicrm_allpay_recur_sync();
    variable_set('civicrm_allpay_recur_sync', $now);
  }
}

function _civicrm_allpay_instrument($type = 'normal'){
  $i = array(
    'Credit Card' => array('label' => '信用卡', 'desc' => '', 'code' => 'Credit'),
    'ATM' => array('label' => 'ATM 轉帳', 'desc' => '', 'code' => 'ATM'),
    'Web ATM' => array('label' => 'Web ATM', 'desc' => '', 'code' => 'WebATM'),
    'Convenient Store' => array('label' => '超商條碼繳費', 'desc'=>'', 'code' => 'BARCODE'),
    'Convenient Store (Code)' => array('label'=>'超商代碼','desc' => '', 'code' => 'CVS'),
    'Alipay' => array('label'=> '支付寶', 'desc' => '', 'code' => 'Alipay'),
    // 'Tenpay' => array('label'=> '財付通', 'desc' => '', 'code' => 'Tenpay'),
  );
  if($type == 'form_name'){
    foreach($i as $name => $data){
      $form_name = preg_replace('/[^0-9a-z]+/i', '_', strtolower($name));
      $instrument[$form_name] = $data;
    }
    return $instrument;
  }
  elseif($type == 'code'){
    foreach($i as $name =>  $data){
      $instrument[$name] = $data['code'];
    }
    return $instrument;
  }
  else{
    return $i;
  }
}

/**
 * Help function for generate post string
 */
function _civicrm_allpay_vars2str($post){
  $array = array();
  foreach($post as $name => $value){
    if($value){
      $array[] = $name."=".urlencode($value);
    }
  }
  return implode('&', $array);
}


/**
 * Help funtion for printing payment info
 */
function _civicrm_allpay_payment_info($cid, $instrument){
  civicrm_initialize();
  $allpay = db_query("SELECT * FROM {civicrm_contribution_allpay} WHERE cid = :cid", array(':cid' => $cid))->fetchObject();
  $amount = CRM_Core_DAO::singleValueQuery("SELECT total_amount FROM civicrm_contribution WHERE id = {$cid}");
  $data = array();
  switch($instrument){
    case 'cvs':
    case 'ibon':
      $data[] = array('付款代碼', $allpay->payno);
      $data[] = array('付款金額', $amount);
      $data[] = array('付款期限', format_date($allpay->expire_datetime, 'short'));
      break;
    case 'vacc':
      $data[] = array('轉帳銀行代碼', '玉山銀行 ('.$allpay->bankcode.')');
      $data[] = array('轉帳銀行帳號', $allpay->vaccno);
      $data[] = array('付款金額', $amount);
      $data[] = array('付款期限', format_date($allpay->expire_datetime, 'custom', 'Y/m/d'));
      break;
  }
  return $data;
}

function civicrm_allpay_popup($instrument){
  $cid = $_GET['cid'];
  if(!$cid){
    drupal_goto();
  }
  else{
    $allpay = db_query("SELECT * FROM {civicrm_contribution_allpay} WHERE cid = :cid", array(':cid' => $cid))->fetchObject();
    civicrm_initialize();
    $params = array( 1 => array( $cid, 'Integer' ) );
    $amount = CRM_Core_DAO::singleValueQuery("SELECT total_amount FROM civicrm_contribution WHERE id = %1", $params);
    $output = '
<style>
  #content { text-align: center;}
  #content table {text-align: left; width: 300px; margin: 0 auto;}
  #sidebar {display:none;}
  #navigation, #branding, #admin-menu { display: none !important; }
</style>
    ';
    if($allpay){
      $rows = _civicrm_allpay_payment_info($cid, $instrument);
      $output .= '<h3>付款資訊</h3>';
      $output .= theme('table', array('header' => NULL, 'rows' => $rows, 'align' => 'center', 'width' =>' 300', 'id' => 'payment-info'));
      $output .= '<div class="function">';
      $output .= '<input type="button" onclick="print();" value="列印">';
      $output .= '</div>';
    }
    else{
      $output = 'database not found error';
    }
  }
  return $output;
}

function _civicrm_allpay_popupurl($instrument_code, $cid){
  return url('allpay/popup/'.$instrument_code, array('absolute' => TRUE, 'query' => array('cid'=> $cid )));
}
function _civicrm_allpay_barcode($mer, $tsr){
  return 'https://ecbank.com.tw/order/barcode_print.php?mer_id='.$mer.'&tsr='.$tsr;
}

function civicrm_allpay_record($cid, $data = null){
  if(is_numeric($cid)){
    if(empty($data) && !empty($_POST)){
      if(arg(1) == 'record'){
        $data['#info'] = $_POST;
      }
      else{
        $data = $_POST;
      }
    }
    if(!empty($data['MerchantID']) || !empty($data['#info']['MerchantID'])){
      $result = db_query("SELECT data FROM {civicrm_contribution_allpay} WHERE cid = :cid", array(':cid' => $cid))->fetchObject();
      $exists = json_decode($result, TRUE);
      if(is_array($exists)){
        $data = array_merge($exists, $data);
      }
      $record = array(
        'cid' => $cid,
        'data' => json_encode($data),
      );
      // update
      if(db_query("SELECT cid FROM {civicrm_contribution_allpay} WHERE cid = :cid", array(':cid' => $cid))->fetchObject()){
        drupal_write_record('civicrm_contribution_allpay', $record, 'cid');
      }
      else{
        drupal_write_record('civicrm_contribution_allpay', $record);
      }
    }
  }
}


function civicrm_allpay_recur_sync(){
  civicrm_initialize();
  module_load_include("inc", 'civicrm_allpay', 'civicrm_allpay.ipn');
  $query = "SELECT r.* FROM civicrm_contribution_recur r WHERE r.contribution_status_id = 5 AND r.end_date IS NULL AND r.frequency_unit = 'month' ORDER BY r.id DESC";
  $result = CRM_Core_DAO::executeQuery($query);
  while($result->fetch()){
    // check if yesterday is next day of expect recurring
    if(date('d', strtotime($result->start_date) + 86400) === date('d')){
      civicrm_allpay_recur_check($result->id);
    }
  }
}

function civicrm_allpay_recur_check($rid, $order = NULL){
  civicrm_initialize();
  $now = time();
  $query = "SELECT c.id as cid, c.contact_id, c.is_test, c.trxn_id, c.payment_processor_id as pid, c.contribution_status_id, r.id as rid, r.contribution_status_id as recurring_status FROM civicrm_contribution_recur r INNER JOIN civicrm_contribution c ON r.id = c.contribution_recur_id WHERE r.id = %1 ORDER BY c.id ASC";
  $result = CRM_Core_DAO::executeQuery($query, array(1 => array($rid, 'Integer')));

  // fetch first contribution
  $result->fetch();
  if(!empty($result->N)){
    $first_contrib_id = $result->cid;
    $is_test = $result->is_test;
    $payment_processor = CRM_Core_BAO_PaymentProcessor::getPayment($result->pid, $is_test ? 'test' : 'live');
    if($payment_processor['payment_processor_type'] != 'ALLPAY'){
      return;
    }

    if(!empty($payment_processor['url_recur']) && !empty($payment_processor['user_name'])){
      $processor = array(
        'password' => $payment_processor['password'],
        'signature' => $payment_processor['signature'],
      );
      $post_data = array(
        'MerchantID' => $payment_processor['user_name'],
        'MerchantTradeNo' => $result->trxn_id,
        'TimeStamp' => $now,
      );
      _civicrm_allpay_checkmacvalue($post_data, $processor);
      if(empty($order)){
        $order = _civicrm_allpay_postdata($payment_processor['url_recur'], $post_data);
      }
      if(!empty($order) && $order->MerchantTradeNo == $result->trxn_id && count($order->ExecLog > 1)){
        // update recur status
        $recur = $order->ExecStatus;
        if(isset($order->ExecStatus)){
          $update_status = NULL;
          if($order->ExecStatus == 0 && $result->recurring_status != 3){
            // cancelled
            $update_status = 3;
          }
          elseif($order->ExecStatus == 1){
            // current running, should be 5, do nothing
          }
          elseif($order->ExecStatus == 2 && $result->recurring_status != 1){
            // completed
            $update_status = 1;
          }
          if($update_status){
            $recur_param = array(
              1 => array($update_status, 'Integer'),
              2 => array($rid, 'Integer')
            );
            CRM_Core_DAO::executeQuery("UPDATE civicrm_contribution_recur SET contribution_status_id = %1 WHERE id = %2", $recur_param);
          }
        }

        $orders = array();
        foreach($order->ExecLog as $o){
          // skip first recorded contribution
          if($order->gwsr == $o->gwsr){
            continue;
          }
          $trxn_id = _civicrm_allpay_recur_trxn($order->MerchantTradeNo, $o->gwsr);
          $orders[$trxn_id] = $o;
        }
        // remove exists records
        while($result->fetch()){
          unset($orders[$result->trxn_id]);
        }
        // real record to add
        if(!empty($orders)){
          foreach($orders as $o){
            $get = $post = $ids = array();
            $ids = CRM_Contribute_BAO_Contribution::buildIds($first_contrib_id);
            $query = CRM_Contribute_BAO_Contribution::makeNotifyUrl($ids, NULL, $return_query = TRUE);
            parse_str($query, $get);
            $get['is_recur'] = 1;
            $post = array(
              'MerchantID' => $order->MerchantID,
              'MerchantTradeNo' => $order->MerchantTradeNo,
              'RtnCode' => $order->RtnCode,
              'RtnMsg' => '',
              'PeriodType' => $order->PeriodType,
              'Frequency' => $order->Frequency,
              'ExecTimes' => $order->ExecTimes,
              'Amount' => $o->amount,
              'Gwsr' => $o->gwsr,
              'ProcessDate' => $o->process_date,
              'AuthCode' => $o->auth_code,
              'FirstAuthAmount' => $o->PeriodAmount,
              'TotalSuccessTimes' => $order->TotalSuccessTimes,
              //'SimulatePaid' => $order->SimulatePaid,
            );

            // manually trigger ipn
            civicrm_allpay_ipn('Credit', $post, $get, FALSE);
          }
        }
      }
    }
  }
}


function _civicrm_allpay_checkmacvalue(&$args, $payment_processor){
  // remove empty arg
  if(is_array($args)){
    foreach($args as $k => $v){
      if($k == 'CheckMacValue'){
        unset($args[$k]);
      }
    }
  }
  elseif(is_string($args)){
    $tmp = explode('&', $args);
    $args = array();
    foreach($tmp as $v){
      list($key, $value) = explode('=', $v);
      $args[$key] = $value;
    }
  }
  uksort($args, 'strnatcasecmp');
  $a = array(
    'HashKey='.$payment_processor['password'],
  );
  foreach($args as $k => $v){
    $a[] = $k.'='.$v;
  }
  $a[] = 'HashIV='.$payment_processor['signature'];
  $keystr = implode('&', $a);
  $keystr = urlencode($keystr);
  $keystr = strtolower($keystr);

  $checkmacvalue = md5($keystr);
  $args['CheckMacValue'] = $checkmacvalue;
  return $checkmacvalue;
}

function _civicrm_allpay_recur_trxn($parent, $gwsr){
  if(empty($gwsr)){
    return $parent;
  }
  else{
    return $parent . '-' . $gwsr;
  }
}

function _civicrm_allpay_postdata($url, $post_data){
  $ch = curl_init($url);
  curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 1);
  curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
  curl_setopt($ch, CURLOPT_POST, 1);
  $field_string = http_build_query($post_data, '', '&');
  curl_setopt($ch, CURLOPT_POSTFIELDS, $field_string);
  curl_setopt($ch, CURLOPT_HEADER, 0);  // DO NOT RETURN HTTP HEADERS
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);  // RETURN THE CONTENTS OF THE CALL
  $receive = curl_exec($ch);
  if(curl_errno($ch)){
    watchdog('civicrm_allpay', 'Fetch recuring error: curl_errno: '.curl_errno($ch).' / '. curl_error($ch));
  }
  curl_close($ch);
  return !empty($receive) ? json_decode($receive) : FALSE;
}

function _civicrm_allpay_cancel_recuring_message(){
  $js = '<p>因歐付寶並未提供取消定期定額的介接，<br/>因此無法從 CRM 後台取消。<br/>請到<a target="_blank" href="https://vendor.allpay.com.tw/">歐付寶的後台</a>進行取消之操作，確認取消後，系統會自動同步歐付寶上的定期定額訂單狀態。</p><p>更新後兩天再至本頁確認狀態，<br/>狀態顯示為「已取消」便表示取消成功。</p><p style="font-size:0.5em;">更詳細的內容請參考我們的<a target="_blank" href="https://neticrm.tw/faq/268">手冊說明</a>。</p><script>$(".ui-dialog-buttonset button").hide();</script>';
  return $js;
}

function _civicrm_allpay_error_msg($code){
  $msg = array(
    '10100001' => 'IP Access Denied.',
    '10100050' => 'Parameter Error.',
    '10100054' => 'Trading Number Repeated.',
    '10100055' => 'Create Trade Fail.',
    '10100058' => 'Pay Fail.',
    '10100059' => 'Trading Number cannot Be Found.',
    '10200001' => 'Can not use trade service.',
    '10200002' => 'Trade has been updated before.',
    '10200003' => 'Trade Status Error.',
    '10200005' => 'Price Format Error.',
    '10200007' => 'ItemURL Format Error.',
    '10200047' => 'Cant not find the trade data.',
    '10200050' => 'AllPayTradeID Error.',
    '10200051' => 'MerchantID Error.',
    '10200052' => 'MerchantTradeNo Error.',
    '10200073' => 'CheckMacValue Error',
    '10200124' => 'TopUpUsedESUN Trade Error',
  );
  if(!empty($msg[$code])){
    return t($msg[$code]);
  }
  else{
    return t('Error when processing your payment.');
  }
}
