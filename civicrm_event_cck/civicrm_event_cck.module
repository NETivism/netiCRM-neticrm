<?php

function civicrm_event_cck_menu(){
  $items['admin/settings/civicrm_event_cck'] = array(
    'title' => 'CiviCRM Event Sync',
    'description' => 'Auto create CiviCRM event when updating specific content type.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('civicrm_event_cck_admin_settings'),
    'access callback' => 'user_access',
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['node/%node/civiec_participants'] = array(
    'title' => 'Participants',
    'page callback' => 'civicrm_event_cck_goto',
    'page arguments' => array(1, 'node'),
    'access callback' => 'civicrm_event_cck_access_check',
    'access arguments' => array('edit event participants', 1),
    'type' => MENU_LOCAL_TASK,
    'weight' => 90,
  );
  $items['node/%node/civiec_admin_event'] = array(
    'title' => 'Event Configure',
    'page callback' => 'civicrm_event_cck_goto',
    'page arguments' => array(1, 'node'),
    'access callback' => 'civicrm_event_cck_access_check',
    'access arguments' => array('edit all events', 1),
    'type' => MENU_LOCAL_TASK,
    'weight' => 90,
  );
  return $items;
}

function civicrm_event_cck_access_check($perm, $node){
  $event_id = civicrm_event_cck_check($node);
  switch($perm){ 
    case 'edit event participants':
      if(variable_get('civiec_enable_admin_participants', 0)){
        if(user_access($perm) && $event_id){
          return TRUE;
        }
      }
      break;
    case 'edit all events':
      if(variable_get('civiec_enable_admin_event', 0)){
        if(user_access($perm) && $event_id){
          return TRUE;
        }
      }
      break;
  }
  return FALSE;
}

function civicrm_event_cck_goto($node){
  $event_id = civicrm_event_cck_check($node);
  if($event_id){
    switch(arg(2)){
      case 'civiec_participants':
        drupal_goto('civicrm/event/search', "reset=1&force=1&event=$event_id");
        break;
      case 'civiec_admin_event':
        if($_GET['tab'] && in_array($_GET['tab'], array('eventInfo', 'location', 'fee', 'registration', 'friend'))){
          $tab = $_GET['tab'];
          drupal_goto('civicrm/event/manage/'.$tab, "reset=1&action=update&id=$event_id");
        }
        else{
          drupal_goto('civicrm/event/manage/registration', "reset=1&action=update&id=$event_id");
        }
        break;
    }
  }
}

function civicrm_event_cck_admin_settings(){
  $types = node_get_types('names');
  $form['civiec_enable_register_button'] = array(
    '#type' => 'checkbox',
    '#title' => 'Enable Registion link',
    '#default_value' => variable_get('civiec_enable_register_button', 0),
  );
  $form['civiec_enable_admin_participants'] = array(
    '#type' => 'checkbox',
    '#title' => 'Enable Participants Admin Link',
    '#default_value' => variable_get('civiec_enable_admin_participants', 0),
  );
  $form['civiec_enable_admin_event'] = array(
    '#type' => 'checkbox',
    '#title' => 'Enable CiviCRM Event Admin Link',
    '#default_value' => variable_get('civiec_enable_admin_event', 0),
  );
  $form['civiec_enabled_type'] = array(
    '#type' => 'checkboxes',
    '#title' => 'Content type to enable for sync',
    '#default_value' => variable_get('civiec_enabled_type', array()),
    '#options' => $types,
    '#required' => TRUE,
  );
  
  civicrm_initialize();
  require_once("api/v2/UFGroup.php");
  $option_profile[0] = ts('- select -');
  $option_profile += civicrm_uf_profile_groups_get();
  $form['civiec_custom_pre'] = array(
    '#type' => 'select',
    '#title' => 'Default profile form for attend event',
    '#default_value' => variable_get('civiec_custom_pre', 0),
    '#options' => $option_profile,
  );
  $form['civiec_custom_post'] = array(
    '#type' => 'select',
    '#title' => 'Default post profile form for attending event',
    '#default_value' => variable_get('civiec_custom_post', 0),
    '#options' => $option_profile,
  );

  $form['civiec_fields'] = array(
    '#type' => 'fieldset',
    '#title' => 'CiviEvent / CCK field mapping',
  );
  $fields = content_fields();
  foreach($fields as $name => $f){
    if($f['type'] != 'filefield' && $f['type'] != 'content_taxonomy')
      $option_fields[$name] = $f['type'].":".$f['widget']['label']." ($name)";
  }
  $civiec_fields = civicrm_event_cck_fields();
  foreach($civiec_fields as $f => $name){
    $form['civiec_fields']['civiec_'.$f] = array(
      '#type' => 'select',
      '#title' => $name,
      '#default_value' => variable_get('civiec_'.$f, ''),
      '#options' => $option_fields,
      '#required' => TRUE,
    );
  }

  return system_settings_form($form);
}

function civicrm_event_cck_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL){
  static $event_id;
  if(!$event_id){
    $event_id = civicrm_event_cck_check($node);
  }
  if($event_id){
    if($op == 'view' && $a4){
      drupal_add_css(drupal_get_path('module', 'civicrm_event_cck')."/civicrm_event_cck.css");
      civicrm_event_cck_view($node, $event_id);
    }
    if($op == 'delete' || $op == 'presave'){
      civicrm_event_cck_save($node, $op);
    }
  }

  if($op == 'presave' && $event_id === 0){
    civicrm_event_cck_save($node, $op);
  }
}

function civicrm_event_cck_view(&$node, $event_id){
  civicrm_initialize();
  $button['register'] = array(
    'title' => ts("Event Online Registration"),
    'href' => "civicrm/event/register",
    'query' => "reset=1&id=$event_id",
    'attributes' => array('class' => 'orange bigrounded'),
  );

  $show_field = variable_get("civiec_is_online_registration", 0);
  if(variable_get('civiec_enable_register_button', 0)){
    if($node->$show_field){
      $node->content['civicrm_event_cck_bottom'] = array(
        //'#value' => ,
        '#value' => civicrm_event_cck_button($button, $node, 'button'),
        '#weight' => 100,
      );
    }
  }

  // add javascript for admin links
  if(variable_get('civiec_enable_admin_participants', 0)){
    drupal_add_js('$(document).ready(function(){ $("a[href*=civiec_participants]").attr("target","_blank"); });','inline', 'footer');
  }
  if(variable_get('civiec_enable_admin_event', 0)){
  }
}
function civicrm_event_cck_button($button, $node, $type){
  return '<div class="civiec-'.$type.'">'.theme('links', $button, array('class' => "links links-$type")).'</div>';
}

function civicrm_event_cck_save(&$node, $op){
  civicrm_initialize();
  $event_fields = civicrm_event_cck_fields();
  require_once "api/v2/Event.php";
  require_once "api/v2/UFJoin.php";
  $params = array();
  foreach($event_fields as $f => $name){
    $fieldname = variable_get("civiec_".$f, '');
    if($fieldname){
      $field = $node->$fieldname;
      if($f == 'id'){
        $event_id = $field[0]['value'];
        $event_id_field = $fieldname;
      }
      if($f == 'date'){
        $params['start_date'] = date('YmdHis',strtotime($field[0]['value']) + $field[0]['offset']);
        $params['end_date'] = date('YmdHis',strtotime($field[0]['value2']) + $field[0]['offset2']);
      }
      elseif($f == 'registration_date'){
        if(!strstr($field[0]['value'], ':')){
          $field[0]['value'] .= ' 00:00:00';
          $field[0]['value2'] .= ' 23:59:59';
        }
        $params['registration_start_date'] = date('YmdHis',strtotime($field[0]['value']) + $field[0]['offset']);
        $params['registration_end_date'] = date('YmdHis',strtotime($field[0]['value2']) + $field[0]['offset2']);
      }
      else{
        $params[$f] = $field[0]['value'];
      }

      if($f == 'max_participants'){
        $max_participants_field = $fieldname;
      }
    }
  }
  $params['title'] = $node->title;
  $params['summary'] = '';
  $params['description'] = $node->body;
  $params['is_active'] = $op == 'delete' ? 0 : 1;
  $params['is_monetory'] = 0;
  $params['is_show_location'] = 0;

  // call event api here. http://wiki.civicrm.org/confluence/display/CRMDOC33/Event+APIs
  $result = civicrm_event_create($params);
  if(!$event_id){
    $event_id = $result['event_id'];
  }

  // we need to save the event_id back to node. 
  $node->{$event_id_field}[0]['value'] = $event_id;


  // process uf_join to add custom profiel form to civicrm
  $custom_pre = variable_get('civiec_custom_pre', 0);
  $custom_post = variable_get('civiec_custom_post', 0);
  if($custom_pre){
    civicrm_event_cck_uf_join($event_id, $custom_pre, 'pre');
  }
  if($custom_post){
    civicrm_event_cck_uf_join($event_id, $custom_post, 'post');
  }

  // now, start add new ubercart stock
  if(module_exists('uc_stock') && $node->model){
    $field = $node->$max_participants_field;
    $max_participants = $field[0]['value'];
    $sku = $node->model;
    $exists = db_result(db_query("SELECT nid FROM {uc_product_stock} WHERE sku = '%s'", $sku));
    if(!$exists && $max_participants && is_numeric($max_participants)){
      $stock = array(
        'sku' => $node->model,
        'nid' => $node->nid,
        'active' => 1,
        'stock' => $max_participants,
      );
      drupal_write_record('uc_product_stock', $stock);
    }
  }
}

function civicrm_event_cck_uf_join($event_id, $uf_group_id, $type){
  $entity_table = 'civicrm_event';

  $weight = $type == 'pre' ? 1 : 2;
  $params =  array( 
    'module'       => 'CiviEvent',
    'entity_table' => $entity_table,
    'entity_id'    => $event_id,
    'weight'       => $weight,
    'uf_group_id'  => $uf_group_id,
    'is_active'    => 1,
  );

  $search = array('entity_table' => $entity_table, 'entity_id' => $event_id, 'module'=> 'CiviEvent', 'weight' => $weight);
  $id = civicrm_uf_join_id_find($search);
  if($id){
    $params['id'] = $id;
  }
  civicrm_uf_join_edit($params);

  $params2 = $params;
  $params2['module'] = 'CiviEvent_Additional';
  unset($params2['id']);
  $search = array('entity_table' => $entity_table, 'entity_id' => $event_id, 'module'=> 'CiviEvent_Additional');
  $id2 = civicrm_uf_join_id_find($search);
  if($id2){
    $params2['id'] = $id2;
  }
  civicrm_uf_join_edit($params2);
}

function civicrm_event_cck_form_alter(&$form, $form_state, $form_id){
  if (isset($form['type']) && isset($form['#node']) && $form['type']['#value'] . '_node_form' == $form_id){
    $available_types = variable_get('civiec_enabled_type', array());
    if(in_array($form['#node']->type, $available_types) && variable_get('civiec_id', '')) {
      $event_id_field = variable_get('civiec_id', ''); 
      // add drop down select list of "event type" and "attender type"
      civicrm_initialize();
      /*
      // get default value 
      if($event_id = $form['#node']->{$event_id_field}[0]['value']){
        $event_type_id = CRM_Core_DAO::getFieldValue('CRM_Event_DAO_Event', $event_id, 'event_type_id');
        $default_role_id = CRM_Core_DAO::getFieldValue('CRM_Event_DAO_Event', $event_id, 'default_role_id');
      }
      */
      require_once 'CRM/Core/OptionGroup.php';

      // from http://drupal.org/node/339730#comment-2871966
      // need to make sure the weight of this module will after the content.module
      // Add "- Select One -" to the allowed values for this field.
      // (This is necessary to avoid the "An illegal choice has been detected. Please contact the site administrator." error.

      $civiec_fields = civicrm_event_cck_fields();
      foreach($civiec_fields as $k => $name){
        if($field = variable_get('civiec_'.$k, '')){
          // now start to get default option / value from civicrm
          $options = array();
          switch($k) {
            case 'default_role_id':
              $options = CRM_Core_OptionGroup::values('participant_role');
              break;
            case 'event_type_id':
              $options = CRM_Core_OptionGroup::values('event_type'); 
              break;
            case 'id':
              // doing form alter job 
              $form['#after_build'][] = 'civicrm_event_cck_hide_field';
              break;
          }
          if(!empty($options)){
            foreach($options as $k => $v){
              $option_str .= $k.'|'.$v."\n";
            }
            $form['#field_info'][$field]['allowed_values'] = $option_str;
          }
        }
      }

    }
  }
}

function civicrm_event_cck_hide_field(&$form, &$form_state){
  $event_id_field = variable_get('civiec_id', ''); 
  if($parent = $form['#field_info'][$event_id_field]['display_settings']['parent']){
    $form[$parent][$event_id_field]['#prefix'] = '<div style="display:none">';
    $form[$parent][$event_id_field]['#suffix'] = '</div>';
  }
  else{
    $form[$event_id_field]['#prefix'] = '<div style="display:none">';
    $form[$event_id_field]['#suffix'] = '</div>';
  }
  return $form;
}

function civicrm_event_cck_fields(){
  return array(
    'id' => 'Event ID',
    'is_online_registration' => 'Is online registration',
    'default_role_id' => 'Default participant role',
    'event_type_id' => 'Event type',
    //'participant_listing_id' => 'Participant listing',
    'max_participants' => 'Max participants',
    'date' => 'Start / End date of event',
    'registration_date' => 'Start / End date of registration',
  );
}

function civicrm_event_cck_check(&$node, $fieldname = 'id'){
  $available_types = variable_get('civiec_enabled_type', array());
  $fieldname = variable_get('civiec_'.$fieldname, '');
  if(in_array($node->type, $available_types) && $fieldname) {
    if(isset($node->$fieldname)){
      $field = $node->$fieldname;
      $value = $field[0]['value'];
      return $value ? $value : 0;
    }
  }
  return FALSE;
}

function civicrm_event_cck_timezone($a, $b){

}
