<?php
function civicrm_dmenu_init(){
  global $menu_links;
  $installed = variable_get('civicrm_dmenu_installed', 0);
  if(!$installed){
    // loading defined menu structure.
    module_load_include('inc', 'civicrm_dmenu', 'update_2');
    foreach($menu_links as $menu_name => $m){
      civicrm_dmenu_menu_items($menu_name, $m, 0);
    }
    variable_set('civicrm_dmenu_installed', 1);
    cache_clear_all();
  }
  if(module_exists('neticrm_preset')){
    $js = '
    cj( document ).ready( function( ) {
      cj("body").css("padding-top", "0");
      if(cj("#civicrm-menu").length){
        cj("#civicrm-menu").hide();
      }
    });
    ';
    drupal_add_js($js, array('type' => 'inline', 'scope' => 'footer',));
  }
}

function civicrm_dmenu_menu_items($menu_name, $items, $plid = 0) {
  global $menu_links;
  $menu_title = $menu_links[$menu_name]['#title'] ? $menu_links[$menu_name]['#title'] : $menu_name;
  $menu_desc = $menu_links[$menu_name]['#description'] ? $menu_links[$menu_name]['#description'] : '';
  civicrm_dmenu_create_menu($menu_title, $menu_name, $menu_desc);
  foreach ($items as $k => $item) {
    if(!is_numeric($k)){
      continue;
    }
    
    // Format the data to send.
    $path = ($item['path']) ? $item['path'] : FALSE;
    $title = ($item['title']) ? $item['title'] : FALSE;
    $desc  = ($item['description']) ? $item['description'] : '';
    $menu  = ($item['menu']) ? $item['menu'] : 'navigation';
    $plid  = ($plid) ? $plid : 0;
    $weight = ($item['weight']) ? $item['weight'] : 0;
    $module = ($item['module']) ? $item['module'] : 'menu';
    $children = (isset($item['children'])) ? $item['children'] : FALSE;
    $has_children = $children ? 1 : 0;
    $query = ($item['query']) ? $item['query'] : NULL;
    $hidden = $item['hidden'];
    $expanded = $item['expanded'] ? $item['expanded'] : 0;

    // Create the menu link.
    $mlid = civicrm_dmenu_menu_item($path, $title, $desc, $menu, $plid, $weight, $module, $query, $hidden, $has_children, $expanded);

    // If there are children do them too.
    if ($children) {
      civicrm_dmenu_menu_items($menu_name, $children, $mlid);
    }
  }
}

function civicrm_dmenu_menu_item($path, $title, $description = '', $menu = 'navigation', $plid = 0, $weight = 0, $module = 'civicrm', $query = NULL, $hidden = 0, $has_children = 0, $expanded = 0, $customized = 0, $updated = 0) {
  $option_arr = array();
  $sql = "SELECT * FROM {menu_links} WHERE menu_name = ':menu' AND link_path = ':path'";

  // If a description is present.
  if (!empty($description)) {
    $option_arr['attributes'] = array('title' => $description);
  }
  if($query){
    $option_arr['query'] = $query;
    $sql .= " AND options LIKE '%%$query%%'";
  }

  $exists = db_query($sql, array(
    ':menu' => $menu, 
    ':path' => $path
    ));
  if(empty($exists)){
    $link = array(
      'menu_name'     => $menu,
      'weight'        => $weight,
      'link_title'    => $title,
      'options'       => $option_arr,
      'module'        => $module,
      'link_path'     => $path,
      'hidden'        => $hidden,
      'has_children'  => $has_children,
      'expanded'      => $expanded,
      'customized'    => $customized,
      'updated'       => $updated,
      'plid'          => $plid ? $plid : 0,
    );
  }
  else{
    $exists = get_object_vars($exists);
    $exists['options'] = unserialize($exists['options']);
    if(is_array($option_arr)){
      $exists['options'] = array_merge($exists['options'], $option_arr);
    }
    $exists['hidden'] = ($exists['hidden'] == -1) ? -1 :$hidden;
    $exists['title'] = $title;
    $exists['weight'] = $weight;
    $exists['customized'] = 1;
    $link = $exists;
  }

  $return = menu_link_save($link);

  if(!$return){
    return 0;
  }
  return $return;
}

function civicrm_dmenu_create_menu($title, $menu_name = '', $desc = '') {
  $return = FALSE;

  if (module_exists('menu')) {
    $title            = $title;
    $description      = $desc;
    $mn               = (empty($menu_name)) ? $title : $menu_name;
    $menu_name        = str_replace(array(' ', '_'), '-', strtolower($mn));
    $menu_name_custom = 'menu-' . $menu_name;

    // Check the db for an existing menu by the same name.
    $menu = db_query("SELECT menu_name FROM {menu_custom} WHERE menu_name = :menu_name OR menu_name = :name_custom",
      array(
       ':menu_name' => $menu_name, 
       ':name_custom' => $menu_name_custom,
      ))->fetchObject();

    // If a menu does not exists then we create it.
    // Appending 'menu-' to the beginning is standard for the menu module
    // so we do the same thing.
    if (!$menu) {
      $menu = $menu_name_custom;
      
      // Set up data for menu_link table.
      $path = 'admin/build/menu-customize/';
      $link = array(
        'link_title'  => $title,
        'link_path'   => $path . $menu,
        'router_path' => $path . '%',
        'module'      => 'menu',
        'plid'        => db_query("SELECT mlid FROM {menu_links} WHERE link_path = ':path' AND module = ':module'", 
            array( 
              ':path' => 'admin/build/menu', 
              ':module' => 'system'
            ))->fetchObject(),
      );
      // Save link to menu_link table.
      menu_link_save($link);
      
      // Save menu to menu_custom table.
      db_query("INSERT INTO {menu_custom} (menu_name, title, description) VALUES ('$menu_name_custom', '$title', '$description')")->execute();
    }
    
    $return = $menu;
  } else {
    drupal_set_message('Custom menu was not created. Please be sure that the menu module is a dependancy.');
  }

  return $return;
}

