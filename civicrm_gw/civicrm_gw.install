<?php
// $Id: devel.install,v 1.24.2.7 2009/07/30 19:38:48 weitzman Exp $
/**
 * @file
 *   Install file for civicrm_gw module.
 */

/**
 * Implementation of hook_schema()
 */
function civicrm_gw_schema(){
  $schema['civicrm_contribution_gw'] = array(
    'fields' => array(
      'cid' => array(
        'description' => 'Contribution id for civicrm',
        'type' => 'int',
        'length' => '11',
        'not null' => TRUE,
      ),
      'succ' => array(
        'description' => 'Success response from ecpay server',
        'type' => 'int',
        'length' => '1',
        'size' => 'tiny',
        'not null' => FALSE,
      ),
      'response_code' => array(
        'description' => 'Error code / detail code from ecpay',
        'type' => 'varchar',
        'length' => '6',
        'not null' => FALSE,
      ),
      'response_msg' => array(
        'description' => 'Error message from ecpay.',
        'type' => 'varchar',
        'length' => '255',
        'not null' => FALSE,
      ),
      'auth_code' => array(
        'description' => 'Authenticated code from credit card center.',
        'type' => 'varchar',
        'length' => '8',
        'not null' => FALSE,
      ),
      'error' => array(
        'description' => 'Error number for response of non-credit card',
        'type' => 'int',
        'length' => '5',
        'not null' => FALSE,
      ),
      'bankcode' => array(
        'description' => '',
        'type' => 'varchar',
        'length' => '3',
        'not null' => FALSE,
      ),
      'vaccno' => array(
        'description' => 'Pay code for vacc.',
        'type' => 'varchar',
        'length' => '50',
        'not null' => FALSE,
      ),
      'payno' => array(
        'description' => 'Pay number of convenient store code method(ibon)',
        'type' => 'varchar',
        'length' => '14',
        'not null' => FALSE,
      ),
      'expire_datetime' => array(
        'description' => 'Expire datetime unix timestamp for fetching result.',
        'type' => 'int',
        'length' => '11',
        'not null' => FALSE,
      ),
      'payfrom' => array(
        'description' => 'Pay from of convenient store code method.',
        'type' => 'varchar',
        'length' => '20',
        'not null' => FALSE,
      ),
      'payer_bank' => array(
        'description' => '',
        'type' => 'varchar',
        'length' => '3',
        'not null' => FALSE,
      ),
      'payer_acc' => array(
        'description' => 'Bank last 5 code from payer',
        'type' => 'varchar',
        'length' => '5',
        'not null' => FALSE,
      ),
      'paid_date' => array(
        'description' => 'Only for return of the barcode.',
        'type' => 'varchar',
        'length' => '8',
        'not null' => FALSE,
      ),
      'proc_datetime' => array(
        'description' => 'Process date time timestamp.',
        'type' => 'int',
        'length' => '11',
        'not null' => FALSE,
      ),
      'data' => array(
        'description' => 'Serialized data of response.',
        'type' => 'blob',
        'not null' => FALSE,
      ),
      'created' => array(
        'description' => 'Submit time for user confirmed transaction.',
        'type' => 'int',
        'length' => '11',
        'not null' => FALSE,
      ),
      'card4no' => array(
        'description' => 'Last 4 number for credit card',
        'type' => 'varchar',
        'length' => '4',
        'not null' => FALSE,
      ),
      'tsr' => array(
        'description' => 'Unique serial from gw generated.',
        'type' => 'varchar',
        'length' => '64',
        'not null' => FALSE,
      ),
    ),
    'primary key' => array('cid'),
    'mysql_suffix' => 'ENGINE = InnoDB  DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci',
  );
  return $schema;
}
 
/**
 * Implementation of hook_install()
 */
function civicrm_gw_install() {
  drupal_install_schema('civicrm_gw');
  civicrm_initialize( );
  require_once "CRM/Core/DAO.php";
  require_once('CRM/Core/OptionValue.php');
  require_once('CRM/Core/Action.php');

  // new payment processor
  $sql = "INSERT INTO civicrm_payment_processor_type (name, title, description, is_active, is_default, user_name_label, password_label, signature_label, subject_label, class_name, url_site_default, url_api_default, url_recur_default, url_button_default, url_site_test_default, url_api_test_default, url_recur_test_default, url_button_test_default, billing_mode, is_recur, payment_type) VALUES ('GW', '綠界', NULL, 1, 0, '商店代號（ECPay）', '商家檢查碼（ECPay）', '商店代號（ECBank）', '加密私鑰（ECBank）', 'Payment_GW', 'https://ecpay.com.tw/form_Sc_to5.php', 'https://ecbank.com.tw/gateway.php', NULL, NULL, 'https://ecpay.com.tw/form_Sc_to5.php', 'https://ecbank.com.tw/gateway.php', NULL, NULL, 4, 0, 1)";

  CRM_Core_DAO::executeQuery($sql);
  $ppt_id = CRM_Core_DAO::singleValueQuery("SELECT id FROM civicrm_payment_processor_type WHERE name LIKE 'GW'");

  // new payment instrument
  include_once "civicrm_gw.module";
  $new_instrument = _civicrm_gw_instrument();
  $gid = CRM_Core_DAO::singleValueQuery("SELECT id FROM civicrm_option_group WHERE name LIKE 'payment_instrument'");
  $next = CRM_Core_DAO::singleValueQuery("SELECT value FROM civicrm_option_value WHERE option_group_id = {$gid} ORDER BY value DESC");
  
  $group_params = array('name' => 'payment_instrument');
  foreach($new_instrument as $k => $v){
    $params = array(
      'name' => $k,
      'label' => $v['label'],
      'is_active' => 1,
      'is_reserved' => 1,
    );
    $dao = CRM_Core_DAO::executeQuery("SELECT id, value FROM civicrm_option_value WHERE option_group_id = {$gid} AND name = '$k'");
    $dao->fetch();
    if($dao->id){
      $params['value'] = $dao->value;
      $action = CRM_Core_Action::UPDATE;
      $option_value_id = $dao->id;
    }
    else{
      $action = CRM_Core_Action::ADD;
      $option_value_id = 0;
    }
    CRM_Core_OptionValue::addOptionValue($params, $group_params, $action, $option_value_id);
  }
}

/**
 * Implementation of hook_uninstall().
 */
function civicrm_gw_uninstall() {
  civicrm_initialize();
  require_once "CRM/Core/DAO.php";
  CRM_Core_DAO::executeQuery("DELETE FROM civicrm_payment_processor_type WHERE name LIKE 'GW'");
  CRM_Core_DAO::executeQuery("DELETE FROM civicrm_payment_processor WHERE payment_processor_type LIKE 'GW'");
  CRM_Core_DAO::executeQuery("OPTIMIZE TABLE civicrm_payment_processor_type");

  // we won't delete instrument for preserve contribution record
  // delete schema from drupal
  drupal_uninstall_schema('civicrm_gw');

}

/**
 * Implementation of hook_enable().
 */
function civicrm_gw_enable() {
  civicrm_initialize();
  require_once "CRM/Core/DAO.php";
  CRM_Core_DAO::executeQuery("UPDATE civicrm_payment_processor_type SET is_active = 1 WHERE name LIKE 'GW'");
  CRM_Core_DAO::executeQuery("UPDATE civicrm_payment_processor SET is_active = 1 WHERE payment_processor_type LIKE 'GW'");
}

/**
 * Implementation of hook_disable().
 */
function civicrm_gw_disable() {
  civicrm_initialize();
  require_once "CRM/Core/DAO.php";
  CRM_Core_DAO::executeQuery("UPDATE civicrm_payment_processor_type SET is_active = 0 WHERE name LIKE 'GW'");
  CRM_Core_DAO::executeQuery("UPDATE civicrm_payment_processor SET is_active = 0 WHERE payment_processor_type LIKE 'GW'");
}


function civicrm_gw_update_6101(){
  include_once "civicrm_gw.module";

  civicrm_initialize( );
  $new_instrument = _civicrm_gw_instrument();
  $gid = CRM_Core_DAO::singleValueQuery("SELECT id FROM civicrm_option_group WHERE name LIKE 'payment_instrument'");

  foreach($new_instrument as $k => $v){
    $ids[] = CRM_Core_DAO::singleValueQuery("SELECT id FROM civicrm_option_value WHERE option_group_id = {$gid} AND name = '$k'");
  }
  if(count($ids)){
    CRM_Core_DAO::singleValueQuery("Update civicrm_option_value SET is_reserved = 1 WHERE id IN(".implode(',', $ids).") AND is_reserved = 0");
  }
  return array();
}

function civicrm_gw_update_6102(){
  $ret = array();
  
  db_add_field($ret, 'civicrm_contribution_gw', 'created', array(
    'description' => 'Submit time for user confirmed transaction.',
    'type' => 'int',
    'length' => '11',
    'not null' => FALSE,
  ));
  return $ret;
}

function civicrm_gw_update_6103(){
  include_once "civicrm_gw.module";
  $ret = array();
  
  civicrm_initialize( );
  $new_instrument = _civicrm_gw_instrument();
  $gid = CRM_Core_DAO::singleValueQuery("SELECT id FROM civicrm_option_group WHERE name LIKE 'payment_instrument'");

  foreach($new_instrument as $k => $v){
    $ids[] = CRM_Core_DAO::singleValueQuery("SELECT id FROM civicrm_option_value WHERE option_group_id = {$gid} AND name = '$k'");
  }
  if(count($ids)){
    foreach($ids as $i => $id){
      if(empty($id)){
        unset($ids[$i]);
      }
    }
    CRM_Core_DAO::singleValueQuery("Update civicrm_option_value SET is_reserved = 1 WHERE id IN(".implode(',', $ids).") AND is_reserved = 0");
  }
  db_add_field($ret, 'civicrm_contribution_gw', 'card4no', array(
    'description' => 'Last 4 number for credit card',
    'type' => 'varchar',
    'length' => '4',
    'not null' => FALSE,
  ));
  return $ret;
}

function civicrm_gw_update_6104(){
  db_add_field($ret, 'civicrm_contribution_gw', 'tsr', array(
    'description' => 'Unique serial from gw generated.',
    'type' => 'varchar',
    'length' => '64',
    'not null' => FALSE,
  ));
  return $ret;
}
