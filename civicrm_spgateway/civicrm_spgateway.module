<?php
/**
 * Implementation of hook_init()
 */
function civicrm_spgateway_init(){
  if(strstr($_GET['q'], 'spgateway')){
    $GLOBALS['conf']['cache'] = FALSE;
  }
}

/**
 * Implementation of hook_menu()
 */
function civicrm_spgateway_menu(){
  return array(
    'spgateway/ipn/%' => array(
      'access callback' => true,
      'page callback' => 'civicrm_spgateway_ipn',
      'page arguments' => array(2),
      'type' => MENU_CALLBACK,
      'weight' => 0,
      'file' => 'civicrm_spgateway.ipn.inc',
    ),
  );
}

/**
 * Implementation of hook_civicrm_buildForm()
 */
function civicrm_spgateway_civicrm_buildForm($form_name, &$form){
  switch($form_name){
    case 'CRM_Contribute_Form_Contribution_Main':
    case 'CRM_Event_Form_Registration_Register':
      $session = CRM_Core_Session::singleton();
      $submitted = $session->get('submitted');
      $session->set('submitted', FALSE);
      if($submitted){
        if($_SESSION['spgateway']['instrument'] == 'Credit'){
          drupal_set_message(t("This message indicate your last payment may not success because you didn't submit credit card information. If you are sure you have completed the transaction, please contact us. Otherwise, you can retry again."), 'error');
        }
        else{
          drupal_set_message(t("You just submit a payment. You may want to check your email to follow payment instruction, or try submit this form again."), 'error');
        }
      }
      if(isset($_GET['id']) && $_GET['id']!== NULL){
        $parsed = parse_url($_SERVER['REQUEST_URI']);
        $_SESSION['spgateway'] = array(
          'path' => $_GET['q'],
          'query' => $parsed['query'],
        );
      }
      break;
    case 'CRM_Contribute_Form_Contribution_ThankYou':
    case 'CRM_Event_Form_Registration_ThankYou':
      if(!preg_match("/SPGATEWAY/",$form->_paymentProcessor['payment_processor_type'])){
        return;
      }
      $status = $msg = NULL;
      $params = array();
      $return_params = _civicrm_spgateway_post_decode($form->_submitValues['JSONData']);
      if(!empty($form->_submitValues['Period']) && empty($return_params)){
        $return_params = _civicrm_spgateway_post_decode(_civicrm_spgateway_recur_decrypt($form->_submitValues['Period'], $form->_paymentProcessor));
      }
      // Credit card have result immediately
      if(isset($form->_submitValues) && !empty($return_params['RespondCode'])){
        $params['trxn_id'] = $return_params['MerchantOrderNo'];
        if(!empty($return_params['RespondCode'])){
          if($return_params['RespondCode'] == '00'){ // success
            // check contribution if have same result
            $contrib_params = array('trxn_id' => $params['trxn_id']);
            $contrib_values = $contrib_ids = array();
            $contribution = CRM_Contribute_BAO_Contribution::getValues($contrib_params, $contrib_values, $contrib_ids);
            if(!empty($return_params['PeriodAmt'])){
              // first contribution of recurring, update trxn_id.
              $contribution->trxn_id = $params['trxn_id'] . "_1";
              $contribution->created_date = date('YmdHis', strtotime($contribution->created_date));
              $contribution->receive_date = date('YmdHis', strtotime($contribution->receive_date));
              $contribution->receipt_date = date('YmdHis', strtotime($contribution->receipt_date));
              $contribution->save();
            }
            if(!empty($contrib_values['id']) && $contrib_values['contribution_status_id'] != 1 && strstr($return_params['PaymentType'], 'Credit')){
              // trigger ipn success
              module_load_include('inc', 'civicrm_spgateway', 'civicrm_spgateway.ipn');
              $ids = CRM_Contribute_BAO_Contribution::buildIds($contrib_values['id']);
              $query = CRM_Contribute_BAO_Contribution::makeNotifyUrl($ids, NULL, $return_query = TRUE);
              parse_str($query, $get);
              $post = $_POST;
              $result = civicrm_spgateway_ipn('Credit', $post, $get, FALSE);
              if(strstr($result, 'OK')){
                $status = 1;
              }
              else{
                $status = 2;
              }
            }
            else{
              $status = 1;
            }
          }
          else {
            $msg = _civicrm_spgateway_error_msg($return_params['RtnCode']);
            $status = 4;
          }
        }
        CRM_Contribute_BAO_Contribution_Utils::paymentResultType($form, $params, $status, $msg);
      }
      // non-direct payment
      else {
        $saved_params = $form->controller->get('params');
        if(!empty($_POST)){
          $contrib_params = array('trxn_id' => $saved_params['trxn_id']);
          $contrib_values = $contrib_ids = array();
          CRM_Contribute_BAO_Contribution::getValues($contrib_params, $contrib_values, $contrib_ids);
          civicrm_spgateway_record($contrib_values['id'], $_POST);
        }

        if(!empty($saved_params['trxn_id'])){
          $params['trxn_id'] = $saved_params['trxn_id'];

          // build notify billing info
          module_load_include("inc", 'civicrm_spgateway', 'civicrm_spgateway.notify');
          $info = civicrm_spgateway_notify_bytrxn($params['trxn_id']);
          if($form_name == 'CRM_Event_Form_Registration_ThankYou'){
            $civicrm_instrument_id = $saved_params[0]['civicrm_instrument_id'];
          }else{
            $civicrm_instrument_id = $saved_params['civicrm_instrument_id'];
          }
          $display = civicrm_spgateway_notify_display($info, $civicrm_instrument_id);
          if(!empty($contrib_values['id'])){
            civicrm_spgateway_notify_generate($contrib_values['id'], TRUE); // send mail
          }
          $form->assign('payment_instrument', $display); 

          // add result type
          CRM_Contribute_BAO_Contribution_Utils::paymentResultType($form, $params, $status, $msg);
        }
      }
      unset($_SESSION['spgateway']);
      break;
  }
}

/**
 * Implementation of hook_civicrm_validate()
 */
function civicrm_spgateway_civicrm_validate($form_name, &$form){
  $errors = array();
  if($form_name == 'CRM_Contribute_Form_Contribution_Main'){
    if(!empty($form['payment_processor'])){
      $params = array(
        1 => array($form['payment_processor'], 'Integer'),
      );
      $processor_type = CRM_Core_DAO::singleValueQuery("SELECT payment_processor_type FROM civicrm_payment_processor WHERE id = %1", $params);
      if($processor_type == 'SPGATEWAY'){
        if(!empty($form['installments']) && $form['installments'] > 99){
          $errors['installments'] = t('Installments of recurring must lower than 99.');
        }
        if(!empty($form['installments']) && $form['installments'] > 9 && !empty($form['frequency_unit']) && $form['frequency_unit'] == 'year'){
          $errors['installments'] = t('The years of recurring installments must lower than 9.');
        } 
      }
    }
  }
  return empty( $errors ) ? true : $errors;
}

/**
 * Implementation of hook_civicrm_prepareInvoice()
 */
function civicrm_spgateway_civicrm_prepareInvoice($contribution_id, &$tplParams){
  $sql = "SELECT pp.payment_processor_type FROM civicrm_contribution c
    INNER JOIN civicrm_payment_processor pp ON c.payment_processor_id = pp.id
    WHERE c.id = $contribution_id";
  $payment_process_type = CRM_Core_DAO::singleValueQuery($sql);
  if(preg_match('/SPGATEWAY/', $payment_process_type)){
    module_load_include("inc", 'civicrm_spgateway', 'civicrm_spgateway.notify');
    $tplParams = civicrm_spgateway_notify_generate($contribution_id, FALSE);
  }
}

function civicrm_spgateway_error(){
  $msg = $_SESSION['spgateway']['error'];
  if(!count($msg)){
    drupal_access_denied();
  }
  $output .= '<div class="spgateway-error">';
  $output .= '<div class="spgateway-error-first">'.array_shift($msg).'</div>';
  foreach($msg as $m){
    $items[] = $m;
  }
  $output .= theme('item_list', $items);
  $output .= '</div>';
  return $output;
}

function _civicrm_spgateway_instrument($type = 'normal'){
  $i = array(
    'Credit Card' => array('label' => '信用卡', 'desc' => '', 'code' => 'Credit'),
    'ATM' => array('label' => 'ATM 轉帳', 'desc' => '', 'code' => 'ATM'),
    'Web ATM' => array('label' => 'Web ATM', 'desc' => '', 'code' => 'WebATM'),
    'Convenient Store' => array('label' => '超商條碼繳費', 'desc'=>'', 'code' => 'BARCODE'),
    'Convenient Store (Code)' => array('label'=>'超商代碼','desc' => '', 'code' => 'CVS'),
  );
  if($type == 'form_name'){
    foreach($i as $name => $data){
      $form_name = preg_replace('/[^0-9a-z]+/i', '_', strtolower($name));
      $instrument[$form_name] = $data;
    }
    return $instrument;
  }
  elseif($type == 'code'){
    foreach($i as $name =>  $data){
      $instrument[$name] = $data['code'];
    }
    return $instrument;
  }
  else{
    return $i;
  }
}

/**
 * Help function for generate post string
 */
function _civicrm_spgateway_vars2str($post){
  $array = array();
  foreach($post as $name => $value){
    if($value){
      $array[] = $name."=".urlencode($value);
    }
  }
  return implode('&', $array);
}

function civicrm_spgateway_record($cid, $data = null){
  if(is_numeric($cid)){
    if(empty($data) && !empty($_POST)){
      $data = $_POST;
    }

    if(!empty($data['JSONData'])){
      $data = $data['JSONData'];
    }
    // $json = $data['JSONData'];
    $exists = db_result(db_query("SELECT data FROM {civicrm_contribution_spgateway} WHERE cid = %d", $cid));
    if(!empty($exists->data)){
      if($exists->data == $data){
        watchdog('civicrm_spgateway', "Data is exists which cid = $cid, but data = $exists .");
      }else{
        watchdog('civicrm_spgateway', "Data is exists which cid = $cid, and data is the same.");
      }
    }
    $record = array(
      'cid' => $cid,
      'data' => json_encode($data),
    );
    // update
    if(db_result(db_query("SELECT cid FROM {civicrm_contribution_spgateway} WHERE cid = %d", $cid))){
      drupal_write_record('civicrm_contribution_spgateway', $record, 'cid');
    }
    else{
      drupal_write_record('civicrm_contribution_spgateway', $record);
    }
  }
}


function _civicrm_spgateway_post_decode($post = null){
  // Make $post be the object.
  $data = empty($post) ? $_POST : $post;
  if(!empty($data['JSONData'])){
    $data = $data['JSONData'];
  }

  while(is_string($data)){
    $data = json_decode($data);
  }
  $jsonData = $data;

  if(isset($jsonData->Result)){
    if(is_string($jsonData->Result)){
      $return = json_decode($jsonData->Result,true);
    }else{
      $return = (array) $jsonData->Result;
    }
    $return['Status'] = $jsonData->Status;
    $return['Message'] = $jsonData->Message;
  }
  return $return;
}

function _civicrm_spgateway_checkmacvalue(&$args, $payment_processor){
  $used_args = array('HashKey','Amt','MerchantID','MerchantOrderNo','TimeStamp','Version','HashIV');
  return _civicrm_spgateway_encode($args, $payment_processor, $used_args);
}

function _civicrm_spgateway_checkcode(&$args, $payment_processor){
  $used_args = array('HashIV','Amt','MerchantID','MerchantOrderNo','TradeNo','HashKey');
  return _civicrm_spgateway_encode($args, $payment_processor, $used_args);
}

function _civicrm_spgateway_recur_encrypt($str, $payment_processor){
  $key = $payment_processor['password'];
  $iv = $payment_processor['signature'];
  _civicrm_spgateway_checkKeyIV($key);
  _civicrm_spgateway_checkKeyIV($iv);
  $str = trim(bin2hex(mcrypt_encrypt(MCRYPT_RIJNDAEL_128, $key, _civicrm_spgateway_addpadding($str), MCRYPT_MODE_CBC, $iv)));
  return $str;
}

function _civicrm_spgateway_recur_decrypt($str, $payment_processor){
  $key = $payment_processor['password'];
  $iv = $payment_processor['signature'];
  _civicrm_spgateway_checkKeyIV($key);
  _civicrm_spgateway_checkKeyIV($iv);
  $str = _civicrm_spgateway_strippadding(mcrypt_decrypt(MCRYPT_RIJNDAEL_128, $key, hex2bin($str), MCRYPT_MODE_CBC, $iv));
  return $str;
}

function _civicrm_spgateway_addpadding($string, $blocksize = 32) {
  $len = strlen($string);
  $pad = $blocksize - ($len % $blocksize);
  $string .= str_repeat(chr($pad), $pad);
  return $string;
}

function _civicrm_spgateway_strippadding($string) {
    $slast = ord(substr($string, -1));
    $slastc = chr($slast);
    if (preg_match("/$slastc{" . $slast . "}/", $string)) {
        $string = substr($string, 0, strlen($string) - $slast);
        return $string;
    } else {
        return false;
    }
}

function _civicrm_spgateway_encode(&$args, $payment_processor, $checkArgs = array()){
  // remove empty arg
  if(is_array($args)){
    foreach($args as $k => $v){
      if($k == 'CheckValue'){
        unset($args[$k]);
      }
    }
  }
  elseif(is_string($args)){
    $tmp = explode('&', $args);
    $args = array();
    foreach($tmp as $v){
      list($key, $value) = explode('=', $v);
      $args[$key] = $value;
    }
  }
  if(count($checkArgs) == 0){
    $checkArgs = array('HashKey','Amt','MerchantID','MerchantOrderNo','TimeStamp','Version','HashIV');
  }
  foreach($checkArgs as $k){
    switch ($k) {
      case 'HashIV':
        $v = $payment_processor['signature'];
        _civicrm_spgateway_checkKeyIV($v);
        break;
      case 'HashKey':
        $v = $payment_processor['password'];
        _civicrm_spgateway_checkKeyIV($v);
        break;
      default:
        $v = $args[$k];
        break;
    }
    $a[] = $k.'='.$v;
  }
  $keystr = implode('&', $a);

  $checkvalue = strtoupper(hash("sha256", $keystr));
  $args['CheckValue'] = $checkvalue;
  return $checkvalue;
}

function _civicrm_spgateway_trxn_id($is_test, $id){
  if($is_test){
    $id = 'test' . substr(str_replace(array('.','-'), '', $_SERVER['HTTP_HOST']), 0, 3) . $id. 'T'. mt_rand(100, 999);
  }
  return $id;
}
function _civicrm_spgateway_recur_trxn($parent, $gwsr){
  if(empty($gwsr)){
    return $parent;
  }
  else{
    return $parent . '-' . $gwsr;
  }
}

function _civicrm_spgateway_checkKeyIV($v){
  if(empty($v)){
    CRM_Core_Error::fatal(ts('KEY and IV should have value.'));
  }
}

function _civicrm_spgateway_postdata($url, $post_data, $json = TRUE){
  $ch = curl_init($url);
  curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 1);
  curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
  curl_setopt($ch, CURLOPT_POST, 1);
  $field_string = http_build_query($post_data, '', '&');
  curl_setopt($ch, CURLOPT_POSTFIELDS, $field_string);
  curl_setopt($ch, CURLOPT_HEADER, 0);  // DO NOT RETURN HTTP HEADERS
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);  // RETURN THE CONTENTS OF THE CALL
  $receive = curl_exec($ch);
  if(curl_errno($ch)){
    watchdog('civicrm_spgateway', 'Fetch recuring error: curl_errno: '.curl_errno($ch).' / '. curl_error($ch), 'error');
  }
  else{
    watchdog('civicrm_spgateway', 'Request:'.$url."?".$field_string);
    watchdog('civicrm_spgateway', 'Response:'.$receive);
  }
  curl_close($ch);
  if(!empty($receive)){
    if($json){
      return json_decode($receive);
    }
    else{
      $return = array();
      parse_str($receive, $return);
      return $return;
    }
  }
  else{
    return FALSE;
  }
}

function _civicrm_spgateway_cancel_recuring_message(){
  $js = '<p>因智付通並未提供取消定期定額的介接，<br/>因此無法從 CRM 後台取消。<br/>請到<a target="_blank" href="https://www.spgateway.com/main/login_center/single_login/">智付通的後台</a>進行取消之操作，確認取消後，系統會於下次該捐款的扣款日時，自動同步智付通上的定期定額訂單狀態，這段時間的資料以智付通後台的狀態為主</p><p style="font-size:0.5em;">更詳細的內容請參考我們的<a target="_blank" href="https://neticrm.tw/resources/2497">手冊說明</a>。</p><script>cj(".ui-dialog-buttonset button").hide();</script>';
  return $js;
}


function _civicrm_spgateway_error_msg($code){
  $code = (string) $code;
  // success
  if($code == '1' || $code == '2'){
    return;
  }

  // error
  $msg = array(
    'PER10001' => '商店資料取得失敗',
    'PER10002' => '資料解密錯誤',
    'PER10003' => 'POST 資料傳遞錯誤',
    'PER10004' => '資料不齊全',
    'PER10005' => '資料不可空白',
    'PER10006' => '商品名稱不得含有 JavaScript 語法、CSS 語法',
    'PER10007' => '委託金額格式不對,金額必須為數字',
    'PER10008' => '委託金額不能為零',
    'PER10009' => '週期設定錯誤! (W=週,M=月,Y=年)',
    'PER10010' => '商店訂單編號錯誤,只允許英數與底線',
    'PER10011' => '商店訂單編號長度限制為 20 字',
    'PER10012' => '回傳格式格式錯誤,只接受 JSON 或 String',
    'PER10013' => '週期授權時間資料不正確,日期格式為 1 到 7',
    'PER10014' => '週期授權時間資料不正確,日期格式為 1 到 7(長度不符)',
    'PER10015' => '定期授權時間資料不正確,日期格式為 01 到 31',
    'PER10016' => '定期授權時間資料不正確,日期格式為 01 到 31(長度不符)',
    'PER10017' => '定期授權時間資料不正確,日期格式為 01 到 31',
    'PER10018' => '定期授權時間資料不正確,日期格式為 01 到 31',
    'PER10019' => '定期授權時間資料不正確,長度不符',
    'PER10020' => '首期授權模式設定錯誤(1-3),請檢查',
    'PER10021' => '備註說明不得含有 JavaScript 語法、CSS 語法',
    'PER10022' => '授權期數格式不對,必須為數字',
    'PER10023' => '授權期數不能為零',
    'PER10024' => '授權期數不能多於 999 次',
    'PER10025' => '返回商店網址格式錯誤',
    'PER10026' => '每期授權通知網址格式錯誤',
    'PER10027' => '是否開啟付款人資訊設定錯誤',
    'PER10028' => '付款人電子信箱格式錯誤',
    'PER10029' => '商店代號停用',
    'PER10030' => '商店信用卡資格停用',
    'PER10031' => '商店定期定額資格停用',
    'PER10032' => '該訂單編號已重覆',
    'PER10033' => '寫入委託單失敗',
    'PER10034' => '授權失敗,委託單建立失敗',
    'PER10035' => '委託單更新授權結果失敗',
    'PER10036' => '驗證資料錯誤(來源不合法)',
    'PER10037' => '付款頁參數不足',
    'uncertain' => 'Go check in spgateway.com.tw',
  );
  if(!empty($msg[$code])){
    // return t($msg[$code]);
    return $msg[$code];
  }
  else{
    return t('Error when processing your payment.');
  }
}
