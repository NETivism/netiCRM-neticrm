<?php

/**
 * Implementation of hook_init()
 */
function civicrm_spgateway_init(){
  if(strstr($_GET['q'], 'spgateway')){
    $GLOBALS['conf']['cache'] = FALSE;
  }
}

/**
 * Implementation of hook_civicrm_buildForm()
 */
function civicrm_spgateway_civicrm_buildForm($form_name, &$form){
  switch($form_name){
    case 'CRM_Contribute_Form_Contribution_ThankYou':
    case 'CRM_Event_Form_Registration_ThankYou':
      if(!preg_match("/SPGATEWAY/",$form->_paymentProcessor['payment_processor_type'])){
        return;
      }
      $msg = NULL;
      $status = 2; // Pending
      $params = $return_params = array();
      if (!empty($form->_submitValues['JSONData'])) {
        $return_params = CRM_Core_Payment_SPGATEWAYAPI::dataDecode($form->_submitValues['JSONData']);
      }
      if(!empty($form->_submitValues['Period']) && empty($return_params)){
        $return_params_decrypt = CRM_Core_Payment_SPGATEWAYAPI::recurDecrypt($form->_submitValues['Period'], $form->_paymentProcessor);
        $return_params = CRM_Core_Payment_SPGATEWAYAPI::dataDecode($return_params_decrypt);
      }
      CRM_Core_Error::debug_var('Neweb Notify Post Params', $return_params);
      // Credit card have result immediately
      if(isset($form->_submitValues) && ($return_params['PaymentType'] == 'CREDIT' || !empty($return_params['PeriodAmt']))) {
        $params['trxn_id'] = $return_params['MerchantOrderNo'];
        if(array_key_exists('RespondCode', $return_params)){
          if($return_params['RespondCode'] == '00'){ // success
            $status = 1;
          }
          else {
            // Prepare error message.
            if (!empty($return_params['Message'])) {
              $msg = $return_params['Status'].': '.$return_params['Message'];
            }
            else {
              $msg = $return_params['Status'].': '._civicrm_spgateway_error_msg($return_params['Status']);
            }
            $status = 4;
          }
        }
        CRM_Contribute_BAO_Contribution_Utils::paymentResultType($form, $params, $status, $msg);
      }
      // non-direct payment
      else {
        $saved_params = $form->controller->get('params');
        if(!empty($_POST)){
          $contrib_params = array('trxn_id' => $saved_params['trxn_id']);
          $contrib_values = $contrib_ids = array();
          CRM_Contribute_BAO_Contribution::getValues($contrib_params, $contrib_values, $contrib_ids);
          CRM_Core_Payment_SPGATEWAYAPI::writeRecord($contrib_values['id'], $_POST);
        }

        if(!empty($saved_params['trxn_id'])){
          $params['trxn_id'] = $saved_params['trxn_id'];

          // build notify billing info
          module_load_include("inc", 'civicrm_spgateway', 'civicrm_spgateway.notify');
          $info = civicrm_spgateway_notify_bytrxn($params['trxn_id']);
          if($form_name == 'CRM_Event_Form_Registration_ThankYou'){
            $civicrm_instrument_id = $saved_params[0]['civicrm_instrument_id'];
          }else{
            $civicrm_instrument_id = $saved_params['civicrm_instrument_id'];
          }
          $display = civicrm_spgateway_notify_display($info, $civicrm_instrument_id);
          $isSend = $form->get('invoice_sended', FALSE);
          if(!empty($contrib_values['id']) && !$isSend){
            civicrm_spgateway_notify_generate($contrib_values['id'], TRUE); // send mail
            $form->set('invoice_sended', TRUE);
          }
          $form->assign('payment_instrument', $display); 

          // add result type
          CRM_Contribute_BAO_Contribution_Utils::paymentResultType($form, $params, $status, $msg);
        }
      }
      break;
  }
}

/**
 * Implementation of hook_civicrm_validate()
 */
function civicrm_spgateway_civicrm_validate($form_name, &$form){
  $errors = array();
  if($form_name == 'CRM_Contribute_Form_Contribution_Main'){
    if(!empty($form['payment_processor'])){
      $params = array(
        1 => array($form['payment_processor'], 'Integer'),
      );
      $processor_type = CRM_Core_DAO::singleValueQuery("SELECT payment_processor_type FROM civicrm_payment_processor WHERE id = %1", $params);
      if($processor_type == 'SPGATEWAY'){
        if(!empty($form['installments']) && $form['installments'] > 99){
          $errors['installments'] = t('Installments of recurring must lower than 99.');
        }
        if(!empty($form['installments']) && $form['installments'] > 9 && !empty($form['frequency_unit']) && $form['frequency_unit'] == 'year'){
          $errors['installments'] = t('The years of recurring installments must lower than 9.');
        } 
      }
    }
  }
  return empty( $errors ) ? true : $errors;
}

/**
 * Implementation of hook_civicrm_prepareInvoice()
 */
function civicrm_spgateway_civicrm_prepareInvoice($contribution_id, &$tplParams){
  $sql = "SELECT pp.payment_processor_type FROM civicrm_contribution c
    INNER JOIN civicrm_payment_processor pp ON c.payment_processor_id = pp.id
    WHERE c.id = $contribution_id";
  $payment_process_type = CRM_Core_DAO::singleValueQuery($sql);
  if(preg_match('/SPGATEWAY/', $payment_process_type)){
    $tplParams = civicrm_spgateway_notify_generate($contribution_id, FALSE);
  }
}

function civicrm_spgateway_notify_generate($cid, $send_mail = FALSE){
  civicrm_initialize();
  $info = civicrm_spgateway_notify_info($cid);
  if(!empty($info)){
    $info['display'] = civicrm_spgateway_notify_display($info);
    if($info['#type'] == 'BARCODE'){
      $info['has_receipt'] = 1;
      $info['display'] = civicrm_spgateway_notify_display_barcode($info);
    }

    if($send_mail){
      $message = '';
      CRM_Contribute_BAO_Contribution::getInvoice($cid, $info, $message, $send_mail);
    }
    else{
      return $info;
    }
  }
}

function civicrm_spgateway_notify_bytrxn($trxn_id){
  $cid = CRM_Core_DAO::singleValueQuery("SELECT id FROM civicrm_contribution WHERE trxn_id = %1 OR trxn_id = %2", array(
    1 => array($trxn_id, 'String'),
    2 => array($trxn_id.'_1', 'String'),
  ));
  return civicrm_spgateway_notify_info($cid);
}

function civicrm_spgateway_notify_info($cid){
  $data = db_query("SELECT data FROM {civicrm_contribution_spgateway} WHERE cid = :cid", array(':cid' => $cid))->fetchField();
  $json = CRM_Core_Payment_SPGATEWAYAPI::dataDecode($data);
  $type = $json['PaymentType'];
  $return = array();
  $invoice_link = CRM_Contribute_BAO_Contribution_Utils::invoiceLink($cid);
  switch($type){
    case 'VACC':
      $return[ts('Bank code')] = $json['BankCode'];
      $return[ts('Virtual account number')] = $json['CodeNo'];
      $return[ts('Payment deadline')] = $json['ExpireDate'].' '.$json['ExpireTime'];
      break;
    case 'CVS':
      $help = l('» '.ts('Payment Instructions'), 'https://www.newebpay.com/website/Page/content/cvs_intro', array('attributes' => array('target' => '_blank')));
      $return[ts('Convenience Store Payment Code')] = $json['CodeNo'];
      $return[ts('Payment deadline')] = $json['ExpireDate'].' '.$json['ExpireTime'];
      $return[] = $help;
      break;
    case 'BARCODE':
      $barcodepath = CRM_Core_Payment_SPGATEWAY::REAL_DOMAIN.'/API/barcode_display/get_barcode_img?barcode_text=';
      $barcode = array($json['Barcode_1'], $json['Barcode_2'], $json['Barcode_3']);
      foreach($barcode as $k => $b){
        $return['#barcode'.$k] = '<div><img src="'.$barcodepath.$b.'" alt="'.$b.'" /></div>';
      }
      $return[ts('Payment slip')] = '<a href="'.$invoice_link.'" target="_blank">» '.ts('Print payment slip').'</a>';
      $return[ts('Payment deadline')] = $json['ExpireDate'].' '.$json['ExpireTime'];
      break;
  }
  if(!empty($return)){
    $return['#type'] = $type;
    $return['#expire'] = $json['ExpireDate'].' '.$json['ExpireTime'];
    $return['#invoice'] = $invoice_link;
    return $return;
  }

  // error fallback
  return array();
}

function civicrm_spgateway_notify_display($info, $payment_instrument_id = NULL){
  $instruments = CRM_Contribute_PseudoConstant::paymentInstrument();
  $output = '';
  foreach($info as $label => $value){
    if(preg_match('/^#/', $label)){
      continue;
    }
    elseif(is_numeric($label)){
      $output .= '<dd>'.' <span>'.$value.'</span></dd>';
    }
    else{
      $output .= '<dd><label>'.$label.':</label>'.' <span>'.$value.'</span></dd>';
    }
  }
  $payment_instrument = !empty($payment_instrument_id) ? '<strong>'.$instruments[$payment_instrument_id].'</strong>' : '';
  $output = $payment_instrument.'<dl>'.$output.'</dl>';
  return $output;
}

function civicrm_spgateway_notify_display_barcode($info){
  $output = '<div style="border:1px solid #000;padding:10px;margin:10px;float:right;width:200px;height:175px;color:#777;">代收店舖章</div>';
  foreach($info as $label => $v){
    if(preg_match('/^#barcode/', $label)){
      $output .= '<div>'.$v.'</div>';
    }
  }
  $output .= '<p><label>'.ts('Payment deadline').':</label> <span>'.$info['#expire'].'</span></p>';
  $output .= '<p><span style="font-size: 9px;">'.ts('Note: Payment confirmation takes 3-4 working days.').'</span></p>';
  return $output;
}


function civicrm_spgateway_cron() {
  if (!empty(variable_get('maintenance_mode', ''))) {
    return;
  }
  $now = time();

  // every nights, we check recurring payment result 
  $last = variable_get('civicrm_spgateway_recur_sync', 0);
  if($now - $last > 60000 && date('G') > '18' && date('G') < '23'){
    civicrm_spgateway_recur_sync();

    // For old neweb.
    $query = "SELECT payment_processor_id FROM civicrm_contribution c INNER JOIN civicrm_payment_processor p ON c.payment_processor_id = p.id WHERE trxn_id LIKE 'r_%' AND payment_processor_type = 'SPGATEWAY' GROUP BY payment_processor_id;";
    $dao = CRM_Core_DAO::executeQuery($query);
    while($dao->fetch()) {
      CRM_Core_Payment_SPGATEWAYNeweb::resync($dao->payment_processor_id);
    }

    variable_set('civicrm_spgateway_recur_sync', $now);
  }

  // For old neweb.
  $last = variable_get('civicrm_spgateway_neweb_recur_sync', 0);
  if($now - $last > 60000 && date('G') > '18' && date('G') < '24'){
    $query = "SELECT payment_processor_id FROM civicrm_contribution c INNER JOIN civicrm_payment_processor p ON c.payment_processor_id = p.id WHERE trxn_id LIKE 'r_%' AND payment_processor_type = 'SPGATEWAY' GROUP BY payment_processor_id;";
    $dao = CRM_Core_DAO::executeQuery($query);
    $finishedAll = TRUE;
    while($dao->fetch()) {
      module_load_include('inc', 'civicrm_spgateway', 'civicrm_spgateway.neweb');
      $finished = civicrm_spgateway_neweb_resync($dao->payment_processor_id);
      if (!$finished) {
        $finishedAll = FALSE;
      }
    }
    if ($finishedAll) {
      variable_set('civicrm_spgateway_neweb_recur_sync', $now);
    }
  }

}

function civicrm_spgateway_recur_sync($days = array()){
  civicrm_initialize();
  if(empty($days)){
    $days = array(
      date('j'),
      date('j', strtotime('-1 day')),
    );

    // when end of month
		$end_this_month = date('j', strtotime('last day of this month'));
    if (date('j') == $end_this_month) {
      for($i = $end_this_month; $i <= 31; $i++) {
        $days[] = $i;
      }
    }
    $days = array_unique($days);
  }

  $query = "SELECT (SELECT count(c.id) FROM civicrm_contribution c WHERE c.contribution_recur_id = r.id AND c.receive_date >= %2 AND c.receive_date <= %3 ) AS contribution_count, r.* FROM civicrm_contribution_recur r
  WHERE r.contribution_status_id = 5 AND r.frequency_unit = 'month' AND (DAY(r.start_date) = %1 OR r.cycle_day = %1)
  ORDER BY r.create_date ASC";
  foreach($days as $d){
    $d = (string) $d;
    watchdog('civicrm_spgateway', 'Start to sync recurring for day '.$d);
    $query_params = array(
      1 => array($d, 'String'),
      2 => array(date('Y-m-').sprintf('%02s', $d).' 00:00:00', 'String'),
      3 => array(date('Y-m-').sprintf('%02s', $d).' 23:59:59', 'String'),
    );
    $result = CRM_Core_DAO::executeQuery($query, $query_params);
    while($result->fetch()){
      if(empty($result->contribution_count)){
        // check if is next day of expect recurring
        CRM_Core_Payment_SPGATEWAY::recurSync($result->id);
        usleep(300000); // sleep 0.3 second
      }
    }
    $result->free();
    $result = NULL;
  }
}

function civicrm_spgateway_civicrm_enableDisable($recordBAO, $recordID, $isActive) {
  if ($recordBAO == 'CRM_Contribute_BAO_ContributionRecur' && empty($isActive)) {
    $payment_processor_id = CRM_Core_DAO::getFieldValue('CRM_Contribute_DAO_ContributionRecur', $recordID, 'processor_id');
    if (empty($payment_processor_id)) {
      $payment_processor_id = CRM_Core_DAO::getFieldValue('CRM_Contribute_DAO_Contribution', $recordID, 'payment_processor_id', 'contribution_recur_id');
    }
    if (CRM_Core_DAO::getFieldValue('CRM_Core_DAO_PaymentProcessor', $payment_processor_id, 'payment_processor_type') == 'SPGATEWAY') {
      CRM_Core_DAO::setFieldValue('CRM_Contribute_DAO_ContributionRecur', $recordID, 'contribution_status_id', 3);
    }
  }
}

function civicrm_spgateway_mobile_checkout($type, $post, $objects){
  $return = CRM_Core_Payment_SPGATEWAY::mobileCheckout($type, $post, $objects);
  return $return;
}


function _civicrm_spgateway_cancel_recuring_message(){
  $js = '<h3>
藍新金流提醒
</h3>
<p>
  藍新請透過以下步驟，先至金流後台改狀態，再到此完成取消定捐。
</p>
<p>
  <ol>
    <li>先登入到<a target="_blank" href="https://www.newebpay.com/main/login_center/single_login">藍新的後台</a>，找到該筆定期定額進行取消操作</li>
    <li>藍新後台確認取消後，再到 CRM 後台取消（就是此功能）。</li>
  </ol>
</p>
<p>
  <span style="color:#ff0000;">注意</span>：若沒有在藍新後台取消，則該筆定捐<span style="color:#ff0000;">不會</span>停止喔！按下「確定」前請確認<b>您已在藍新後台取消該筆定捐</b>。
</p>
<p>
  詳情請參考<a target="_blank" href="https://neticrm.tw/resources/2497#p1"> netiCRM 手冊說明</a>
</p>';
  return $js;
}


function _civicrm_spgateway_error_msg($code){
  $code = (string) $code;
  // success
  if($code == '1' || $code == '2'){
    return;
  }

  // error
  $msg = array(
    'PER10001' => '商店資料取得失敗',
    'PER10002' => '資料解密錯誤',
    'PER10003' => 'POST 資料傳遞錯誤',
    'PER10004' => '資料不齊全',
    'PER10005' => '資料不可空白',
    'PER10006' => '商品名稱不得含有 JavaScript 語法、CSS 語法',
    'PER10007' => '委託金額格式不對,金額必須為數字',
    'PER10008' => '委託金額不能為零',
    'PER10009' => '週期設定錯誤! (W=週,M=月,Y=年)',
    'PER10010' => '商店訂單編號錯誤,只允許英數與底線',
    'PER10011' => '商店訂單編號長度限制為 20 字',
    'PER10012' => '回傳格式格式錯誤,只接受 JSON 或 String',
    'PER10013' => '週期授權時間資料不正確,日期格式為 1 到 7',
    'PER10014' => '週期授權時間資料不正確,日期格式為 1 到 7(長度不符)',
    'PER10015' => '定期授權時間資料不正確,日期格式為 01 到 31',
    'PER10016' => '定期授權時間資料不正確,日期格式為 01 到 31(長度不符)',
    'PER10017' => '定期授權時間資料不正確,日期格式為 01 到 31',
    'PER10018' => '定期授權時間資料不正確,日期格式為 01 到 31',
    'PER10019' => '定期授權時間資料不正確,長度不符',
    'PER10020' => '首期授權模式設定錯誤(1-3),請檢查',
    'PER10021' => '備註說明不得含有 JavaScript 語法、CSS 語法',
    'PER10022' => '授權期數格式不對,必須為數字',
    'PER10023' => '授權期數不能為零',
    'PER10024' => '授權期數不能多於 999 次',
    'PER10025' => '返回商店網址格式錯誤',
    'PER10026' => '每期授權通知網址格式錯誤',
    'PER10027' => '是否開啟付款人資訊設定錯誤',
    'PER10028' => '付款人電子信箱格式錯誤',
    'PER10029' => '商店代號停用',
    'PER10030' => '商店信用卡資格停用',
    'PER10031' => '商店定期定額資格停用',
    'PER10032' => '該訂單編號已重覆',
    'PER10033' => '寫入委託單失敗',
    'PER10034' => '授權失敗,委託單建立失敗',
    'PER10035' => '委託單更新授權結果失敗',
    'PER10036' => '驗證資料錯誤(來源不合法)',
    'PER10037' => '付款頁參數不足',
    'uncertain' => 'Go check in www.newebpay.com',
  );
  if(!empty($msg[$code])){
    // return t($msg[$code]);
    return $msg[$code];
  }
  else{
    return t('Error when processing your payment.');
  }
}
