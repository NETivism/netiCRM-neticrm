<?php
/**
 * Implementation of hook_init
 */
function civicrm_neweb_init(){
  $path = drupal_get_path('module', 'civicrm_neweb');
  drupal_add_css("$path/civicrm_neweb.css");

  if(strstr($_GET['q'], 'neweb/ipn')){
    $GLOBALS['conf']['cache'] = FALSE;
  }
}

/**
 * Implementation of hook_menu
 */
function civicrm_neweb_menu(){
  return array(
    'neweb/ipn' => array(
      'access callback' => true,
      'page callback' => 'civicrm_neweb_ipn',
      'type' => MENU_CALLBACK,
      'file' => 'civicrm_neweb.ipn.inc',
    ),
    'civicrm/contribute/recurring_nw' => array(
      'title' => 'Neweb Recurring contribution management',
      'access arguments' => array('edit contributions'),
      'page callback' => 'civicrm_neweb_recurring_page',
      'type' => MENU_CALLBACK,
      'file' => 'civicrm_neweb.pages.inc',
    ),
  );
}

/**
 * Implementation of hook_civicrm_buildForm()
 */
function civicrm_neweb_civicrm_buildForm($form_name, &$form){
  switch($form_name){
    case 'CRM_Contribute_Form_Contribution_Main':
      // add neweb payment method selection
      drupal_add_js(_civicrm_neweb_js_form(), 'inline');
      break;
    case 'CRM_Contribute_Form_Contribution_ThankYou':
      // credit card
      if(isset($_POST['final_result'])){
        if($_POST['final_result'] == 1 && $_POST['final_return_PRC'] == 0 && $_POST['final_return_SRC'] == 0){
          drupal_set_message(t("Success. Thank you."));
        }
        else{
          // error here
          module_load_include("inc", 'civicrm_neweb', 'civicrm_neweb.ipn');
          $prc = $_POST['final_return_PRC'];
          $src = $_POST['final_return_SRC'];
          $brc = $_POST['final_return_BankRC'];
          $error = civicrm_neweb_response($prc, $src, $brc);
          drupal_set_message(implode("<br>", $error), 'error');
        }
      }
      break;
    case 'CRM_Contribute_Form_ContributionPage_Amount':
      $query = CRM_Core_DAO::executeQuery("SELECT id FROM civicrm_payment_processor WHERE payment_processor_type = 'Neweb'");
      while($query->fetch()){
        $processor[$query->id] = $query->id;
      }
      _civicrm_neweb_js_contritweak($processor);
      break;
    case 'CRM_Admin_Form_PaymentProcessor':
      $pid = $_GET['id'];
      $pid_test = $pid + 1;
      if($form->_defaultValues['payment_processor_type'] == 'Neweb'){
        $default = array(
          'pid' => $pid,
          'ftp_host' => '',
          'ftp_user' => '',
          'ftp_password' => '',
        );
        $ftp = variable_get('civicrm_neweb_ftp_'.$pid, $default);
        _civicrm_neweb_js_payment($ftp, 0);
        $ftp_test = variable_get('civicrm_neweb_ftp_test_'.$pid_test, $default);
        _civicrm_neweb_js_payment($ftp_test, 1);
      }
      break;
  }
}

/**
 * Implementation of hook_postProcess()
 */
function civicrm_neweb_civicrm_postProcess($form_name, &$form){
  if($form_name == 'CRM_Admin_Form_PaymentProcessor'){
    $default = array(
      'ftp_host' => '',
      'ftp_user' => '',
      'ftp_password' => '',
    );
    foreach($default as $k => $v){
      if($_POST[$k]) $default[$k] = $_POST[$k];
      if($_POST['test_'.$k]) $default_test[$k] = $_POST['test_'.$k];
    }
    variable_set("civicrm_neweb_ftp", $default);
    variable_set("civicrm_neweb_ftp_test", $default_test);
  }
}

/**
 * Implementation of hook_cron()
 */
function civicrm_neweb_cron(){
  require_once("civicrm_neweb.cron.inc");
  module_load_include("inc", 'civicrm_neweb', 'civicrm_neweb.cron');
  $hour = date('G');
  $now = REQUEST_TIME;
  $yesterday = $now - 86400;
  $is_test = 0;
  $pids = _civicrm_neweb_is_active($is_test);
  foreach ($pids as $pid) {
    _civicrm_neweb_process_all($is_test, $now, $hour, $yesterday, $pid);
  }
  $is_test = 1;
  $pids = _civicrm_neweb_is_active($is_test);
  foreach ($pids as $pid) {
    _civicrm_neweb_process_all($is_test, $now, $hour, $yesterday, $pid);
    _civicrm_neweb_scan_missing_transaction($now, $hour, $yesterday, $pid);
  }
}


function _civicrm_neweb_process_all($is_test, $now, $hour, $yesterday, $pid){
  // recurring contributions
  $test = $is_test ? '_test' : '';
  if($hour >= 19 && $hour <= 23 && variable_get('civicrm_neweb_response_'.$pid.$test, 0) < $yesterday){
    // get yesterday modification result
    if(civicrm_neweb_process_response($is_test, $now, $pid)){
      variable_set('civicrm_neweb_response_'.$pid.$test, $now);
    }
  }
  if($hour >= 16 && $hour <= 23 && variable_get('civicrm_neweb_transaction_'.$pid.$test, 0) < $yesterday){
    // get yesterday transaction result
    if(civicrm_neweb_process_transaction($is_test, $now, $pid)){
      variable_set('civicrm_neweb_transaction_'.$pid.$test, $now);
    }
  }
  if($hour >= 12 && $hour <= 15 && variable_get('civicrm_neweb_uploaded_'.$pid.$test, 0) < $yesterday){
    // doing upload stuff
    if(civicrm_neweb_process_upload($is_test, $pid)){
      variable_set('civicrm_neweb_uploaded_'.$pid.$test, $now);
    }
  }
  if(variable_get('civicrm_neweb_expire_recur_'.$pid.$test, 0) < $yesterday){
    // doing expire recur
    if(civicrm_neweb_expire_recur($is_test)){
      variable_set('civicrm_neweb_expire_recur_'.$pid.$test, $now);
    }
  }

  // ezpay contributions
  if($now - variable_get('civicrm_neweb_ezpay_'.$pid, 0) > 7200){
    civicrm_neweb_process_ezpay($is_test, $now, $pid);
    variable_set('civicrm_neweb_ezpay_'.$pid.$test, $now);
  }
}

/**
 * Correction recurring contribution only for credit card.
 */
function _civicrm_neweb_js_form(){
  return '
jQuery(document).ready(function($){
  $("input[name=civicrm_instrument_id_dummy]").click(function(){
    var v = $(this).val();
    if(v != 1){
      $("#crm-container input[name=is_recur][value=0]").click();
      $("#crm-container input[name=is_recur][value=1]").attr("disabled","disabled");
    }
    else{
      $("#crm-container input[name=is_recur][value=1]").removeAttr("disabled");
    }
  });
});  
  ';
}
function _civicrm_neweb_js_contritweak($processor){
  $str = '\['.implode('\]|\[', $processor).'\]';
  $js = '
jQuery(document).ready(function($){
  set_recur_freq();
  $("tr.crm-contribution-contributionpage-amount-form-block-payment_processor input:checkbox").click(set_recur_freq);
  $("#is_recur").click(function(){
    if($(this).val()){
      $("#is_recur_interval").attr( "checked", false );
    }
  });

  function set_recur_freq(){
    var flag = true;
    $("tr.crm-contribution-contributionpage-amount-form-block-payment_processor input:checkbox:checked").each(function(){
      $("input[name=\'recur_frequency_unit[week]\']").hide();
      $("label[for=\'recur_frequency_unit[week]\']").hide();
      $("input[name=\'recur_frequency_unit[day]\']").hide();
      $("label[for=\'recur_frequency_unit[day]\']").hide();
      $("input[name=\'recur_frequency_unit[year]\']").hide();
      $("label[for=\'recur_frequency_unit[year]\']").hide();
      flag = false;
    });
    if(flag){
      $("input[name=\'recur_frequency_unit[week]\']").show();
      $("label[for=\'recur_frequency_unit[week]\']").show();
      $("input[name=\'recur_frequency_unit[day]\']").show();
      $("label[for=\'recur_frequency_unit[day]\']").show();
      $("input[name=\'recur_frequency_unit[year]\']").show();
      $("label[for=\'recur_frequency_unit[year]\']").show();
    }
  }
});  
';
  drupal_add_js($js, array('type' => 'inline', 'scope' => 'footer'));
}
function _civicrm_neweb_js_payment($default, $is_test){
  $element = $is_test ? 'crm-paymentProcessor-form-block-test_url_recur' : 'crm-paymentProcessor-form-block-url_recur';
  $test = $is_test ? 'test_' : '';
  $js = '
jQuery(document).ready(function($){
  var def= new Object();
  def = '.drupal_json_encode($default).';
  var e = "'.$element.'";
  var test = "'.$test.'";
  var main = "tr."+e;
  var $new = new Object();
  $new.ftp_password = $(main).clone();
  $new.ftp_user = $(main).clone();
  $new.ftp_host = $(main).clone();

  for(var i in $new){
    var $o = $new[i];
    $o.find(".helpicon").remove();
    $o.find("label").attr("for", test+i).text(i.replace("_", " "));
    $o.find("input").attr("name", test+i).val("");
    $o.find("input").val(def[i]);
    $o.removeClass().addClass("crm-paymentProcessor-form-block-"+test+i);
    $($o).insertAfter(main);
    $o = $(\'<input type="hidden" name="pid" value="\'+def.pid+\'">\');
    $o.insertAfter(main);
  }
});  
';
  drupal_add_js($js, array('type' => 'inline', 'scope' => 'footer'));
}

function _civicrm_neweb_instrument($type = 'label'){
  return array(
    'Credit Card' => array('label' => '信用卡', 'description' => '', 'code' => 'Credit Card'),
    'ATM' => array('label' => 'ATM 轉帳', 'description' => '', 'code' => 'ATM'),
    'Web ATM' => array('label' => '網路 ATM', 'description' => '', 'code' => 'WEBATM'),
    'Convenient Store' => array('label' => '超商條碼繳費', 'description'=>'', 'code' => 'CS'),
    'Convenient Store (Code)' => array('label'=>'超商代碼繳費','desc' => '', 'code' => 'MMK'),
    'Alipay' => array('label' => '支付寶', 'description' => '', 'code' => 'ALIPAY'),
  );
}

/**
 * mode - put / get
 */
function _civicrm_neweb_ftp($mode, $local, $remote, $host, $user, $pass){

  $cid = @ftp_connect($host);
  $login = @ftp_login($cid, $user, $pass);
  if(!$login){
    watchdog('civicrm_neweb', "Unable to login FTP. host: {$host} , user: {$user}", WATCHDOG_ERROR);  
  }
  else{
    if($mode == 'put'){
      $success = @ftp_put($cid, $remote, $local, FTP_ASCII);
    }
    elseif($mode == 'get'){
      $pass = $pass ? ':'.$pass : '';
      $contents = @file_get_contents("ftp://".$user.$pass."@".$host."/".$remote);
      if($contents){
        $success = @file_put_contents($local, $contents);
      }
    }
  }
  return $success;
}
/**
 * mode - put / get / list
 */
function _civicrm_neweb_sftp($mode, $local, $remote, $host, $user, $pass){
  $path = drupal_get_path('module', 'civicrm_neweb'). '/phpseclib/';
  set_include_path(get_include_path() . PATH_SEPARATOR . getcwd().base_path().rtrim($path, '/'));

  include_once($path.'Net/SSH2.php');
  include_once($path.'Net/SFTP.php');

  $sftp = new Net_SFTP($host);
  if (!$sftp->login($user, $pass)) {
    watchdog('civicrm_neweb', "Unable to login SFTP. host: {$host} , user: {$user}", WATCHDOG_ERROR);  
  }
  else{
    switch($mode){
      case 'put':
        $data = file_get_contents($local);
        $success = $sftp->put($remote, $data);
        break;
      case 'get':
        $success = $sftp->get($remote, $local);
        if(file_exists($local)){
          $success = file_get_contents($local);
        }
        break;
      case 'list':
      default:
        $success = $sftp->rawlist($remote);
        break;
    }
  }
  // debug usage
  /*
  print '<pre>';
  print_r($sftp->getSFTPLog());
  print_r($sftp->getSFTPErrors());
  print '</pre>';
  */
  // call destructor to close connection
  unset($sftp);

  if($success){
    return $success;
  }
  else{
    return false;
  }
}

/**
 * Connect for neweb
 *
 * @id Neweb store id
 * @local local file full path
 * @mode put, get, list
 * @is_test test contribution or not
 */
function _civicrm_neweb_connect($pid, $p_usernumber, $local, $mode, $is_test){
  $dir = $mode ? 'import' : 'output';
  $mode = $mode ? 'put' : 'get';
  $ret = false;
  $pid_test = $pid + 1;

  if($is_test){
    $ftp = variable_get("civicrm_neweb_ftp_test_".$pid_test, array());
  }
  else{
    $ftp = variable_get("civicrm_neweb_ftp_".$pid, array());
  }

  $function = '_civicrm_neweb_sftp';
  $remote = $dir."/".basename($local);
  $ret = call_user_func($function, $mode, $local, $remote, $ftp['ftp_host'], $ftp['ftp_user'], $ftp['ftp_password']);

  return $ret;
}

/**
 * Check if payment processor exists
 */
function _civicrm_neweb_is_active($is_test){
  civicrm_initialize();
  $is_test = $is_test ? 1 : 0;
  $ids = array();
  $dao = CRM_Core_DAO::executeQuery("SELECT id FROM civicrm_payment_processor WHERE payment_processor_type = 'Neweb' AND is_active = 1 AND is_test = $is_test");
  while($id = $dao->fetch()){
    $ids[] = $dao->id;
  }
  return $ids;
}

function _civicrm_neweb_scan_missing_transaction($now, $hour, $yesterday, $pid){
  // one time a day
  // only process non-test contribution
  if($hour >= 1 && $hour <= 5 && variable_get('civicrm_neweb_scan', 0) < $yesterday){
    // look back 7 days to see if we miss some file from neweb
    $week = array();
    $path = _civicrm_neweb_path(0);
    for($i = 1; $i<=7; $i++){
      $offset = $i*86400;
      $date = $now - $offset;
      // try to find some file
      $ymd = date('Ymd', $date);
      $week[$ymd] = $ymd;
    }

    $result = glob($path.'/RP_Trans_*{'.implode(',', $week).'}.log',GLOB_BRACE);
    foreach($result as $filename){
      // to see what days we miss
      preg_match('/_([0-9]{4,})\.log$/i', $filename, $matches);
      $ymd = $matches[1];
      if($ymd){
        unset($week[$ymd]);
      }
    }

    // ok see what left
    if(count($week)){
      foreach($week as $ymd){
        $date = strtotime($ymd);
        civicrm_neweb_process_transaction(0, $date, $pid);
      }
    }
    variable_set('civicrm_neweb_scan', $now);
  }
}

function _civicrm_neweb_trxn_id($id, $is_test, $is_recur){
  $trxn_id = $is_recur ? $id + 990000000  : $id;

  // prepare for hook
  $data = array(
    'module' => 'civicrm_neweb',
    'is_test' => $is_test,
    'trxn_id' => $trxn_id,
    'id' => $id,
  );
  drupal_alter('civicrm_trxn_id', $data);
  return $data['trxn_id'];
}

function _civicrm_neweb_end_date_calculate(&$recur){
  if($recur->installments == 1){
    // status 1 is 'completed'
    $recur->contribution_status_id = 1;
    return ;
    // $recur->save();
    // CRM_Core_Error::debug_log_message( "Instrument is less than 1. Don't send Recur." );
    // return $recur;
  }


  // every recuring contrib start on next month
  $installments_total = $recur->installments - 1;
  if(empty($recur->end_date)){
    $recur->start_date = $recur->create_date;
  }
  $month_now = date('n', strtotime($recur->start_date));
  $day_now = date('j', strtotime($recur->start_date)) + 1;
  if($day_now > 25 ){
    $month = $month_now == 12 ? 1 : $month_now +1;
    $cycle_day = 5;
    if($installments_total >= 1){
      $installments_total -= 1;
    }
    $year = $month_now == 12 ? date('Y') + 1  : date('Y');
  }
  else{
    $month = $month_now;
    $cycle_day = $day_now;
    $year = date('Y');
  }
  $next_recur = mktime(0,0,0, $month, $cycle_day, $year);
  if($recur->installments){
    $end_recur = strtotime('+'.$installments_total.' month', $next_recur);
    $end_recur = mktime(0,0,0, date('n', $end_recur), $cycle_day, date('Y', $end_recur));
    $end_date = date('YmdHis', $end_recur);
    $recur->end_date = date('YmdHis', $end_recur);
  }
  $recur->next_sched_contribution = date('YmdHis', $next_recur);
  $recur->start_date = $recur->next_sched_contribution;
  $recur->cycle_day = $cycle_day;
  // $recur->contribution_status_id = 2;
  // $recur->save();
  // CRM_Core_Error::debug_log_message( "Done the recurring object save." );
  // return $recur;

}

function _civicrm_neweb_cancel_recuring_message(){
  $html = "<h3>藍新金流提醒 : 點選「取消」後不會立刻生效，要注意兩天內的定期定額狀態變化。</h3>
  <p>「取消」一筆定期定額後，會發現其從正常 =>待處理，但多出了「取消日期」。<br>
後續仍需確認其狀態「待處理」，是否在兩天內變成了「已取消」，此時才正式確認其定期定額成功取消了。</p>
<h4>狀態說明 : </h4>
<ul><li>「正常」表示會依據每月的扣款日期正常扣款</li>
<li>「待處理」表示等待藍新回覆 </li>
<li>「已取消」表示定期定額已經取消</li></ul>
<p>詳情請參考 <a href='https://neticrm.tw/faq/268' target='_blank'>netiCRM 手冊說明</a></p>";
  return $html;
}