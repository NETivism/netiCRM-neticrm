<?php

function civicrm_contribution_cck_menu() {
  $items['admin/settings/civicrm_contribution_cck'] = array(
    'title' => t('CiviCRM Contribution Sync'),
    'description' => t('Auto create CiviCRM contribution when updating specific content type.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('civicrm_contribution_cck_admin_settings'),
    'access callback' => 'user_access',
    'access arguments' => array('administer site configuration'),
    'file' => 'civicrm_contribution_cck.pages.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['node/%node/donors'] = array(
    'title' => 'Donors',
    'page callback' => 'civicrm_contribution_cck_donors',
    'page arguments' => array(1, 'node'),
    'access callback' => 'civicrm_contribution_cck_access_check',
    'access arguments' => array('view donor list'),
    'file' => 'civicrm_contribution_cck.pages.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 80,
  );
  $items['node/%node/civicc_admin_contribution'] = array(
    'title' => 'Contritbution Management',
    'page callback' => 'civicrm_contribution_cck_goto',
    'page arguments' => array(1, 'node'),
    'access callback' => 'civicrm_contribution_cck_access_check',
    'access arguments' => array('edit contributions'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 90,
  );
  return $items;
}

function civicrm_contribution_cck_access_check($perm){
  switch($perm){ 
    case 'edit contributions':
      if(variable_get('civicc_enable_admin', 0)){
        if(user_access($perm)){
          return TRUE;
        }
      }
      break;
    case 'view donor list':
      if(variable_get('civicc_enable_dornor_list', 0)){
        if(arg(0) == 'node' && is_numeric(arg(1))) {
          $node = node_load(arg(1));
          if(civicrm_contribution_cck_check($node)){
            if(user_access($perm)){
              return TRUE;
            }
          }
        }
      }
      break;
  }
  return FALSE;
}

/**
 * Implementation of hook_theme
 */
function civicrm_contribution_cck_theme($existing, $type, $theme, $path){
  return array(
    'civicrm_contribution_cck_donors' => array(
      'arguments' => array('type' => NULL, 'node' => NULL, 'donors' => NULL),
      'template' => 'civicrm_contribution_cck_donors',
      'file' => 'civicrm_contribution_cck.pages.inc',
    ),
    'civicrm_contribution_cck_donor_item' => array(
      'arguments' => array('donor' => NULL, 'picture' => NULL, 'amount' => NULL, 'name' => NULL  ),
      'template' => 'civicrm_contribution_cck_donor_item',
      'file' => 'civicrm_contribution_cck.pages.inc',
    ),
  );
}

function civicrm_contribution_cck_goto(&$node){
  $contribution_id = civicrm_contribution_cck_check($node);
  if($contribution_id){
    switch(arg(2)){
      case 'civicc_admin_contribution':
        $is_test = $_GET['action'] == 'preview' ? 1 : '';
        drupal_goto('civicrm/contribute/search', "reset=1&pid=$conribution_id&force=1&test=$is_test&start=&end=");
        break;
    }
  }
}


/**
 * hook_perm
 */
function civicrm_contribution_cck_perm(){
  return array('view donor list');
}

/**
 * hook_block
 */
function civicrm_contribution_cck_block($op = 'list', $delta = 0, $edit = array()){
  if($op == 'list'){
    $blocks['donor_list'] = array(
      'info' => t('List donors in block.'),
    );
    return $blocks;
  }
  elseif ($op == 'configure' && $delta == 'donor_list') {
    $form['items'] = array(
      '#type' => 'select', 
      '#title' => t('Number of items'), 
      '#default_value' => variable_get('civicrm_contribution_cck_block_item', 0), 
      '#options' => array(0 => t('all'),'1', '2', '3', '4','5','6','7','8','9','10'),
    );
    return $form;
  }
  elseif($op == 'save' && $delta == 'donor_list'){
    variable_set('civicrm_contribution_cck_block_item', $edit['items']);
  }
  elseif($op == 'view'){
    switch($delta){
      case 'donor_list': 
        if(arg(0) == 'node' && is_numeric(arg(1))){
          $node = node_load(arg(1));
          if(civicrm_contribution_cck_access_check('view donor list')){
            module_load_include('inc', 'civicrm_contribution_cck', 'civicrm_contribution_cck.pages');
            $block['subject'] = t('Donors');
            $is_test = $_GET['action'] == 'preview' ? 1 :0;
            $limit = variable_get('civicrm_contribution_cck_block_item', 0) ? variable_get('civicrm_contribution_cck_block_item', 0) : NULL;
            //$donors = civicrm_contribution_cck_donor_filter($node, $is_test);
            $donors = civicrm_contribution_cck_donors_filter($node, $is_test, $limit);
            foreach($donors as $type => $dd){
              foreach($dd as $d){
                $d['picture'] = theme('user_picture', $d['account']);
                $block['content'] .= theme('civicrm_contribution_cck_donor_item', $d, $d['picture'], $d['amount'], $d['name']);
              }
            }
            if(count($donors)){
              $block['content'] .= "<div class=\"more\">&raquo; ".l(t("More"), "node/$node->nid/donors");
            }
          }
        }
        return $block;
    }
  }
}

function civicrm_contribution_cck_fields(){
  return array(
    'id' => t('Contribution ID'),
    'contribution_type_id' => t('Contribution Type'),
    'goal_amount' => t('Goal Amount'),
    'date' => t('Start / End date of contribution'),
    'is_active' => t('Is this Online Contribution Page Active?'),
    'is_for_organization' => t('Allow individuals to contribute and / or signup for membership on behalf of an organization?'),
    'is_monetary' => t('Enable Payment Processor'),
    'amount_block_is_active' => t('Contribution Amounts section enabled'),
    'min_amount' => t('Min Amount'),
    'max_amount' => t('Max Amount'),
    'is_allow_other_amount' => t('Allow other amounts'),
    'thankyou_title' => t('Thank-you Page Title'),
    'thankyou_text' => t('Thank-you Message'),
  );
}


function civicrm_contribution_cck_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  // we should load contribution caculation status here
  if($op == 'load'){
    if(!$contribution_id) {
      $contribution_id = civicrm_contribution_cck_check($node);
    }
    if($contribution_id){
      return civicrm_contribution_cck_preload($node, $contribution_id);
    }
  }

  if($op == 'delete' || $op == 'presave'){
    if(!$contribution_id) {
      $contribution_id = civicrm_contribution_cck_check($node);
    }
    if ($contribution_id) {
      civicrm_contribution_cck_save($node, $op);
    }

    if($op == 'presave' && $contribution_id === 0) {
      civicrm_contribution_cck_save($node, $op);
    }
  }
}

/**
 * return node_load array
 */
function civicrm_contribution_cck_preload(&$node, $contribution_id){
  $contribution_id = CRM_Utils_Type::escape($contribution_id, 'Integer');
  $is_test = $_GET['action'] == 'preview' ? 1 : 0;
  civicrm_initialize();
  $query = "SELECT SUM( cc.total_amount ) as total_amount FROM civicrm_contribution cc WHERE cc.contribution_status_id = 1 AND cc.cancel_date IS NULL AND cc.contribution_page_id = $contribution_id AND is_test = $is_test";
  $amount_now = CRM_Core_DAO::singleValueQuery( $query );
  $amount_now = $amount_now ? (int) $amount_now : 0;

  $query = "SELECT goal_amount FROM civicrm_contribution_page WHERE id = $contribution_id";
  $amount_goal = CRM_Core_DAO::singleValueQuery( $query );
  $amount_goal = $amount_goal ? (int) $amount_goal : 0;

  $query = "SELECT count(*) FROM civicrm_contribution cc WHERE cc.contribution_status_id = 1 AND cc.cancel_date IS NULL AND cc.contribution_page_id = $contribution_id AND is_test = $is_test";
  $contact_total = CRM_Core_DAO::singleValueQuery( $query );

  $return = array(
    'civicrm_contribution_cck' => array(
      'id' => $contribution_id,
      'amount_now' => $amount_now,
      'amount_total' => $amount_goal,
      'contact_total' => $contact_total,
    ),
  );
  return $return;
}

function civicrm_contribution_cck_save(&$node, $op) {
  civicrm_initialize();
  require_once 'CRM/Contribute/BAO/ContributionPage.php';
  require_once 'api/v2/UFJoin.php';
  require_once 'CRM/Core/OptionGroup.php';

  $contribution_fields = civicrm_contribution_cck_fields();
  $params = array();
  foreach ($contribution_fields as $f => $name) {
    $fieldname = variable_get("civicc_".$f, '');
    if ($fieldname) {
      $field = $node->$fieldname;
      if($f == 'id') {
        $contribution_id = $field[0]['value'];
        $contribution_id_field = $fieldname;
      }
      // don't else
      if ($f == 'date') {
        $params['start_date'] = date('YmdHis',strtotime($field[0]['value']) + $field[0]['offset']);
        $params['end_date'] = date('YmdHis',strtotime($field[0]['value2']) + $field[0]['offset2']);
      }
      elseif ($f == 'is_active') {
        $params['is_active'] = $op == 'delete' ? 0 : $field[0]['value'];
      }
      else {
        $params[$f] = $field[0]['value'];
      }
    }
  }
  $params['title'] = $node->title;
  $params['intro_text'] = $node->body;
  $params['receipt_from_name'] = variable_get('civicc_receipt_from_name', '');
  $params['receipt_from_email'] = variable_get('civicc_receipt_from_email', '');
  $params['cc_receipt'] = variable_get('civicc_receipt_cc', '');
  $params['bcc_receipt'] = variable_get('civicc_receipt_bcc', '');
  $params['receipt_text'] = variable_get('civicc_receipt_text', '');

  // default currency
  $config = CRM_Core_Config::singleton( );
  $params['currency'] = $config->defaultCurrency;

  // default processor type id
  if( variable_get('civicc_payment_processor_id', 0) ){
    $params['payment_processor_id'] = variable_get('civicc_payment_processor_id', 0);
  }

  $obj = CRM_Contribute_BAO_ContributionPage::create($params);
  // we need to save the contribution back to node. 
  $node->{$contribution_id_field}[0]['value'] = $obj->id;

  if(!$contribution_id){
    $contribution_id = $obj->id;
  }

  // process uf_join to add custom profiel form to civicrm
  $custom_pre = variable_get('civicc_custom_pre', 0);
  $custom_post = variable_get('civicc_custom_post', 0);
  if($custom_pre){
    civicrm_contribution_cck_uf_join($contribution_id, $custom_pre, 'pre');
  }
  if($custom_post){
    civicrm_contribution_cck_uf_join($contribution_id, $custom_post, 'post');
  }

  // process amount block label / value
  $amount_block = variable_get('civicc_price_amount_block', '');
  if($amount_block){
    $amounts = explode("\n", $amount_block);
    $options = array();
    for($i = 0; $i < 10; $i++){
      if($amounts[$i]){
        list($l, $v) = explode('|', $amounts[$i]);
        if( trim($l) && (strlen( trim($v)) > 0 ) ) {
          $options[] = array(
            'label'      => $l == '<none>' ? '' : trim($l),
            'value'      => CRM_Utils_Rule::cleanMoney( trim($v) ),
            'weight'     => $i,
            'is_active'  => 1,
            'is_default' => 0,
          );
        }
      }
    } 
    $default = 0;
    CRM_Core_OptionGroup::createAssoc( "civicrm_contribution_page.amount.{$contribution_id}", $options, $default);
  }

  // process instrument
  $payment_instrument = variable_get('civicc_instrument', array());
  if(module_exists('civicrm_instrument') && !empty($payment_instrument) ){
    CRM_Core_DAO::executeQuery("REPLACE INTO civicrm_instrument SET entity_id = {$contribution_id}, entity_table='civicrm_contribution_page', payment_instruments='".serialize($payment_instrument)."'");
  }
}
function civicrm_contribution_cck_uf_join($contribution_id, $uf_group_id, $type){
  $entity_table = 'civicrm_contribution_page';

  $weight = $type == 'pre' ? 1 : 2;
  $params =  array( 
    'module'       => 'CiviContribute',
    'entity_table' => $entity_table,
    'entity_id'    => $contribution_id,
    'weight'       => $weight,
    'uf_group_id'  => $uf_group_id,
    'is_active'    => 1,
  );

  $search = array('entity_table' => $entity_table, 'entity_id' => $contribution_id, 'module'=> 'CiviContribute', 'weight' => $weight);
  $id = civicrm_uf_join_id_find($search);
  if($id){
    $params['id'] = $id;
  }
  civicrm_uf_join_edit($params);
}


function civicrm_contribution_cck_form_alter(&$form, &$form_state, $form_id){
  if (isset($form['type']) && isset($form['#node']) && $form['type']['#value'] . '_node_form' == $form_id){
    $available_types = variable_get('civicc_enabled_type', array());
    if(in_array($form['#node']->type, $available_types) && variable_get('civicc_id', '')) {
      $contribution_id_field = variable_get('civicc_id', ''); 

      // add drop down select list of "contribution type"
      civicrm_initialize();
      require_once('api/v2/Contribution.php');

      $civicc_fields = civicrm_contribution_cck_fields();
      foreach($civicc_fields as $k => $name){
        if($field = variable_get('civicc_'.$k, '')){
          // now start to get default option / value from civicrm
          $options = array();
          switch($k) {
            case 'contribution_type_id':
              $options = CRM_Contribute_PseudoConstant::contributionType();
              break;
            case 'id':
              // doing form alter job 
              $form['#after_build'][] = 'civicrm_contribution_cck_hide_field';
              break;
          }
          if(!empty($options)){
            foreach($options as $k => $v){
              $option_str .= $k.'|'.$v."\n";
            }
            $form['#field_info'][$field]['allowed_values'] = $option_str;
          }
        }
      }

    }
  }
}

function civicrm_contribution_cck_hide_field(&$form, &$form_state) {
/* // wrong implementation for update ... 
  $contribution_id_field = variable_get('civicc_id', ''); 
  $groups = fieldgroup_groups($form['type']['#value']); #using fieldgroup?
  if ($groups) {
    foreach ($groups as $group => $v) {
      if ($form[$group][$contribution_id_field]) {
        $form[$group][$contribution_id_field]['#access'] = false;
        break;
      }
    }
  }
  else {
    $form[$contribution_id_field]['#access'] = false;
  }
*/
  return $form;
}

function civicrm_contribution_cck_check(&$node, $fieldname = 'id'){
  $available_types = variable_get('civicc_enabled_type', array());
  $fieldname = variable_get('civicc_'.$fieldname, '');
  if (in_array($node->type, $available_types) && $fieldname) {
    if (isset($node->$fieldname)) {
      $field = $node->$fieldname;
      $value = $field[0]['value'];
      return $value ? $value : 0;
    }
  }
  return FALSE;
}


