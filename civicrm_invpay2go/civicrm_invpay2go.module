<?php

/**
 * Implement hook_civicrm_prepareTaxReceipt
 */
function civicrm_invpay2go_civicrm_prepareTaxReceipt($contribution_id, &$tpl_params, &$tax_receipt, &$object) {
  // check if exists
  if (!empty($object->trxn_id)) {
    $exists = invpay2go_api_get($object->trxn_id);
    $field_info= _civicrm_invpay2go_get_field_info($contribution_id);
    $tpl_params['taxReceiptFields'] = $field_info;
    if ($exists) {
      if (!empty($exists['issue_response'])) {
        $html = invpay2go_api_print($exists);
        $exists['receipt_info'] = $exists['issue_response']->Result;
        $exists['receipt_status'] = $exists['issue_response']->Status == 'SUCCESS' ? 1 : 0;
        $exists['receipt_message'] = $exists['issue_response']->Message;
        $exists['receipt_print'] = $html;
      }
      $tax_receipt = $exists;
    }
  }
}

/**
 * Implement hook_civicrm_createTaxReceipt
 */
function civicrm_invpay2go_civicrm_createTaxReceipt($contribution_id, &$req_result, &$object) {
  if (!empty($object->trxn_id)) {
    $exists = invpay2go_api_get($object->trxn_id);
    if (empty($exists)) {
      $field_info = _civicrm_invpay2go_get_field_info($contribution_id);
      $contact_params = array(
        'id' => $object->contact_id,
        'version' => 3,
      );
      $result = civicrm_api('Contact', 'GET', $contact_params);
      if (!empty($result['id']) && $result['id'] == $contact_params['id']) {
        $contact = $result['values'][$object->contact_id];
      }

      $contribution = (array) $object;
      $params = _civicrm_invpay2go_prepare_params($contact, $contribution, $field_info);
      $pid = invpay2go_default_pid();
      $api_params = array(
        'apiType' => 'invoice_issue',
        'pid' => $pid,
      );
      $req_result = invpay2go_api_run($params, $api_params, $object->is_test);
    }
  }
}

/**
 * Implement hook_civicrm_buildForm
 */
function civicrm_invpay2go_civicrm_buildForm($form_name, &$form) {
  // skip snippet
  switch ($form_name) {
    case 'CRM_Contribute_Form_Contribution_Main':
    case 'CRM_Event_Form_Registration_Register':
    case 'CRM_Contribute_Form_Contribution_Confirm':
    case 'CRM_Event_Form_Registration_Confirm':
      if ($form->controller->_print != 4) {
        $taxTypes = CRM_Contribute_PseudoConstant::contributionType(NULL, 'is_taxreceipt');
        if (strstr($form_name, 'CRM_Event_Form_Registration_')) {
          $pageType = $form->_values['event']['contribution_type_id'];
        }
        else{
          $pageType = $form->_values['contribution_type_id'];
        }
        if (!empty($pageType) && isset($taxTypes[$pageType])) {
          $elements = _civcirm_invpay2go_form_elements($form_name, $form);
          $form->_invpay2goElements = $elements;
          drupal_add_js(drupal_get_path('module', 'civicrm_invpay2go').'/civicrm_invpay2go.js', array('scope' => 'footer'));
        }
      }
      break;
  }
}

function civicrm_invpay2go_civicrm_alterContent(&$content, $context, $tpl, &$object){
  $allowed = array(
    'CRM/Event/Form/Registration/Register.tpl',
    'CRM/Contribute/Form/Contribution/Main.tpl',
    'CRM/Event/Form/Registration/Confirm.tpl',
    'CRM/Contribute/Form/Contribution/Confirm.tpl',
  );
  if (in_array($tpl, $allowed) && $object->controller->_print != 4 && !empty($object->_invpay2goElements))  {
    require_once 'CRM/Core/Smarty/resources/String.php';
    civicrm_smarty_register_string_resource();
    $smarty =& CRM_Core_Smarty::singleton();
    foreach($object->_invpay2goElements as $field){
      $html = $smarty->fetch($field['string_tpl']);
      $replace .= $html;
    }
    $replace = '<!--invpay2go-separator--><div id="invpay2go-section">'.$replace.'</div>';
    $content = str_replace('<!--payment-separator-->', $replace.'<!--payment-separator-->', $content);
  }
}

/**
 * Implement hook_civicrm_validate
 */
function civicrm_invpay2go_civicrm_validate($form_name, &$fields, &$files, &$form) {
  // TODO: implement validation types
}

/**
 * Implement hook_civicrm_postProcess
 */
function civicrm_invpay2go_civicrm_postProcess($form_name, &$form) {
  switch ($form_name) {
    case 'CRM_Contribute_Form_Contribution_Main':
    case 'CRM_Event_Form_Registration_Register':
      $submitted = $form->exportValues();
      if (isset($submitted['taxReceiptType'])) {
        $invpay2goElements = array();
        foreach ($submitted as $key => $value) {
          if (strstr($key, 'taxReceipt')) {
            $invpay2goElements[$key] = $value;
          }
        }
        if (!empty($invpay2goElements)) {
          $form->set('invpay2goElements', $invpay2goElements);
        }
      }
      break;
    case 'CRM_Contribute_Form_Contribution_Confirm':
    case 'CRM_Event_Form_Registration_Confirm':
      $config = CRM_Core_Config::singleton();
      $submitted = $form->exportValues();
      if ($form_name == 'CRM_Event_Form_Registration_Confirm') {
        $contributionId = $form->getParam('contributionID');
      }
      elseif($form_name == 'CRM_Contribute_Form_Contribution_Confirm') {
//        $contributionId = $params['contributionID'];
      }
      if (isset($submitted['taxReceiptType']) && !empty($contributionId)) {
        $customValues = array();
        foreach ($submitted as $key => $value) {
          if (strstr($key, 'taxReceipt')) {
            if(!empty($config->$key) && is_numeric($config->$key)) {
              $customId = $config->$key;
              $customValues['custom_'.$customId] = $value;
            }
          }
        }
        if (!empty($customValues)) {
          $customValues['entityID'] = $contributionId;
          CRM_Core_BAO_CustomValueTable::setValues($customValues);
        }
      }
      break;
  }
}

function _civcirm_invpay2go_form_elements($form_name, &$form) {
  $config = CRM_Core_Config::singleton();

  $elements = array(
    'taxReceiptType' => array('title' => '', 'required' => TRUE),
    'taxReceiptDeviceType' => array('title' => ''),
    'taxReceiptDeviceNumber' => array('title' => ''),
    'taxReceiptDonate' => array('title' => '請選擇發票捐贈單位'),
    'taxReceiptSerial' => array('title' => '請輸入統一編號'),
  );
  $invpay2goElements = $form->get('invpay2goElements');
  foreach($elements as $key => $e) {
    if(!empty($config->$key) && is_numeric($config->$key)) {
      $field = new CRM_Core_DAO_CustomField();
      $field->id = $config->$key;
      if ($field->find(TRUE)) {
        $elements[$key]['field_id'] = $config->$key;
        $elements[$key]['field'] = $field;
        $title = $e['title'] ? $e['title'] : $field->label;
        $required = !empty($e['required']) ? TRUE : FALSE;
        CRM_Core_BAO_CustomField::addQuickFormElement($form, $key, $field->id, FALSE, $required, FALSE, $title);
        $elements[$key]['string_tpl'] = 'string:<div class="crm-section '.$key.'-section"><div class="label">{$form.'.$key.'.label}</div><div class="content">{$form.'.$key.'.html}</div></div>';

        if (preg_match('/Confirm$/i', $form_name)) {
          if (empty($invpay2goElements[$key]) && $invpay2goElements[$key] !== '0') {
            unset($elements[$key]['string_tpl']);
          }
          $element = $form->getElement($key);
          $element->freeze();
        }
      }
    }
  }
  $form->setDefaults($invpay2goElements);  
  return $elements;
}

function _civicrm_invpay2go_get_field_info($contribution_id) {
  civicrm_initialize();

  $config = CRM_Core_Config::singleton();
  $custom_values = CRM_Core_BAO_CustomValueTable::getEntityValues($contribution_id, 'Contribution');
  $custom_fields = CRM_Core_BAO_CustomField::getFields('Contribution');
  $display = array();
  foreach($config as $key => $v){
    if (strstr($key, 'taxReceipt') && !empty($custom_values[$v])) {
      $label = $custom_fields[$v]['label'];
      $value = $custom_values[$v];
      if (!empty($custom_fields[$v]['option_group_id'])) {
        $options = CRM_Core_BAO_CustomOption::valuesByID($v, $custom_fields[$v]['option_group_id']);
        $value_label = $options[$value];
      }
      else {
        $value_label = $value;
      }
      $display[$key] = array(
        'field_id' => $v,
        'label' => $label,
        'value' => $value,
        'value_label' => $value_label,
      );
    }
  }
  return $display;
}

function _civicrm_invpay2go_prepare_params($contact, $contribution, $field_info){
  civicrm_initialize();

  $types = CRM_Contribute_PseudoConstant::contributionType();
  $type = $types[$contribution['contribution_status_id']];
  $b2b = !empty($field_info['taxReceiptSerial']['value']) && is_numeric($field_info['taxReceiptSerial']['value']) ? $field_info['taxReceiptSerial']['value'] : FALSE;
  $total_amt = round($contribution['total_amount']);
  $tax_rate = 5;
  $amt = $total_amount / ((100 + $tax_rate)/100);
  $tax_amt = $total_amt - $amt;
  $params =  array(
    'MerchantOrderNo' => $contribution['trxn_id'],
    'TransNum' => '', // if pay2go, provide
    'Status' => '1', // 1 - immediately, 0 - trigger to issue, 3 - datetime to issue
    'CreateStatusTime' => '', // only apply this when Status = 3
    'Category' => $b2b ? 'B2B' : 'B2C',
    'BuyerName' => $contact['sort_name'],
    'BuyerUBN' => $b2b ? $b2b : '',
    'BuyerAddress' => '', // not provided
    'BuyerEmail' => $contact['email'],
    'CarrierType' => (!$b2b && !empty($field_info['taxReceiptDeviceType'])) ? $field_info['taxReceiptDeviceType']['value'] : '', // Category=B2C - 0,1,2, no lovecode
    'LoveCode' => (!$b2b && !empty($field_info['taxReceiptDonate']['value'])) ? $field_info['taxReceiptDonate']['value'] : '', // only b2c
    'TaxType' => '1', // TODO what type of tax, read document
    'TaxRate' => $tax_rate, // TODO what rate of tax, read document
    'CustomsClearance' => '', // only taxtype = 2, TODO base on tax type, read doc
    'Amt' => $amt, // total amount
    'AmtSales' => '', // TODO base on tax type 9, do not implement
    'AmtZero' => '', // TODO base on tax type 9, do not implement
    'AmtFree' => '', // TODO base on tax type 9, do not implement
    'TaxAmt' => $tax_amt,
    'TotalAmt' => $total_amt,
    'ItemName' => $type, // TODO
    'ItemCount' => '1', // TODO
    'ItemUnit' => '人', // TODO
    'ItemPrice' => $b2b ? $amt : $total_amt, // B2B->no tax, B2C->include tax
    'ItemAmt' => $b2b ? $amt : $total_amt, // B2B->no tax, B2C->include tax
    'ItemTaxType' => '', // TODO do not implement
    'Comment' => truncate_utf8($contribution['source'], 30), // TODO meaningful comment
  );

  // Carrier Num
  if (!$b2b && isset($params['CarrierType'])) {
    if ($params['CarrierType'] == 2) {
      $params['CarrierNum'] = rawurlencode($contact['email']);
    }
    else {
      $params['CarrierNum'] = $field_info['taxReceiptDeviceNumber']['value'];
    }
  }

  // PrintFlag
  $params['PrintFlag'] = 'N';
  if ($b2b) {
    $params['PrintFlag'] = 'Y';
  }
  elseif (!$b2b && $params['CarrierType'] === '' && empty($params['LoveCode'])) {
    $params['PrintFlag'] = 'Y';
  }
  return $params;
}
