<?php

/**
 * Implementation hook_civicrm_buildForm
 */
function civicrm_field_i18n_civicrm_buildForm($form_name, &$form){
  global $language;
  $allowed = array(
    'CRM_Profile_Form_Edit',
    'CRM_Profile_Form_Dynamic',
    'CRM_UF_Form_Preview',
    'CRM_Contribute_Form_Contribution_Main',
    'CRM_Contribute_Form_Contribution_Confirm',
    'CRM_Contribute_Form_Contribution_ThankYou',
    'CRM_Event_Form_Registration_Register',
    'CRM_Event_Form_Registration_Confirm',
    'CRM_Event_Form_Registration_ThankYou',
  );
  if($language->language != 'en' && in_array($form_name, $allowed)){
    if($_GET['snippet'] == 4){
      if(!empty($form->_paymentProcessors)){
        foreach($form->_paymentProcessors as $k => $v){
          $form->_paymentProcessors[$k]['name'] = civicrm_field_i18n_t($v['name']);
        }
      }
      return;
    }
    if(is_array($form->_fields)){
      reset($form->_fields);
      foreach($form->_fields as $k => $f){
        if(!empty($form->_fields[$k]['groupTitle'])){
          $form->_fields[$k]['groupTitle'] = civicrm_field_i18n_t($form->_fields[$k]['groupTitle']);
        }
        if(!empty($form->_fields[$k]['help_post'])){
          $form->_fields[$k]['help_post'] = civicrm_field_i18n_t($form->_fields[$k]['help_post']);
        }
      }
    }
    foreach ($form->_elements as $k => $e) {
      $name = isset($e->_name) ? $e->_name : '';
      if($e->_type != 'hidden' && $name != 'buttons'){
        if(!empty($e->_label)){
          $form->_elements[$k]->_label = civicrm_field_i18n_t($e->_label);
        }
        switch($e->_type){
          case 'checkbox':
            $form->_elements[$k]->_text = civicrm_field_i18n_t($e->_text);
            break;
          case 'select':
            if(!empty($e->_options) && is_array($e->_options)){
              for($i = 0; $i < count($e->_options); $i++){
                if (is_string($e->_options[$i]['text'])) {
                  $form->_elements[$k]->_options[$i]['text'] = civicrm_field_i18n_t($e->_options[$i]['text']);
                }
              }
            }
            break;
          case 'group': // radios
            if(!empty($e->_elements) && is_array($e->_elements)){
              $first = reset($e->_elements);
              if($first->_type == 'radio'){
                foreach($e->_elements as $i => $radio){
                  $form->_elements[$k]->_elements[$i]->_text = civicrm_field_i18n_t($radio->_text);
                }
              }
            }
            break;
        }
      }
    }
    // for civicrm contribution page and event page
    // Translate group title and help text
    $template = CRM_Core_Smarty::singleton();
    $profiles = array('customPre', 'customPost','customPreGroup','customPostGroup');
    foreach($profiles as $p){
      $vars = $template->get_template_vars($p);
      if(!empty($vars)){
        foreach($vars as $k => $v){
          if(!empty($v['groupTitle'])){
            $vars[$k]['groupTitle'] = civicrm_field_i18n_t($v['groupTitle']);
          }
          if(!empty($v['help_post'])){
            $vars[$k]['help_post'] = civicrm_field_i18n_t($v['help_post']);
          }
          if(!empty($v['groupHelpPre'])){
            $vars[$k]['groupHelpPre'] = civicrm_field_i18n_t($v['groupHelpPre']);
          }
          if(!empty($v['groupHelpPost'])){
            $vars[$k]['groupHelpPost'] = civicrm_field_i18n_t($v['groupHelpPost']);
          }
        }
        $template->assign($p, $vars);
        $vars = array();
      }
    }
  }

  $backend = array(
    'CRM_Contact_Form_Contact',
    'CRM_Contribute_Form_Contribution',
  );
  $allowed_element = array(
    'custom_.*',
    'payment_instrument_id',
  );
  $pattern = '/^('.implode('|', $allowed_element).')$/';
  if($language->language != 'en' && in_array($form_name, $backend)){
    foreach ($form->_elements as $k => $e) {
      $name = isset($e->_name) ? $e->_name : '';
      $elementName = array_search($k, $form->_elementIndex);
      if($e->_type != 'hidden' && $name != 'buttons' && !empty($elementName)){
        if (preg_match($pattern, $elementName)) {
          switch($e->_type){
            case 'checkbox':
              $form->_elements[$k]->_text = civicrm_field_i18n_t($e->_text);
              break;
            case 'select':
              if(!empty($e->_options) && is_array($e->_options)){
                for($i = 0; $i < count($e->_options); $i++){
                  if (is_string($e->_options[$i]['text'])) {
                    $form->_elements[$k]->_options[$i]['text'] = civicrm_field_i18n_t($e->_options[$i]['text']);
                  }
                }
              }
              break;
            case 'group': // radios
              if(!empty($e->_elements) && is_array($e->_elements)){
                $first = reset($e->_elements);
                if($first->_type == 'radio'){
                  foreach($e->_elements as $i => $radio){
                    $form->_elements[$k]->_elements[$i]->_text = civicrm_field_i18n_t($radio->_text);
                  }
                }
              }
              break;
          }
        }
      }
    }
  }
}

function civicrm_field_i18n_civicrm_alterTemplateVars($resourceName, &$vars){
  static $ran;
  global $language;
  if($language->language != 'en' ){
    // profile
    $profiles = array('customPre', 'customPost');
    foreach ($profiles as $p) {
      $var_name = $p . '_grouptitle';
      if(!empty($vars[$var_name])){
        $vars[$var_name] = civicrm_field_i18n_t($vars[$var_name]);
      }

      if(!empty($vars[$p])){
        foreach ($vars[$p] as $k => $v) {
          unset($vars[$p][$k]);
          $vars[$p][civicrm_field_i18n_t($k)] = civicrm_field_i18n_t($v);
        }
      }
    }

    // refs #32070, only translate specific vars
    $allowed_element = array(
      'viewCustomData',
      'payment_instrument',
    );
    foreach($allowed_element as $var_name) {
      if (is_string($vars[$var_name]) && !isset($ran[$var_name])) {
        $vars[$var_name] = civicrm_field_i18n_t($vars[$var_name]);
        $ran[$var_name] = TRUE;
      }
      else {
        if ($var_name == 'viewCustomData' && !empty($vars[$var_name]) && !isset($ran[$var_name])) {
          foreach($vars[$var_name] as &$custom_group) {
            foreach($custom_group as &$g) {
              foreach($g['fields'] as &$field) {
                if ($field['field_data_type'] == 'String' && !empty($field['field_value']) && is_string($field['field_value'])) {
                  $field['field_value'] = civicrm_field_i18n_t($field['field_value']);
                }
                elseif ($field['field_data_type'] == 'String' && !empty($field['field_value']) && is_array($field['field_value'])) {
                  foreach($field['field_value'] as &$val) {
                    if (is_string($val)) {
                      $val = civicrm_field_i18n_t($val);
                    }
                  }
                }
              }
            }
          }
          $ran[$var_name] = TRUE;
        }
      }
    }
  }
}

function civicrm_field_i18n_civicrm_pageRun($page){
  global $language;
  if(is_object($page) && $language->language != 'en'){
    $class = get_class($page);
    if($class == 'CRM_Profile_Page_Dynamic' && $language->language != 'en'){
      civicrm_initialize();
      $template = CRM_Core_Smarty::singleton();
      $fields = $template->get_template_vars('profileFields');
      foreach($fields as $k => $f){
        if(!empty($f['label'])){
          $fields[$k]['label'] = civicrm_field_i18n_t($f['label']);
          $fields[$k]['value'] = civicrm_field_i18n_t($f['value']);
        }
      }
      $template->assign_by_ref('profileFields', $fields);
    }
  }
}

function civicrm_field_i18n_user_view($user, $view_mode){
  global $language;
  if(is_array($user->content) && $language->language != 'en'){
    foreach($user->content as $k => $c){
      if(is_array($c) && !empty($c['#title']) && isset($c[$c['#title']])){
        $content = $c[$c['#title']]['#value'];
        if(strstr($content, 'crm-container')){
          $user->content[$k]['#title'] = civicrm_field_i18n_t($c['#title']);
        }
      }
    }
  }
}

function civicrm_field_i18n_t($text){
  if(!empty($text) && civicrm_field_i18n_test($text) === $text){
    $translated = ts($text);
    if ($translated == $text) {
      $opt = array(
        'context' => 'civicrm',
      );
      $translated = t($text, array(), $opt);
    }
    return $translated;
  }
  return empty($text) ? '' : $text;
}

function civicrm_field_i18n_test($text){
  // prevent translate chinese.
  return preg_replace('/[^a-zA-Z0-9\/_,\'|+ .-?!<>\n\t\s()&-]+/', '', $text);
}
