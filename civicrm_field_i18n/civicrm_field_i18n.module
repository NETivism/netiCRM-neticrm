<?php

use Drupal\Core\StringTranslation\TranslatableMarkup;

/**
 * Implementation hook_civicrm_buildForm
 * 
 * @see CRM_Utils_Hook::buildForm
 */
function civicrm_field_i18n_civicrm_buildForm($form_name, &$form){
  global $tsLocale;

  $allowed = array(
    'CRM_Profile_Form_Edit',
    'CRM_Profile_Form_Dynamic',
    'CRM_UF_Form_Preview',
    'CRM_Contribute_Form_Contribution_Main',
    'CRM_Contribute_Form_Contribution_Confirm',
    'CRM_Contribute_Form_Contribution_ThankYou',
    'CRM_Event_Form_Registration_Register',
    'CRM_Event_Form_Registration_Confirm',
    'CRM_Event_Form_Registration_ThankYou',
  );
  if($tsLocale != CRM_Core_Config::SYSTEM_LANG && in_array($form_name, $allowed)){
    if($_GET['snippet'] == 4){
      if(!empty($form->_paymentProcessors)){
        foreach($form->_paymentProcessors as $k => $v){
          $form->_paymentProcessors[$k]['name'] = civicrm_field_i18n_t($v['name']);
        }
      }
      return;
    }
    if(is_array($form->_fields)){
      reset($form->_fields);
      foreach($form->_fields as $k => $f){
        if(!empty($form->_fields[$k]['groupTitle'])){
          $form->_fields[$k]['groupTitle'] = civicrm_field_i18n_t($form->_fields[$k]['groupTitle']);
        }
        if(!empty($form->_fields[$k]['help_post'])){
          $form->_fields[$k]['help_post'] = civicrm_field_i18n_t($form->_fields[$k]['help_post']);
        }
      }
    }
    foreach ($form->_elements as $k => $e) {
      $name = isset($e->_name) ? $e->_name : '';
      if($e->_type != 'hidden' && $name != 'buttons'){
        if(!empty($e->_label)){
          $form->_elements[$k]->_label = civicrm_field_i18n_t($e->_label);
        }
        switch($e->_type){
          case 'checkbox':
            $form->_elements[$k]->_text = civicrm_field_i18n_t($e->_text);
            break;
          case 'select':
            if(!empty($e->_options) && is_array($e->_options)){
              for($i = 0; $i < count($e->_options); $i++){
                $form->_elements[$k]->_options[$i]['text'] = civicrm_field_i18n_t($e->_options[$i]['text']);
              }
            }
            break;
          case 'group': // radios
            if(!empty($e->_elements) && is_array($e->_elements)){
              $first = reset($e->_elements);
              if($first->_type == 'radio'){
                foreach($e->_elements as $i => $radio){
                  $form->_elements[$k]->_elements[$i]->_text = civicrm_field_i18n_t($radio->_text);
                }
              }
            }
            break;
        }
      }
    }
    // for civicrm contribution page and event page
    // Translate group title and help text
    $template = CRM_Core_Smarty::singleton();
    $profiles = array('customPre', 'customPost','customPreGroup','customPostGroup');
    foreach($profiles as $p){
      $vars = $template->get_template_vars($p);
      if(!empty($vars)){
        foreach($vars as $k => $v){
          if(!empty($v['groupTitle'])){
            $vars[$k]['groupTitle'] = civicrm_field_i18n_t($v['groupTitle']);
          }
          if(!empty($v['help_post'])){
            $vars[$k]['help_post'] = civicrm_field_i18n_t($v['help_post']);
          }
          if(!empty($v['groupHelpPre'])){
            $vars[$k]['groupHelpPre'] = civicrm_field_i18n_t($v['groupHelpPre']);
          }
          if(!empty($v['groupHelpPost'])){
            $vars[$k]['groupHelpPost'] = civicrm_field_i18n_t($v['groupHelpPost']);
          }
        }
        $template->assign($p, $vars);
        $vars = array();
      }
    }
  }
}

function civicrm_field_i18n_civicrm_alterTemplateVars($resourceName, &$vars){
  global $tsLocale;
  if($tsLocale != CRM_Core_Config::SYSTEM_LANG ){
    $profiles = array('customPre', 'customPost');
    foreach ($profiles as $p) {
      $var_name = $p . '_grouptitle';
      if(!empty($vars[$var_name])){
        $vars[$var_name] = civicrm_field_i18n_t($vars[$var_name]);
      }

      if(!empty($vars[$p])){
        foreach ($vars[$p] as $k => $v) {
          unset($vars[$p][$k]);
          $vars[$p][civicrm_field_i18n_t($k)] = civicrm_field_i18n_t($v);
        }
      }
    }
  }
}

/**
 * Implementation hook_civicrm_pageRun
 * 
 * @see CRM_Utils_Hook::pageRun
 */
function civicrm_field_i18n_civicrm_pageRun($page){
  global $tsLocale;
  if(is_object($page) && $tsLocale != CRM_Core_Config::SYSTEM_LANG){
    $class = get_class($page);
    if($class == 'CRM_Profile_Page_Dynamic' && $tsLocale != CRM_Core_Config::SYSTEM_LANG){
      civicrm_initialize();
      $template = CRM_Core_Smarty::singleton();
      $fields = $template->get_template_vars('profileFields');
      foreach($fields as $k => $f){
        if(!empty($f['label'])){
          $fields[$k]['label'] = civicrm_field_i18n_t($f['label']);
          $fields[$k]['value'] = civicrm_field_i18n_t($f['value']);
        }
      }
      $template->assign_by_ref('profileFields', $fields);
    }
  }
}

/**
 * Implementation of hook_ENTITY_TYPE_view
 *
 * @param array $build page element to build
 * @param \Drupal\user\UserInterface $account
 * @param \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display
 * @param string $view_mode
 * @return void
 */
function civicrm_field_i18n_user_view(array &$build, \Drupal\user\UserInterface $account, \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display, $view_mode){
  global $tsLocale;
  if ($tsLocale != CRM_Core_Config::SYSTEM_LANG) {
    if (isset($build['civicrm_profiles'])) {
      foreach($build['civicrm_profiles'] as $idx => &$profile) {
        if (strstr($idx, 'civicrm_profile_')) {
          $profile['#title'] = civicrm_field_i18n_t($profile['#title']);
        }
      }
    }
  }
}

/**
 * Internal translate helper
 *
 * @internal
 * @param string $text
 * @return string
 */
function civicrm_field_i18n_t($text){
  if (empty($text)) {
    return '';
  }
  if (civicrm_field_i18n_test($text) !== $text) {
    return $text;
  }

  // using ts because we depends civicrm_alter_translation
  return ts($text);
}

/**
 * Internal string testing
 * 
 * This testing will prevent chinese being translate and add into drupal.
 *
 * @internal
 * @param string $text
 * @return string|null 
 */
function civicrm_field_i18n_test($text){
  return preg_replace('/[^a-zA-Z0-9\/_,\'|+ .-?!<>\n\t\s()&-]+/', '', $text);
}
