<?php
/**
 * Implementation of hook_civicrm_buildForm()
 */
function civicrm_instrument_civicrm_buildForm($form_name, &$form){
  switch($form_name){
    // contribution page settings
    case 'CRM_Contribute_Form_ContributionPage_Amount':
    case 'CRM_Event_Form_ManageEvent_Fee':
    case 'CRM_Contribute_Form_ContributionPage_Settings':
      $entity_id = $_GET['id'] ? $_GET['id'] : ($form->_defaultValues['id'] ? $form->_defaultValues['id'] : NULL);
      if($entity_id){
        $entity_table = $form_name == 'CRM_Contribute_Form_ContributionPage_Amount' ? 'civicrm_contribution_page' : 'civicrm_event';

        $payment_instruments = CRM_Core_DAO::singleValueQuery("SELECT payment_instruments FROM civicrm_instrument WHERE entity_id = {$entity_id} AND entity_table = '{$entity_table}'");
        $payment_instruments = unserialize($payment_instruments);

        $gid = variable_get('civicrm_instrument_gid', 0);
        $option = CRM_Core_DAO::executeQuery("SELECT * FROM civicrm_option_value WHERE option_group_id = {$gid} AND is_active = 1 ORDER BY is_reserved DESC, id ASC");
        while($option->fetch()){
          $checkbox_name = _civicrm_instrument_form_name($option->name);
          $label = $option->is_reserved ? $option->label." [".ts('Payment Processor')."]*" : $option->label;
          $options[$checkbox_name] = array(
            'default' => $payment_instruments[$checkbox_name] ? 1: 0,
            'label' => $label,
            'reserved' => $option->is_reserved ? 1 : 0,
          );
        }
        drupal_add_js(_civicrm_instrument_js_admin($options, $entity_table), 'inline');
      }
      break;
    case 'CRM_Contribute_Form_Contribution_Main':
    case 'CRM_Event_Form_Registration_Register':
      if(CRM_Utils_Array::value( 'type', $_GET )){
        return;
      }
      // ok, now check the payment limitation.
      $entity_id = $form->getVar('_id') ? $form->getVar('_id') : $form->getVar('_eventId');
      if(!$entity_id){
      /* will add this when necessery
        // using ajax to fetch form
        $qfKey = !empty($form->controller->_key) ? $form->controller->_key : $_GET['qfKey'];
        if($qfKey){
          $k = 'CRM_Contribute_Controller_Contribution_'.$_GET['qfKey'];
          $entity_id = $_SESSION['CiviCRM'][$k]['values']['id'];
        }
        else{
          return;
        }
      */
        return;
      }
      $entity_table = $form_name == 'CRM_Contribute_Form_Contribution_Main' ? 'civicrm_contribution_page' : 'civicrm_event';
      $gid = variable_get('civicrm_instrument_gid', 0);

      $query = CRM_Core_DAO::executeQuery("SELECT payment_instruments FROM civicrm_instrument WHERE entity_id = {$entity_id} AND entity_table = '{$entity_table}'");
      $query->fetch();
      $active_instruments = unserialize($query->payment_instruments);

      $dao = CRM_Core_DAO::executeQuery("SELECT * FROM civicrm_option_value WHERE option_group_id = {$gid} AND is_active = 1 ORDER BY weight ASC");
      while($dao->fetch()){
        $all_instruments[$dao->name] = array(
          'label' => $dao->label,
          'description' => $dao->description,
          'value' => $dao->value,
          'id' => $dao->id,
        );
      }

      if(module_exists('civicrm_gw') && $form->_paymentProcessor['payment_processor_type'] == 'GW'){
        $enabled_instruments = _civicrm_gw_instrument();
        $enabled_instruments = array_intersect_key($all_instruments, $enabled_instruments);
      
        foreach($enabled_instruments as $name => $i){
          $radio_name = _civicrm_instrument_form_name($name);
          if($active_instruments[$radio_name]){
            $radios[$i['value']] = array(
              'form_name'=> $radio_name,
              'name'=> $name, 
              'label' => $i['label'],
              'description' => $i['description'],
            );
          }
        }
      }
      elseif(module_exists('civicrm_neweb') && $form->_paymentProcessor['payment_processor_type'] == 'Neweb'){
        $enabled_instruments = _civicrm_neweb_instrument();
        $enabled_instruments = array_intersect_key($all_instruments, $enabled_instruments);

        foreach($enabled_instruments as $name => $i){
          $radio_name = _civicrm_instrument_form_name($name);
          if($active_instruments[$radio_name]){
            $radios[$i['value']] = array(
              'form_name'=> $radio_name,
              'name'=> $name, 
              'label' => $i['label'],
              'description' => $i['description'],
            );
          }
        }
      }
      elseif(!$form->_paymentProcessor['payment_processor_type']){
        foreach($all_instruments as $name => $i){
          $radio_name = _civicrm_instrument_form_name($name);
          if($active_instruments[$radio_name]){
            $radios[$i['value']] = array(
              'form_name'=> $radio_name,
              'name'=> $name, 
              'label' => $i['label'],
              'description' => $i['description'],
            );
          }
        }
      }

      // we have real active instruments in radios array
      if(!empty($radios)){
        if(count($radios) < 1){
          // nothing
        }
        if(count($radios) == 1){
          $form->addElement('hidden', 'civicrm_instrument_id', key($radios));
        }
        else{ // > 1
          $form->addElement('hidden', 'civicrm_instrument_id', 0);
          drupal_add_js(_civicrm_instrument_js_page($radios, $form), 'inline');
        }
      }
      break;
  }
}

/**
 * Implementation of hook_civicrm_validate()
 */
function civicrm_instrument_civicrm_validate($form_name, &$fields, &$files, &$form){
  switch($form_name){
    case 'CRM_Contribute_Form_Contribution_Main':
    case 'CRM_Event_Form_Registration_Register':
      if(!$fields['civicrm_instrument_id'] && isset($fields['civicrm_instrument_id'])){
        // drupal_set_message(ts('This field is required'), 'error');
        return array('civicrm_instrument_id_dummy' => ts('This field is required.'));
      }
      break;
  }
}

/**
 * Implementation of hook_civicrm_postProcess()
 */
function civicrm_instrument_civicrm_postProcess($form_name, &$form){
  switch($form_name){
    // contribution page settings
    case 'CRM_Contribute_Form_ContributionPage_Amount':
    case 'CRM_Event_Form_ManageEvent_Fee':
    case 'CRM_Contribute_Form_ContributionPage_Settings':
      $entity_table = strstr($form_name, 'Contribute') ? 'civicrm_contribution_page' : 'civicrm_event';
      $entity_id = $form->getVar('_id');
      if($entity_id){
        if( !empty($form->_submitValues['payment_instrument'])){
          $payment_instrument = $form->_submitValues['payment_instrument'];
          CRM_Core_DAO::executeQuery("REPLACE INTO civicrm_instrument SET entity_id = {$entity_id}, entity_table='{$entity_table}', payment_instruments='".serialize($payment_instrument)."'");
        }
        else{
          // empty
          CRM_Core_DAO::executeQuery("REPLACE INTO civicrm_instrument SET entity_id = {$entity_id}, entity_table='{$entity_table}', payment_instruments=''");
        }
      }
      break;
    // save instrument
    case 'CRM_Event_Form_Registration_Register':
      break;
    case 'CRM_Contribute_Form_Contribution_Confirm':
      $cid = $form->_values['contribution_id'];
      $iid = $form->_params['civicrm_instrument_id'];
      if($cid && $iid){
        CRM_Core_DAO::executeQuery("UPDATE civicrm_contribution SET payment_instrument_id = {$iid} WHERE id = {$cid}");
      }
      break;
  }
}

/**
 * Payment instrument admin javascript
 *
 * Provide payment instrument optoins for contribution and 
 * event page administration.
 */ 
function _civicrm_instrument_js_admin($options, $entity_table){
  switch($entity_table){
    case 'civicrm_contribution_page':
      $css_id = 'amountFields';
      break;
    case 'civicrm_event':
      $css_id = 'map-field';
      break;
  }
  $o = "<table class='form-layout-compressed'><tbody><tr>";
  $o .= "<th scope='row' class='label' width='20%'><label for='payment_instrument'>".ts('Payment Instrument').'</label></th>';
  $o .= "<td><div class='content'>";
  foreach($options as $k => $v){
    $checked = $v['default'] ? 'checked=checked' : '';
    $reserved = $v['reserved'] ? ' reserved' : '';
    $o .= "<div class='instrument-wrapper{$reserved}'><label><input type='checkbox' name='payment_instrument[{$k}]' value='1' class='form-checkbox' $checked />".$v['label']."</label></div>";
  }
  $o .= '</div></td>';
  $o .= '</tr></tbody></table>';
  return '
  $(document).ready(function(){
    $("#crm-container #'.$css_id.'").before("'.$o.'");
    if( !$("#crm-container input#is_pay_later").attr("checked") ){
      $("#crm-container .instrument-wrapper").not(".reserved").hide();
    }
    $("#crm-container input#is_pay_later").click(function(){
      if($(this).attr("checked")){
        $("#crm-container .instrument-wrapper").not(".reserved").show();
      }
      else{
        $("#crm-container .instrument-wrapper").not(".reserved").hide();
      }
    });
  });';
}
/**
 * Javascript generate helper function for page
 */
function _civicrm_instrument_js_page($radios, &$form){
  if($_POST['qfKey'] && count($radios) > 1 && !$_POST['civicrm_instrument_id']){
    $error = TRUE;
    $error_str = "<span class='crm-error'>".ts('%1 is a required field.', array( 1 => ts("Payment Instrument")))."</span>";
  }
  $output = "<div class='crm-section'>";
  $output .= "<div class='label'>";
  $error ? $output .= "<span class='crm-error crm-error-label'>" : NULL;
  $output .= ts('Payment Instrument');
  $output .= "<span class='crm-marker' title='此欄位不可空白。'>*</span>";
  $error ? $output .= "</span>" : NULL;
  $output .= "</div>";

  $output .= "<div class='content'>";
  $key = '_'.$form->controller->_name.'_container';
  $submitted_instrument_id = $_POST['civicrm_instrument_id'] ? $_POST['civicrm_instrument_id'] : $_SESSION[$key]['values']['Main']['civicrm_instrument_id'] ? $_SESSION[$key]['values']['Main']['civicrm_instrument_id'] : $_SESSION[$key]['values']['Register']['civicrm_instrument_id'];

  foreach($radios as $value => $radio){
    $c++;
    if($c != 1){
      $error_str = '';
    }
    $checked = $value == $submitted_instrument_id ? "checked='checked'" : '';
    $radio['description'] = str_replace(array("\n","\r"), array('',''), $radio['description']);
    $output .= "<div class='civicrm-instrument-dummy'><label><input type='radio' name='civicrm_instrument_id_dummy' value='".$value."' class='form-radio required' $checked />".$radio['label']."</label>$error_str<div class='hover-item'>".$radio['description']."</div></div>";
  }
  $output .= '</div>';
  $output .= "<div class='clear'></div>";
  $output .= '</div>';
  return '
$(document).ready(function(){
  $("#crm-container form[name=Main] #intro_text").after("'.$output.'");
  $("#crm-container form[name=Register] .crm-event-register-form-block").prepend("'.$output.'");

  $("input[name=civicrm_instrument_id_dummy]").click(function(){
    $("input[name=civicrm_instrument_id]").val($(this).val());
  });
});  
  ';
}
/**
 * Helper function to generate correct instrument form name
 */
function _civicrm_instrument_form_name($name){
  return preg_replace('/[^0-9a-z]+/i', '_', strtolower($name));
}

function civicrm_instrument_by_id($id, $field = NULL){
  $gid = variable_get('civicrm_instrument_gid', 0);
  if(!$field){
    $query = CRM_Core_DAO::exetuteQuery("SELECT * FROM civicrm_option_value WHERE id = {$id} AND option_group_id = {$gid}");
    return $query->fetch();
  }
  else{
    return CRM_Core_DAO::singleValueQuery("SELECT $field FROM civicrm_option_value WHERE value = '{$id}' AND option_group_id = {$gid}");
  }
}

function civicrm_instrument_by_name($name, $field = NULL){
  $gid = variable_get('civicrm_instrument_gid', 0);
  if(!$field){
    $query = CRM_Core_DAO::exetuteQuery("SELECT * FROM civicrm_option_value WHERE name = '{$name}' AND option_group_id = {$gid}");
    return $query->fetch();
  }
  else{
    return CRM_Core_DAO::singleValueQuery("SELECT $field FROM civicrm_option_value WHERE name = '{$name}' AND option_group_id = {$gid}");
  }
}
