<?php
/**
 * Implementation of hook_civicrm_buildForm()
 */
function civicrm_instrument_civicrm_buildForm($form_name, &$form){
  switch($form_name){
    // contribution page settings
    case 'CRM_Contribute_Form_ContributionPage_Amount':
    case 'CRM_Event_Form_ManageEvent_Fee':
      $entity_id = $_GET['id'] ? $_GET['id'] : ($form->_defaultValues['id'] ? $form->_defaultValues['id'] : NULL);
      if($entity_id){
        $entity_table = $form_name == 'CRM_Contribute_Form_ContributionPage_Amount' ? 'civicrm_contribution_page' : 'civicrm_event';

        $saved_instruments = CRM_Core_DAO::singleValueQuery("SELECT payment_instruments FROM civicrm_instrument WHERE entity_id = {$entity_id} AND entity_table = '{$entity_table}'");
        $saved_instruments = unserialize($saved_instruments);
        $default_instruments = array(
          'payment_instrument' => $saved_instruments,
        );

        $gid = variable_get('civicrm_instrument_gid', 0);
        $option = CRM_Core_DAO::executeQuery("SELECT * FROM civicrm_option_value WHERE option_group_id = {$gid} AND is_active = 1 AND is_reserved = 1 ORDER BY weight ASC");

        $mobile_payment_processor = CRM_Core_DAO::singleValueQuery("SELECT id FROM civicrm_payment_processor WHERE is_active = 1 AND is_test = 0 AND payment_processor_type = 'Mobile';");
        $mobile_instruments = array('ApplePay', 'GooglePay');

        while($option->fetch()){
          $checkbox_name = _civicrm_instrument_form_name($option->name);
          if(!in_array($option->name, $mobile_instruments) || $mobile_payment_processor){
            $options[$option->label] = $checkbox_name;
          }
        }
        $form->addCheckBox('payment_instrument', ts('Payment Instrument'), $options);
        $form->setDefaults($default_instruments);
      }
      break;
    case 'CRM_Contribute_Form_Contribution_Main':
    case 'CRM_Event_Form_Registration_Register':
    case 'CRM_Contribute_Form_Payment_Main':
      // check the payment limitation.
      if($form_name == 'CRM_Contribute_Form_Contribution_Main'){
        $entity_id = $form->getVar('_id');
        $entity_table = 'civicrm_contribution_page';
        $info =& $form->_values;
      }
      elseif($form_name == 'CRM_Event_Form_Registration_Register'){
        $entity_id = $form->getVar('_eventId');
        $entity_table = 'civicrm_event';
        $info =& $form->_values['event'];
      }
      else{
        $entity_id = $form->getVar('_entityId');
        $entity_table = $form->getVar('_entityTable');
      }
      $active_instruments = _civicrm_instrument_prepare_active($entity_id, $entity_table);
      $all_instruments = _civicrm_instrument_prepare_all();
      if (!empty($form->_submitValues['civicrm_instrument_id'])) {
        $default_instrument = $form->_submitValues['civicrm_instrument_id'];
      }
      else {
        $default_instrument = !empty($_POST['civicrm_instrument_id_dummy']) ? $_POST['civicrm_instrument_id_dummy'] : 0;
      }

      // is multiple payment processor?
      if($info['is_pay_later'] || !is_numeric($info['payment_processor'])){
        $is_multiple = TRUE;
      }
      else{
        $is_multiple = FALSE; 
      }

      $type = CRM_Utils_Array::value('type', $_GET);
      $snippet = CRM_Utils_Array::value('snippet', $_GET);

      // check if this page is multiple payment processor
      if(!empty($type) && $snippet == 4){
        print civicrm_instrument_attach_instrument($form, $all_instruments, $active_instruments, $default_instrument, FALSE);
        return;
      }
      else{
        $js = '
        cj(document).ready(function(){
          cj("input[name=payment_processor]").live("click", function(){
            if($(this).val() == 0){
              $("input[name=civicrm_instrument_id]").val("0");
            }
            else{
              setTimeout(function(){
              $("input[name=civicrm_instrument_id_dummy]:eq(0)").click();
              }, 400);
            }
          });
          cj("input[name=civicrm_instrument_id_dummy]").live("click", function(){
            cj("input[name=civicrm_instrument_id]").val(cj(this).val());
          });
        });
';
        drupal_add_js($js, 'inline');
        $form->addElement('hidden', 'civicrm_instrument_id', reset($active_instruments));
      }
      break;
  }
}

/**
 * Implementation of hook_civicrm_validate()
 */
function civicrm_instrument_civicrm_validate($form_name, &$fields, &$files, &$form){
  switch($form_name){
    case 'CRM_Contribute_Form_Contribution_Main':
    case 'CRM_Event_Form_Registration_Register':
      $processor_type = $form->_paymentProcessor['payment_processor_type'];
      if(isset($fields['payment_processor']) && $fields['payment_processor'] !== '0' && $processor_type != 'ESUNBANK' && $processor_type != 'NCCC'){
        if( empty($fields['civicrm_instrument_id']) && isset($fields['civicrm_instrument_id_dummy'])){
          return array(
            'payment_processor' => ts('%1 is a required field.', array(1 => ts('Payment Processor'))),
          );
        }

        // validate selected instrument
        if($form_name == 'CRM_Contribute_Form_Contribution_Main'){
          $entity_id = $form->getVar('_id');
          $entity_table = 'civicrm_contribution_page';
        }
        elseif($form_name == 'CRM_Event_Form_Registration_Register'){
          $entity_id = $form->getVar('_eventId');
          $entity_table = 'civicrm_event';
        }
        else{
          $entity_id = $form->getVar('_entityId');
          $entity_table = $form->getVar('_entityTable');
        }
        $all_instruments = _civicrm_instrument_prepare_all();
        $active_instruments = _civicrm_instrument_prepare_active($entity_id, $entity_table);
        $radios = _civicrm_instrument_radios($processor_type, $all_instruments, $active_instruments);
        if (!isset($radios[$fields['civicrm_instrument_id']])) {
          return array(
            'payment_processor' => ts('%1 is a required field.', array(1 => ts('Payment Instruments'))),
          );
        }
      }
      break;
    // contribution page settings
    case 'CRM_Contribute_Form_ContributionPage_Amount':
      $errors = array();
      if (!empty($fields['is_recur'])) {
        $js_settings = array(
          'required_credit_card' => '',
          'is_recur_only' => '',
        );
        if (empty($fields['payment_instrument']['credit_card'])) {
          $problem = ts("Recurring Contribution").": ".ts('%1 is a required field.', array(1 => ts('Credit Card')));
          $js_settings['required_credit_card'] = $problem;
          $errors['payment_instrument_credit_card'] = $problem;
        }
        if (!empty($fields['is_recur_only'])) {
          $problem = ts('You cannot set up a recurring contribution if you are not paying online by credit card.');
          foreach ($fields['payment_instrument'] as $k => $v) {
            if ($k != 'credit_card') {
              $js_settings['is_recur_only'] = $problem;
              $errors['payment_instrument_is_recur_only'] = $problem;
              break;
            }
          }
        }
        drupal_add_js(array('civicrm_instrument' => $js_settings), 'setting');
        if (!empty($errors)) {
          $js = 'cj(document).ready(function($){
    if ($("#crm-container label[for^=payment_instrument]").length) {
      $("#crm-container label[for^=payment_instrument]").each(function(){
        if ($(this).attr("for") == "payment_instrument[credit_card]") {
          $(this).append("<span class=\'crm-error crm-error-instrument\'>"+Drupal.settings.civicrm_instrument.required_credit_card+"</span>");
        }
        else {
          if (Drupal.settings.civicrm_instrument.is_recur_only && $(this).find("input").attr("checked")) {
            $(this).append("<span class=\'crm-error crm-error-instrument\'>"+Drupal.settings.civicrm_instrument.is_recur_only+"</span>");
          }
        }
        $(this).closest("td").children(".crm-error").remove();
      });
    }
  });';
          drupal_add_js($js, 'inline', 'footer');
        }
      }
      // continue validate with fee
    case 'CRM_Event_Form_ManageEvent_Fee':
      if (!empty($fields['is_monetary']) && !empty($fields['payment_processor'])) {
        if (empty($fields['payment_instrument'])) {
          $errors['payment_instrument_required'] = ts('%1 is a required field.', array(1 => ts('Payment Instrument')));
         }
      }
      if (!empty($errors)) {
        return array('payment_instrument' => implode('<br>', $errors));
      }
      break;
  }
}

/**
 * Implementation of hook_civicrm_postProcess()
 */
function civicrm_instrument_civicrm_postProcess($form_name, &$form){
  switch($form_name){
    // contribution page settings
    case 'CRM_Contribute_Form_ContributionPage_Amount':
    case 'CRM_Event_Form_ManageEvent_Fee':
      $entity_table = strstr($form_name, 'Contribute') ? 'civicrm_contribution_page' : 'civicrm_event';
      $entity_id = $form->getVar('_id');
      if($entity_id){
        if( !empty($form->_submitValues['payment_instrument'])){
          $payment_instrument = $form->_submitValues['payment_instrument'];
          $qvar = array(1 => array(serialize($payment_instrument) ,'String'));
          CRM_Core_DAO::executeQuery("REPLACE INTO civicrm_instrument SET entity_id = {$entity_id}, entity_table='{$entity_table}', payment_instruments=%1", $qvar);
        }
        else{
          // empty
          CRM_Core_DAO::executeQuery("REPLACE INTO civicrm_instrument SET entity_id = {$entity_id}, entity_table='{$entity_table}', payment_instruments=''");
        }
      }
      break;
    // save instrument
    case 'CRM_Event_Form_Registration_Register':
      break;
    case 'CRM_Contribute_Form_Contribution_Confirm':
      $cid = $form->_values['contribution_id'];
      $iid = $form->_params['civicrm_instrument_id'];
      if($cid && $iid){
        CRM_Core_DAO::executeQuery("UPDATE civicrm_contribution SET payment_instrument_id = {$iid} WHERE id = {$cid}");
      }
      break;
  }
}

/**
 * Implementation of hook_civicrm_copy()
 */
function civicrm_instrument_civicrm_copy( $objectName, &$object ){
  if(($objectName == "ContributionPage" || $objectName == "Event" ) && !empty($object->originId)){
    $dao = CRM_Core_DAO::executeQuery("REPLACE INTO civicrm_instrument (entity_id, entity_table, payment_instruments) SELECT {$object->id},entity_table, payment_instruments FROM civicrm_instrument WHERE entity_id = {$object->originId} ");
    $dao->fetch();
  }
}

/**
 * Javascript generate helper function for page
 */
function _civicrm_instrument_js_page($radios, &$form, $default_instrument = 0){
  if($_POST['qfKey'] && count($radios) > 1 && !$_POST['civicrm_instrument_id']){
    $error = TRUE;
    $error_str = "<span class='crm-error'>".ts('%1 is a required field.', array( 1 => ts("Payment Instrument")))."</span>";
  }
  $output = "<div class='crm-section instrument-section'>";
  $output .= "<div class='label'><label>";
  $error ? $output .= "<span class='crm-error crm-error-label'>" : NULL;
  $output .= ts('Payment Instrument');
  $output .= "<span class='crm-marker' title='此欄位不可空白。'>*</span>";
  $error ? $output .= "</span>" : NULL;
  $output .= "</label></div>";

  $output .= "<div class='content'>";
  $key = '_'.$form->controller->_name.'_container';
  $submitted_instrument_id = $_POST['civicrm_instrument_id'] ? $_POST['civicrm_instrument_id'] : $_SESSION[$key]['values']['Main']['civicrm_instrument_id'] ? $_SESSION[$key]['values']['Main']['civicrm_instrument_id'] : $_SESSION[$key]['values']['Register']['civicrm_instrument_id'];

  if (empty($default_instrument)) {
    $default_instrument = key($radios);
  }
  foreach($radios as $rid => $radio){
    if (module_exists('civicrm_field_i18n')) {
      $radio['description'] = civicrm_field_i18n_t($radio['description']);
      $radio['label'] = civicrm_field_i18n_t($radio['label']);
    }
    $c++;
    if($c != 1){
      $error_str = '';
    }
    $checked = ($rid == $default_instrument) ? "checked='checked'" : '';
    $radio['description'] = str_replace(array("\n","\r"), array('',''), $radio['description']);
    $output .= "<div class='civicrm-instrument-dummy'><label class='crm-form-elem crm-form-radio md-elem md-radio' for='civicrm-instrument-dummy-".$rid."'><input id='civicrm-instrument-dummy-".$rid."' type='radio' name='civicrm_instrument_id_dummy' value='".$rid."' class='form-radio md-radio-input required' $checked /><span class='elem-label md-radio-label'>".$radio['label']."</span></label>$error_str<div class='hover-item'>".$radio['description']."</div></div>";
  }
  $output .= '</div>';
  $output .= "<div class='clear'></div>";
  $output .= '</div>';
  return '
cj(document).ready(function(){
  $("#crm-container form[name=Main] #intro_text").after("'.$output.'");
  $("#crm-container form[name=Register] #priceset").after("'.$output.'");

  $("input[name=civicrm_instrument_id_dummy]").click(function(){
    $("input[name=civicrm_instrument_id]").val($(this).val());
  });
});  
  ';
}
/**
 * Helper function to generate correct instrument form name
 */
function _civicrm_instrument_form_name($name){
  return preg_replace('/[^0-9a-z]+/i', '_', strtolower($name));
}

function civicrm_instrument_by_id($id, $field = NULL){
  $gid = variable_get('civicrm_instrument_gid', 0);
  if(!$field){
    $query = CRM_Core_DAO::exetuteQuery("SELECT * FROM civicrm_option_value WHERE id = {$id} AND option_group_id = {$gid}");
    return $query->fetch();
  }
  else{
    return CRM_Core_DAO::singleValueQuery("SELECT $field FROM civicrm_option_value WHERE value = '{$id}' AND option_group_id = {$gid}");
  }
}

function civicrm_instrument_by_name($name, $field = NULL){
  $gid = variable_get('civicrm_instrument_gid', 0);
  if(!$field){
    $query = CRM_Core_DAO::exetuteQuery("SELECT * FROM civicrm_option_value WHERE name = '{$name}' AND option_group_id = {$gid}");
    return $query->fetch();
  }
  else{
    return CRM_Core_DAO::singleValueQuery("SELECT $field FROM civicrm_option_value WHERE name = '{$name}' AND option_group_id = {$gid}");
  }
}

function civicrm_instrument_attach_instrument($form, &$all_instruments, &$active_instruments, $default_instrument = 0, $js = FALSE){
  $radios = _civicrm_instrument_radios($form->_paymentProcessor['payment_processor_type'], $all_instruments, $active_instruments);

  // we have real active instruments in radios array
  if(!empty($radios)){
    if(count($radios) && $js){
      // attach by js
      drupal_add_js(_civicrm_instrument_js_page($radios, $form, $default_instrument), 'inline');
    }
    else{
      // attach by html
      if(count($radios) == 1){
        $rid = key($radios);
        $r = reset($radios);
        if (module_exists('civicrm_field_i18n')) {
          $r['description'] = civicrm_field_i18n_t($r['description']);
          $r['label'] = civicrm_field_i18n_t($r['label']);
        }
        $output = '<div class="civicrm-instrument-dummy"><label class="crm-form-elem crm-form-radio md-elem md-radio" for="civicrm-instrument-dummy-'.$rid.'"><input id="civicrm-instrument-dummy-'.$rid.'" type="radio" name="civicrm_instrument_id_dummy" value="'.$rid.'" checked="checked" class="form-radio md-radio-input required"><span class="elem-label md-radio-label">'.$r['label'].'</span></label><div class="hover-item">'.$r['description'].'</div></div>'."\n";
      }
      else{
        if (empty($default_instrument)) {
          $default_instrument = key($radios);
        }
        foreach($radios as $rid => $r){
          if (module_exists('civicrm_field_i18n')) {
            $r['description'] = civicrm_field_i18n_t($r['description']);
            $r['label'] = civicrm_field_i18n_t($r['label']);
          }
          $checked = ($rid == $default_instrument) ? 'checked="checked"' : '';
          $output .= '<div class="civicrm-instrument-dummy"><label class="crm-form-elem crm-form-radio md-elem md-radio" for="civicrm-instrument-dummy-'.$rid.'"><input id="civicrm-instrument-dummy-'.$rid.'" type="radio" name="civicrm_instrument_id_dummy" value="'.$rid.'" class="form-radio md-radio-input required" '.$checked.'><span class="elem-label md-radio-label">'.$r['label'].'</span></label><div class="hover-item">'.$r['description'].'</div></div>'."\n";
        }
      }
      $label = ts('Payment Instrument');
      $output = '
      <div class="crm-section instrument-section">
        <div class="label"><label>'.$label.'<span class="crm-marker" title="此欄位不可空白。">*</span></label></div>
        <div class="content">
          '.$output.'
        </div>
        <div class="clear"></div>
      </div>
      ';
      return $output;
    }
  }
}

function _civicrm_instrument_prepare_active($entity_id, $entity_table){
  $gid = variable_get('civicrm_instrument_gid', 0);
  $query_params = array(
    1 => array($entity_id, 'Integer'),
    2 => array($entity_table,'String'),
  );
  $query = CRM_Core_DAO::executeQuery("SELECT payment_instruments FROM civicrm_instrument WHERE entity_id = %1 AND entity_table = %2", $query_params);
  $query->fetch();
  $active_instruments = unserialize($query->payment_instruments);
  if(empty($active_instruments)){
    $active_instruments = array();
  }
  return $active_instruments;
}
function _civicrm_instrument_prepare_all(){
  $gid = variable_get('civicrm_instrument_gid', 0);
  $all_instruments = array();
  $dao = CRM_Core_DAO::executeQuery("SELECT * FROM civicrm_option_value WHERE option_group_id = {$gid} AND is_active = 1 ORDER BY weight ASC");
  while($dao->fetch()){
    $all_instruments[$dao->name] = array(
      'label' => $dao->label,
      'description' => $dao->description,
      'value' => $dao->value,
      'id' => $dao->id,
    );
  }
  return $all_instruments;
}
function _civicrm_instrument_radios($processor_type, $all_instruments, $active_instruments){
  $radios = array();
  if(module_exists('civicrm_gw') && $processor_type == 'GW'){
    $enabled_instruments = _civicrm_gw_instrument();
    $enabled_instruments = array_intersect_key($all_instruments, $enabled_instruments);
  
    foreach($enabled_instruments as $name => $i){
      $radio_name = _civicrm_instrument_form_name($name);
      if($active_instruments[$radio_name]){
        $radios[$i['value']] = array(
          'form_name'=> $radio_name,
          'name'=> $name, 
          'label' => $i['label'],
          'description' => $i['description'],
        );
      }
    }
  }
  elseif(module_exists('civicrm_neweb') && $processor_type == 'Neweb'){
    $enabled_instruments = _civicrm_neweb_instrument();
    $enabled_instruments = array_intersect_key($all_instruments, $enabled_instruments);

    foreach($enabled_instruments as $name => $i){
      $radio_name = _civicrm_instrument_form_name($name);
      if($active_instruments[$radio_name]){
        $radios[$i['value']] = array(
          'form_name'=> $radio_name,
          'name'=> $name, 
          'label' => $i['label'],
          'description' => $i['description'],
        );
      }
    }
  }
  elseif(module_exists('civicrm_allpay') && strstr($processor_type, 'ALLPAY')){
    $enabled_instruments = _civicrm_allpay_instrument();
    $enabled_instruments = array_intersect_key($all_instruments, $enabled_instruments);
    if($processor_type == 'ALLPAY'){
      $credit_card = $enabled_instruments['Credit Card'];
      $enabled_instruments = array(
        'Credit Card' => $credit_card,
      );
      if($_GET['id']){
        $_POST['civicrm_instrument_id'] = $credit_card['value'];
      }
    }
    else{
      unset($enabled_instruments['Credit Card']);
    }
    foreach($enabled_instruments as $name => $i){
      if($name == 'Convenient Store'){
        $i['description'].='若您是使用手機瀏覽，目前不支援綠界金流的超商條碼，請選擇其他工具';
        $js = 'function show_allpay_msg(){
            $option = jQuery("[for=civicrm-instrument-dummy-11]");
            if($option.children("#civicrm-instrument-dummy-11").is(":checked")){
              $option.next(".hover-item").show();
            }else{
              $option.next(".hover-item").hide();
            }
          }
          jQuery(function(){
            show_allpay_msg();
            jQuery(".civicrm-instrument-dummy input").change(show_allpay_msg);
          })';
        $css = '
        [for="civicrm-instrument-dummy-11"]+.hover-item {
          color: red;
          font-size: 13px;
        }';
        $snippet = CRM_Utils_Array::value('snippet', $_GET);
        if($snippet == 4){
          print("
            <script>
            $js
            </script>
            <style>
            $css
            </style>");
        }
      }
      $radio_name = _civicrm_instrument_form_name($name);
      if($active_instruments[$radio_name]){
        $radios[$i['value']] = array(
          'form_name'=> $radio_name,
          'name'=> $name, 
          'label' => $i['label'],
          'description' => $i['description'],
        );
      }
    }
  }
  elseif(module_exists('civicrm_spgateway') && strstr($processor_type, 'SPGATEWAY')){
    $enabled_instruments = _civicrm_spgateway_instrument();
    $enabled_instruments = array_intersect_key($all_instruments, $enabled_instruments);
    if($processor_type == 'SPGATEWAY'){
      $credit_card = $enabled_instruments['Credit Card'];
      $enabled_instruments = array(
        'Credit Card' => $credit_card,
      );
      if(!empty($_GET['id'])){
        $_POST['civicrm_instrument_id'] = $credit_card['value'];
      }
    }
    else{
      unset($enabled_instruments['Credit Card']);
    }
    foreach($enabled_instruments as $name => $i){
      $radio_name = _civicrm_instrument_form_name($name);
      if(!empty($active_instruments[$radio_name])){
        $radios[$i['value']] = array(
          'form_name'=> $radio_name,
          'name'=> $name,
          'label' => $i['label'],
          'description' => $i['description'],
        );
      }
    }
  }
  elseif (strstr($processor_type, 'PayPal')) {
    $enabled_instruments = array(
      'Credit Card' =>  array('label' => '信用卡', 'desc' => '', 'code' => 'Credit', 'value' => 1),
    );
    if(!empty($_GET['id'])){
      $_POST['civicrm_instrument_id'] = 1;
    }
    foreach($enabled_instruments as $name => $i){
      $radio_name = _civicrm_instrument_form_name($name);
      if(!empty($active_instruments[$radio_name])){
        $radios[$i['value']] = array(
          'form_name'=> $radio_name,
          'name'=> $name,
          'label' => ts($name),
        );
      }
    }
  }

  if($processor_type == 'Mobile'){
    $mobile_instruments = array('GooglePay', 'ApplePay');
    foreach ($mobile_instruments as $name) {
      $radio_name = _civicrm_instrument_form_name($name);
      if(!empty($active_instruments[$radio_name])){
        $i = $all_instruments[$name];
        $radios[$i['value']] = array(
          'form_name'=> $radio_name,
          'name'=> $name,
          'label' => $i['label'],
          'description' => $i['description'],
        );
      }
    }
  }

  return $radios;
}
