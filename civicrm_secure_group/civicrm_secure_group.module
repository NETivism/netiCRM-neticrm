<?php

// for security issue, we can only setup these variable by settings.php
define( 'CIVICRM_SECURE_GROUP_GID',  variable_get('civicrm_secure_group_gid', '0') );
define( 'CIVICRM_SECURE_GROUP_RID',  variable_get('civicrm_secure_group_rid', '0') );

function civicrm_secure_group_menu(){
  $items['admin/config/system/civicrm_secure'] = array(
    'title' => t('CiviCRM Secure Group'),
    'description' => t('CiviCRM secure group setting.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('civicrm_secure_group_settings'),
    'access callback' => 'user_access',
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

function civicrm_secure_group_settings(){
  if (!empty(CIVICRM_SECURE_GROUP_GID)) {
    $form['civicrm_secure_group_gids'] = array(
      '#markup' => '<div>Current gids: ' . CIVICRM_SECURE_GROUP_GID . '</div>',
    );
    $form['civicrm_secure_group_rid'] = array(
      '#markup' => '<div>Current rid: ' . CIVICRM_SECURE_GROUP_RID . '</div>',
    );
  }
  $form['civicrm_secure_group_reverse'] = array(
    '#type' => 'checkbox',
    '#title' => t('Hide not listed groups to role'),
    '#description' => t('Check this will hide groups not listed in civicrm_secure_group_gid when user have role. Uncheck this will show all groups when user have permission "administer CiviCRM"'),
    '#default_value' => variable_get('civicrm_secure_group_reverse', 0),
  );
  return system_settings_form($form);
}

function civicrm_secure_group_requirements($phase) {
  $requirements = array();
  $t = get_t();
  if ($phase == 'runtime') {
    $requirements['civicrm_secure_group'] = array(
      'title' => $t('CiviCRM Secure Group'),
      'description' => $t('Secure Gruop module enabled, but no any CiviCRM group and Drupal role set. This may have secure problem, add conf civicrm_secure_group_gid and civicrm_secure_group_rid into your settings.php'),
      'value' => 'GID:'. variable_get('civicrm_secure_group_gid', '') . ', RID:'.variable_get('civicrm_secure_group_rid', ''),
    );
    if(empty(CIVICRM_SECURE_GROUP_GID) || empty(CIVICRM_SECURE_GROUP_RID)) {
      $requirements['civicrm_secure_group']['severity'] = REQUIREMENT_ERROR;
    }
    else {
      $requirements['civicrm_secure_group']['severity'] = REQUIREMENT_OK;
    }
  }
  return $requirements;
} 

function civicrm_secure_group_civicrm_aclWhereClause( $type, &$tables, &$whereTables, &$contactID, &$where ) {
  global $user;
  civicrm_initialize( );

  if ( ! empty( $where ) ) {
      $where .= ' AND ';
  } else {
      $where = '';
  }

  if( !strstr($where, 'is_deleted') && empty($_POST['deleted_contacts']) ){
    $where .= ' contact_a.is_deleted = 0 AND ';
  }

  // if the contact has spcific role, dont modify the clause
  $groups = explode(',', CIVICRM_SECURE_GROUP_GID);

  if( array_key_exists(CIVICRM_SECURE_GROUP_RID, $user->roles) ) {
    if(variable_get('civicrm_secure_group_reverse', 0)){
      $groupTable = 'secure_group';
      $tables[$groupTable] = $whereTables[$groupTable] =
          "LEFT JOIN civicrm_group_contact $groupTable ON ( contact_a.id = $groupTable.contact_id AND $groupTable.group_id IN(" . CIVICRM_SECURE_GROUP_GID . ") )";
      $where .= " ( $groupTable.status = 'Added' ) ";
    }
    else{
      $where .= ' (1) ';
    }
  }
  else{
    // else modify the query so we can ensure that contactIDs belong to the secure group are not shown
    $groupTable = 'secure_group';
    $tables[$groupTable] = $whereTables[$groupTable] =
        "LEFT JOIN civicrm_group_contact $groupTable ON ( contact_a.id = $groupTable.contact_id AND $groupTable.group_id IN(" . CIVICRM_SECURE_GROUP_GID . ") )";
    $where .= " ( $groupTable.status is null OR $groupTable.status != 'Added' ) ";
  }
}

function civicrm_secure_group_civicrm_aclGroup( $type, $contactID, $tableName, &$allGroups, &$currentGroups ) {
  global $user;
  // only process saved search
  if ( $tableName != 'civicrm_saved_search' ) {
    return;
  }

  civicrm_initialize( );

  $currentGroups = $allGroups;
  $groups = explode(',', CIVICRM_SECURE_GROUP_GID);

  if ( !array_key_exists(CIVICRM_SECURE_GROUP_RID, $user->roles) ) {
    foreach($groups as $gid){
      if(isset($currentGroups[$gid])){
        unset( $currentGroups[$gid] );
      }
    }
    $currentGroups = array_keys($currentGroups);
  }
  else{
    if(variable_get('civicrm_secure_group_reverse', 0)){
      $currentGroups = $groups;
    }
    else{
      $currentGroups = array_keys( $currentGroups );
    }
  }
}

/**
 * remove secure role for drupal user edit page
 */
function civicrm_secure_group_form_alter(&$form, &$form_state, $form_name){
  global $user;
  if($form_name == 'user_profile_form' && !empty($form['account']['roles']['#options'][CIVICRM_SECURE_GROUP_RID]) ){
    if( !array_key_exists(CIVICRM_SECURE_GROUP_RID, $user->roles) && $user->uid != 1) {
      unset($form['account']['roles']['#options'][CIVICRM_SECURE_GROUP_RID]);
    }
  }
}

